   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.action_exec,"ax",@progbits
  12               	.global	action_exec
  14               	action_exec:
  15               	.LFB103:
  16               		.file 1 "../tmk_core/common/action.c"
   1:../tmk_core/common/action.c **** /*
   2:../tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:../tmk_core/common/action.c **** 
   4:../tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:../tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:../tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:../tmk_core/common/action.c **** (at your option) any later version.
   8:../tmk_core/common/action.c **** 
   9:../tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:../tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../tmk_core/common/action.c **** GNU General Public License for more details.
  13:../tmk_core/common/action.c **** 
  14:../tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:../tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../tmk_core/common/action.c **** */
  17:../tmk_core/common/action.c **** #include "host.h"
  18:../tmk_core/common/action.c **** #include "keycode.h"
  19:../tmk_core/common/action.c **** #include "keyboard.h"
  20:../tmk_core/common/action.c **** #include "mousekey.h"
  21:../tmk_core/common/action.c **** #include "command.h"
  22:../tmk_core/common/action.c **** #include "led.h"
  23:../tmk_core/common/action.c **** #include "backlight.h"
  24:../tmk_core/common/action.c **** #include "action_layer.h"
  25:../tmk_core/common/action.c **** #include "action_tapping.h"
  26:../tmk_core/common/action.c **** #include "action_macro.h"
  27:../tmk_core/common/action.c **** #include "action_util.h"
  28:../tmk_core/common/action.c **** #include "action.h"
  29:../tmk_core/common/action.c **** #include "hook.h"
  30:../tmk_core/common/action.c **** 
  31:../tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  32:../tmk_core/common/action.c **** #include "debug.h"
  33:../tmk_core/common/action.c **** #else
  34:../tmk_core/common/action.c **** #include "nodebug.h"
  35:../tmk_core/common/action.c **** #endif
  36:../tmk_core/common/action.c **** 
  37:../tmk_core/common/action.c **** 
  38:../tmk_core/common/action.c **** void action_exec(keyevent_t event)
  39:../tmk_core/common/action.c **** {
  17               		.loc 1 39 0
  18               		.cfi_startproc
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27 0004 CDB7      		in r28,__SP_L__
  28 0006 DEB7      		in r29,__SP_H__
  29               	.LCFI2:
  30               		.cfi_def_cfa_register 28
  31 0008 2B97      		sbiw r28,11
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 15
  34 000a 0FB6      		in __tmp_reg__,__SREG__
  35 000c F894      		cli
  36 000e DEBF      		out __SP_H__,r29
  37 0010 0FBE      		out __SREG__,__tmp_reg__
  38 0012 CDBF      		out __SP_L__,r28
  39               	/* prologue: function */
  40               	/* frame size = 11 */
  41               	/* stack size = 13 */
  42               	.L__stack_usage = 13
  43 0014 942F      		mov r25,r20
  44 0016 4F83      		std Y+7,r20
  45 0018 252F      		mov r18,r21
  46 001a 5887      		std Y+8,r21
  47 001c 6987      		std Y+9,r22
  48 001e 7A87      		std Y+10,r23
  49 0020 8B87      		std Y+11,r24
  50               	.LVL0:
  51               	.LBB4:
  52               	.LBB5:
  53               		.file 2 "../tmk_core/common/keyboard.h"
   1:../tmk_core/common/keyboard.h **** /*
   2:../tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../tmk_core/common/keyboard.h **** 
   4:../tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../tmk_core/common/keyboard.h **** (at your option) any later version.
   8:../tmk_core/common/keyboard.h **** 
   9:../tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:../tmk_core/common/keyboard.h **** 
  14:../tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../tmk_core/common/keyboard.h **** */
  17:../tmk_core/common/keyboard.h **** 
  18:../tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:../tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:../tmk_core/common/keyboard.h **** 
  21:../tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:../tmk_core/common/keyboard.h **** #include <stdint.h>
  23:../tmk_core/common/keyboard.h **** 
  24:../tmk_core/common/keyboard.h **** 
  25:../tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:../tmk_core/common/keyboard.h **** extern "C" {
  27:../tmk_core/common/keyboard.h **** #endif
  28:../tmk_core/common/keyboard.h **** 
  29:../tmk_core/common/keyboard.h **** /* key matrix position */
  30:../tmk_core/common/keyboard.h **** typedef struct {
  31:../tmk_core/common/keyboard.h ****     uint8_t col;
  32:../tmk_core/common/keyboard.h ****     uint8_t row;
  33:../tmk_core/common/keyboard.h **** } keypos_t;
  34:../tmk_core/common/keyboard.h **** 
  35:../tmk_core/common/keyboard.h **** /* key event */
  36:../tmk_core/common/keyboard.h **** typedef struct {
  37:../tmk_core/common/keyboard.h ****     keypos_t key;
  38:../tmk_core/common/keyboard.h ****     bool     pressed;
  39:../tmk_core/common/keyboard.h ****     uint16_t time;
  40:../tmk_core/common/keyboard.h **** } keyevent_t;
  41:../tmk_core/common/keyboard.h **** 
  42:../tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:../tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../tmk_core/common/keyboard.h **** 
  45:../tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:../tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../tmk_core/common/keyboard.h ****  */
  49:../tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  54               		.loc 2 49 0
  55 0022 4A85      		ldd r20,Y+10
  56 0024 5B85      		ldd r21,Y+11
  57               	.LVL1:
  58 0026 452B      		or r20,r21
  59 0028 01F0      		breq .L2
  60 002a 2F3F      		cpi r18,lo8(-1)
  61 002c 01F4      		brne .L3
  62 002e 9F3F      		cpi r25,lo8(-1)
  63 0030 01F4      		brne .L3
  64               	.LVL2:
  65               	.L2:
  66               	.LBE5:
  67               	.LBE4:
  40:../tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  41:../tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  42:../tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  43:../tmk_core/common/action.c ****         hook_matrix_change(event);
  44:../tmk_core/common/action.c ****     }
  45:../tmk_core/common/action.c **** 
  46:../tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  68               		.loc 1 46 0
  69 0032 DE01      		movw r26,r28
  70 0034 1196      		adiw r26,1
  71 0036 86E0      		ldi r24,lo8(6)
  72 0038 FD01      		movw r30,r26
  73               		0:
  74 003a 1192      		st Z+,__zero_reg__
  75 003c 8A95      		dec r24
  76 003e 01F4      		brne 0b
  77 0040 85E0      		ldi r24,lo8(5)
  78 0042 FE01      		movw r30,r28
  79 0044 3796      		adiw r30,7
  80               		0:
  81 0046 0190      		ld r0,Z+
  82 0048 0D92      		st X+,r0
  83 004a 8A95      		dec r24
  84 004c 01F4      		brne 0b
  47:../tmk_core/common/action.c **** 
  48:../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  49:../tmk_core/common/action.c ****     action_tapping_process(record);
  85               		.loc 1 49 0
  86 004e 4981      		ldd r20,Y+1
  87 0050 5A81      		ldd r21,Y+2
  88 0052 6B81      		ldd r22,Y+3
  89 0054 7C81      		ldd r23,Y+4
  90 0056 8D81      		ldd r24,Y+5
  91 0058 9E81      		ldd r25,Y+6
  92 005a 0E94 0000 		call action_tapping_process
  93               	.LVL3:
  94               	/* epilogue start */
  50:../tmk_core/common/action.c **** #else
  51:../tmk_core/common/action.c ****     process_action(&record);
  52:../tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  53:../tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  54:../tmk_core/common/action.c ****     }
  55:../tmk_core/common/action.c **** #endif
  56:../tmk_core/common/action.c **** }
  95               		.loc 1 56 0
  96 005e 2B96      		adiw r28,11
  97 0060 0FB6      		in __tmp_reg__,__SREG__
  98 0062 F894      		cli
  99 0064 DEBF      		out __SP_H__,r29
 100 0066 0FBE      		out __SREG__,__tmp_reg__
 101 0068 CDBF      		out __SP_L__,r28
 102 006a DF91      		pop r29
 103 006c CF91      		pop r28
 104 006e 0895      		ret
 105               	.LVL4:
 106               	.L3:
  43:../tmk_core/common/action.c ****     }
 107               		.loc 1 43 0
 108 0070 4F81      		ldd r20,Y+7
 109               	.LVL5:
 110 0072 5885      		ldd r21,Y+8
 111 0074 6985      		ldd r22,Y+9
 112 0076 7A85      		ldd r23,Y+10
 113 0078 8B85      		ldd r24,Y+11
 114 007a 0E94 0000 		call hook_matrix_change
 115               	.LVL6:
 116 007e 00C0      		rjmp .L2
 117               		.cfi_endproc
 118               	.LFE103:
 120               		.section	.text.register_code,"ax",@progbits
 121               	.global	register_code
 123               	register_code:
 124               	.LFB105:
  57:../tmk_core/common/action.c **** 
  58:../tmk_core/common/action.c **** void process_action(keyrecord_t *record)
  59:../tmk_core/common/action.c **** {
  60:../tmk_core/common/action.c ****     keyevent_t event = record->event;
  61:../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  62:../tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
  63:../tmk_core/common/action.c **** #endif
  64:../tmk_core/common/action.c **** 
  65:../tmk_core/common/action.c ****     if (IS_NOEVENT(event)) { return; }
  66:../tmk_core/common/action.c **** 
  67:../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(event.key);
  68:../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
  69:../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
  70:../tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
  71:../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
  72:../tmk_core/common/action.c **** #endif
  73:../tmk_core/common/action.c ****     dprintln();
  74:../tmk_core/common/action.c **** 
  75:../tmk_core/common/action.c ****     switch (action.kind.id) {
  76:../tmk_core/common/action.c ****         /* Key and Mods */
  77:../tmk_core/common/action.c ****         case ACT_LMODS:
  78:../tmk_core/common/action.c ****         case ACT_RMODS:
  79:../tmk_core/common/action.c ****             {
  80:../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
  81:../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
  82:../tmk_core/common/action.c ****                 if (event.pressed) {
  83:../tmk_core/common/action.c ****                     if (mods) {
  84:../tmk_core/common/action.c ****                         add_weak_mods(mods);
  85:../tmk_core/common/action.c ****                         send_keyboard_report();
  86:../tmk_core/common/action.c ****                     }
  87:../tmk_core/common/action.c ****                     register_code(action.key.code);
  88:../tmk_core/common/action.c ****                 } else {
  89:../tmk_core/common/action.c ****                     unregister_code(action.key.code);
  90:../tmk_core/common/action.c ****                     if (mods) {
  91:../tmk_core/common/action.c ****                         del_weak_mods(mods);
  92:../tmk_core/common/action.c ****                         send_keyboard_report();
  93:../tmk_core/common/action.c ****                     }
  94:../tmk_core/common/action.c ****                 }
  95:../tmk_core/common/action.c ****             }
  96:../tmk_core/common/action.c ****             break;
  97:../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  98:../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
  99:../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 100:../tmk_core/common/action.c ****             {
 101:../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 102:../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 103:../tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 104:../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 105:../tmk_core/common/action.c ****                     case MODS_ONESHOT:
 106:../tmk_core/common/action.c ****                         // Oneshot modifier
 107:../tmk_core/common/action.c ****                         if (event.pressed) {
 108:../tmk_core/common/action.c ****                             if (tap_count == 0) {
 109:../tmk_core/common/action.c ****                                 register_mods(mods);
 110:../tmk_core/common/action.c ****                             }
 111:../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 112:../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 113:../tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 114:../tmk_core/common/action.c ****                             }
 115:../tmk_core/common/action.c ****                             else {
 116:../tmk_core/common/action.c ****                                 register_mods(mods);
 117:../tmk_core/common/action.c ****                             }
 118:../tmk_core/common/action.c ****                         } else {
 119:../tmk_core/common/action.c ****                             if (tap_count == 0) {
 120:../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 121:../tmk_core/common/action.c ****                                 unregister_mods(mods);
 122:../tmk_core/common/action.c ****                             }
 123:../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 124:../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 125:../tmk_core/common/action.c ****                             }
 126:../tmk_core/common/action.c ****                             else {
 127:../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 128:../tmk_core/common/action.c ****                                 unregister_mods(mods);
 129:../tmk_core/common/action.c ****                             }
 130:../tmk_core/common/action.c ****                         }
 131:../tmk_core/common/action.c ****                         break;
 132:../tmk_core/common/action.c ****     #endif
 133:../tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 134:../tmk_core/common/action.c ****                         if (event.pressed) {
 135:../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 136:../tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 137:../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods off\n");
 138:../tmk_core/common/action.c ****                                     unregister_mods(mods);
 139:../tmk_core/common/action.c ****                                 } else {
 140:../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods on\n");
 141:../tmk_core/common/action.c ****                                     register_mods(mods);
 142:../tmk_core/common/action.c ****                                 }
 143:../tmk_core/common/action.c ****                             }
 144:../tmk_core/common/action.c ****                         } else {
 145:../tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 146:../tmk_core/common/action.c ****                                 dprint("MODS_TAP_TOGGLE: release : unregister_mods\n");
 147:../tmk_core/common/action.c ****                                 unregister_mods(mods);
 148:../tmk_core/common/action.c ****                             }
 149:../tmk_core/common/action.c ****                         }
 150:../tmk_core/common/action.c ****                         break;
 151:../tmk_core/common/action.c ****                     default:
 152:../tmk_core/common/action.c ****                         if (event.pressed) {
 153:../tmk_core/common/action.c ****                             if (tap_count > 0) {
 154:../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 155:../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 156:../tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 157:../tmk_core/common/action.c ****                                     record->tap.count = 0;
 158:../tmk_core/common/action.c ****                                     register_mods(mods);
 159:../tmk_core/common/action.c ****                                 } else {
 160:../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 161:../tmk_core/common/action.c ****                                     register_code(action.key.code);
 162:../tmk_core/common/action.c ****                                 }
 163:../tmk_core/common/action.c ****                             } else {
 164:../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 165:../tmk_core/common/action.c ****                                 register_mods(mods);
 166:../tmk_core/common/action.c ****                             }
 167:../tmk_core/common/action.c ****                         } else {
 168:../tmk_core/common/action.c ****                             if (tap_count > 0) {
 169:../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 170:../tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 171:../tmk_core/common/action.c ****                             } else {
 172:../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 173:../tmk_core/common/action.c ****                                 unregister_mods(mods);
 174:../tmk_core/common/action.c ****                             }
 175:../tmk_core/common/action.c ****                         }
 176:../tmk_core/common/action.c ****                         break;
 177:../tmk_core/common/action.c ****                 }
 178:../tmk_core/common/action.c ****             }
 179:../tmk_core/common/action.c ****             break;
 180:../tmk_core/common/action.c **** #endif
 181:../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 182:../tmk_core/common/action.c ****         /* other HID usage */
 183:../tmk_core/common/action.c ****         case ACT_USAGE:
 184:../tmk_core/common/action.c ****             switch (action.usage.page) {
 185:../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 186:../tmk_core/common/action.c ****                     if (event.pressed) {
 187:../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 188:../tmk_core/common/action.c ****                     } else {
 189:../tmk_core/common/action.c ****                         host_system_send(0);
 190:../tmk_core/common/action.c ****                     }
 191:../tmk_core/common/action.c ****                     break;
 192:../tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 193:../tmk_core/common/action.c ****                     if (event.pressed) {
 194:../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 195:../tmk_core/common/action.c ****                     } else {
 196:../tmk_core/common/action.c ****                         host_consumer_send(0);
 197:../tmk_core/common/action.c ****                     }
 198:../tmk_core/common/action.c ****                     break;
 199:../tmk_core/common/action.c ****             }
 200:../tmk_core/common/action.c ****             break;
 201:../tmk_core/common/action.c **** #endif
 202:../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 203:../tmk_core/common/action.c ****         /* Mouse key */
 204:../tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 205:../tmk_core/common/action.c ****             if (event.pressed) {
 206:../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 207:../tmk_core/common/action.c ****                 mousekey_send();
 208:../tmk_core/common/action.c ****             } else {
 209:../tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 210:../tmk_core/common/action.c ****                 mousekey_send();
 211:../tmk_core/common/action.c ****             }
 212:../tmk_core/common/action.c ****             break;
 213:../tmk_core/common/action.c **** #endif
 214:../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 215:../tmk_core/common/action.c ****         case ACT_LAYER:
 216:../tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 217:../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 218:../tmk_core/common/action.c ****                 if (!event.pressed) {
 219:../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 220:../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 221:../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 222:../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 223:../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 224:../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 225:../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 226:../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 227:../tmk_core/common/action.c ****                     }
 228:../tmk_core/common/action.c ****                 }
 229:../tmk_core/common/action.c ****             } else {
 230:../tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 231:../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 232:../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 233:../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 234:../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 235:../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 236:../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 237:../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 238:../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 239:../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 240:../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 241:../tmk_core/common/action.c ****                     }
 242:../tmk_core/common/action.c ****                 }
 243:../tmk_core/common/action.c ****             }
 244:../tmk_core/common/action.c ****             break;
 245:../tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 246:../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 247:../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 248:../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 249:../tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 250:../tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 251:../tmk_core/common/action.c ****                     if (event.pressed) {
 252:../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 253:../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 254:../tmk_core/common/action.c ****                     } else {
 255:../tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 256:../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 257:../tmk_core/common/action.c ****                     }
 258:../tmk_core/common/action.c ****                     break;
 259:../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 260:../tmk_core/common/action.c ****                     /* tap toggle */
 261:../tmk_core/common/action.c ****                     if (event.pressed) {
 262:../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 263:../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 264:../tmk_core/common/action.c ****                         }
 265:../tmk_core/common/action.c ****                     } else {
 266:../tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 267:../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 268:../tmk_core/common/action.c ****                         }
 269:../tmk_core/common/action.c ****                     }
 270:../tmk_core/common/action.c ****                     break;
 271:../tmk_core/common/action.c ****                 case OP_ON_OFF:
 272:../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 273:../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 274:../tmk_core/common/action.c ****                     break;
 275:../tmk_core/common/action.c ****                 case OP_OFF_ON:
 276:../tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 277:../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 278:../tmk_core/common/action.c ****                     break;
 279:../tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 280:../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 281:../tmk_core/common/action.c ****                                     layer_clear();
 282:../tmk_core/common/action.c ****                     break;
 283:../tmk_core/common/action.c ****                 default:
 284:../tmk_core/common/action.c ****                     /* tap key */
 285:../tmk_core/common/action.c ****                     if (event.pressed) {
 286:../tmk_core/common/action.c ****                         if (tap_count > 0) {
 287:../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 288:../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 289:../tmk_core/common/action.c ****                         } else {
 290:../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 291:../tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 292:../tmk_core/common/action.c ****                         }
 293:../tmk_core/common/action.c ****                     } else {
 294:../tmk_core/common/action.c ****                         if (tap_count > 0) {
 295:../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 296:../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 297:../tmk_core/common/action.c ****                         } else {
 298:../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 299:../tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 300:../tmk_core/common/action.c ****                         }
 301:../tmk_core/common/action.c ****                     }
 302:../tmk_core/common/action.c ****                     break;
 303:../tmk_core/common/action.c ****             }
 304:../tmk_core/common/action.c ****             break;
 305:../tmk_core/common/action.c ****     #endif
 306:../tmk_core/common/action.c **** #endif
 307:../tmk_core/common/action.c ****         /* Extentions */
 308:../tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 309:../tmk_core/common/action.c ****         case ACT_MACRO:
 310:../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 311:../tmk_core/common/action.c ****             break;
 312:../tmk_core/common/action.c **** #endif
 313:../tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 314:../tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 315:../tmk_core/common/action.c ****             if (!event.pressed) {
 316:../tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 317:../tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 318:../tmk_core/common/action.c ****                         backlight_increase();
 319:../tmk_core/common/action.c ****                         break;
 320:../tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 321:../tmk_core/common/action.c ****                         backlight_decrease();
 322:../tmk_core/common/action.c ****                         break;
 323:../tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 324:../tmk_core/common/action.c ****                         backlight_toggle();
 325:../tmk_core/common/action.c ****                         break;
 326:../tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 327:../tmk_core/common/action.c ****                         backlight_step();
 328:../tmk_core/common/action.c ****                         break;
 329:../tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 330:../tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 331:../tmk_core/common/action.c ****                         break;
 332:../tmk_core/common/action.c ****                 }
 333:../tmk_core/common/action.c ****             }
 334:../tmk_core/common/action.c ****             break;
 335:../tmk_core/common/action.c **** #endif
 336:../tmk_core/common/action.c ****         case ACT_COMMAND:
 337:../tmk_core/common/action.c ****             break;
 338:../tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 339:../tmk_core/common/action.c ****         case ACT_FUNCTION:
 340:../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 341:../tmk_core/common/action.c ****             break;
 342:../tmk_core/common/action.c **** #endif
 343:../tmk_core/common/action.c ****         default:
 344:../tmk_core/common/action.c ****             break;
 345:../tmk_core/common/action.c ****     }
 346:../tmk_core/common/action.c **** }
 347:../tmk_core/common/action.c **** 
 348:../tmk_core/common/action.c **** 
 349:../tmk_core/common/action.c **** 
 350:../tmk_core/common/action.c **** 
 351:../tmk_core/common/action.c **** /*
 352:../tmk_core/common/action.c ****  * Utilities for actions.
 353:../tmk_core/common/action.c ****  */
 354:../tmk_core/common/action.c **** void register_code(uint8_t code)
 355:../tmk_core/common/action.c **** {
 125               		.loc 1 355 0
 126               		.cfi_startproc
 127               	.LVL7:
 128 0000 CF93      		push r28
 129               	.LCFI4:
 130               		.cfi_def_cfa_offset 3
 131               		.cfi_offset 28, -2
 132               	/* prologue: function */
 133               	/* frame size = 0 */
 134               	/* stack size = 1 */
 135               	.L__stack_usage = 1
 356:../tmk_core/common/action.c ****     if (code == KC_NO) {
 136               		.loc 1 356 0
 137 0002 8823      		tst r24
 138 0004 01F4      		brne .+2
 139 0006 00C0      		rjmp .L9
 140 0008 C82F      		mov r28,r24
 357:../tmk_core/common/action.c ****         return;
 358:../tmk_core/common/action.c ****     }
 359:../tmk_core/common/action.c **** 
 360:../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 361:../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 141               		.loc 1 361 0
 142 000a 8238      		cpi r24,lo8(-126)
 143 000c 01F4      		brne .L12
 362:../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 363:../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 364:../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 144               		.loc 1 364 0
 145 000e 0E94 0000 		call host_keyboard_leds
 146               	.LVL8:
 147 0012 81FD      		sbrc r24,1
 148 0014 00C0      		rjmp .L9
 365:../tmk_core/common/action.c **** #endif
 366:../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 149               		.loc 1 366 0
 150 0016 89E3      		ldi r24,lo8(57)
 151 0018 0E94 0000 		call add_key
 152               	.LVL9:
 367:../tmk_core/common/action.c ****         send_keyboard_report();
 153               		.loc 1 367 0
 154 001c 0E94 0000 		call send_keyboard_report
 155               	.LVL10:
 368:../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 156               		.loc 1 368 0
 157 0020 89E3      		ldi r24,lo8(57)
 158 0022 00C0      		rjmp .L44
 159               	.LVL11:
 160               	.L12:
 369:../tmk_core/common/action.c ****         send_keyboard_report();
 370:../tmk_core/common/action.c ****     }
 371:../tmk_core/common/action.c **** 
 372:../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 161               		.loc 1 372 0
 162 0024 8338      		cpi r24,lo8(-125)
 163 0026 01F4      		brne .L14
 373:../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 374:../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 164               		.loc 1 374 0
 165 0028 0E94 0000 		call host_keyboard_leds
 166               	.LVL12:
 167 002c 80FD      		sbrc r24,0
 168 002e 00C0      		rjmp .L9
 375:../tmk_core/common/action.c **** #endif
 376:../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 169               		.loc 1 376 0
 170 0030 83E5      		ldi r24,lo8(83)
 171 0032 0E94 0000 		call add_key
 172               	.LVL13:
 377:../tmk_core/common/action.c ****         send_keyboard_report();
 173               		.loc 1 377 0
 174 0036 0E94 0000 		call send_keyboard_report
 175               	.LVL14:
 378:../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 176               		.loc 1 378 0
 177 003a 83E5      		ldi r24,lo8(83)
 178               	.L44:
 179 003c 0E94 0000 		call del_key
 180               	.LVL15:
 181               	.L45:
 182               	/* epilogue start */
 379:../tmk_core/common/action.c ****         send_keyboard_report();
 380:../tmk_core/common/action.c ****     }
 381:../tmk_core/common/action.c **** 
 382:../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 383:../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 384:../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 385:../tmk_core/common/action.c **** #endif
 386:../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 387:../tmk_core/common/action.c ****         send_keyboard_report();
 388:../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 389:../tmk_core/common/action.c ****         send_keyboard_report();
 390:../tmk_core/common/action.c ****     }
 391:../tmk_core/common/action.c **** #endif
 392:../tmk_core/common/action.c **** 
 393:../tmk_core/common/action.c ****     else if IS_KEY(code) {
 394:../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 395:../tmk_core/common/action.c ****         if (command_proc(code)) return;
 396:../tmk_core/common/action.c **** 
 397:../tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 398:../tmk_core/common/action.c **** /* TODO: remove
 399:../tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 400:../tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 401:../tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 402:../tmk_core/common/action.c **** 
 403:../tmk_core/common/action.c ****             add_key(code);
 404:../tmk_core/common/action.c ****             send_keyboard_report();
 405:../tmk_core/common/action.c **** 
 406:../tmk_core/common/action.c ****             set_mods(tmp_mods);
 407:../tmk_core/common/action.c ****             send_keyboard_report();
 408:../tmk_core/common/action.c ****             oneshot_cancel();
 409:../tmk_core/common/action.c ****         } else 
 410:../tmk_core/common/action.c **** */
 411:../tmk_core/common/action.c **** #endif
 412:../tmk_core/common/action.c ****         {
 413:../tmk_core/common/action.c ****             add_key(code);
 414:../tmk_core/common/action.c ****             send_keyboard_report();
 415:../tmk_core/common/action.c ****         }
 416:../tmk_core/common/action.c ****     }
 417:../tmk_core/common/action.c ****     else if IS_MOD(code) {
 418:../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 419:../tmk_core/common/action.c ****         send_keyboard_report();
 420:../tmk_core/common/action.c ****     }
 421:../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 422:../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 423:../tmk_core/common/action.c ****     }
 424:../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 425:../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 426:../tmk_core/common/action.c ****     }
 427:../tmk_core/common/action.c **** }
 183               		.loc 1 427 0
 184 0040 CF91      		pop r28
 379:../tmk_core/common/action.c ****         send_keyboard_report();
 185               		.loc 1 379 0
 186 0042 0C94 0000 		jmp send_keyboard_report
 187               	.LVL16:
 188               	.L14:
 382:../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 189               		.loc 1 382 0
 190 0046 8438      		cpi r24,lo8(-124)
 191 0048 01F4      		brne .L15
 384:../tmk_core/common/action.c **** #endif
 192               		.loc 1 384 0
 193 004a 0E94 0000 		call host_keyboard_leds
 194               	.LVL17:
 195 004e 82FD      		sbrc r24,2
 196 0050 00C0      		rjmp .L9
 386:../tmk_core/common/action.c ****         send_keyboard_report();
 197               		.loc 1 386 0
 198 0052 87E4      		ldi r24,lo8(71)
 199 0054 0E94 0000 		call add_key
 200               	.LVL18:
 387:../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 201               		.loc 1 387 0
 202 0058 0E94 0000 		call send_keyboard_report
 203               	.LVL19:
 388:../tmk_core/common/action.c ****         send_keyboard_report();
 204               		.loc 1 388 0
 205 005c 87E4      		ldi r24,lo8(71)
 206 005e 00C0      		rjmp .L44
 207               	.LVL20:
 208               	.L15:
 393:../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 209               		.loc 1 393 0
 210 0060 8CEF      		ldi r24,lo8(-4)
 211               	.LVL21:
 212 0062 8C0F      		add r24,r28
 213 0064 813A      		cpi r24,lo8(-95)
 214 0066 00F4      		brsh .L16
 395:../tmk_core/common/action.c **** 
 215               		.loc 1 395 0
 216 0068 8C2F      		mov r24,r28
 217 006a 0E94 0000 		call command_proc
 218               	.LVL22:
 219 006e 8111      		cpse r24,__zero_reg__
 220 0070 00C0      		rjmp .L9
 413:../tmk_core/common/action.c ****             send_keyboard_report();
 221               		.loc 1 413 0
 222 0072 8C2F      		mov r24,r28
 223 0074 0E94 0000 		call add_key
 224               	.LVL23:
 225 0078 00C0      		rjmp .L45
 226               	.L16:
 417:../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 227               		.loc 1 417 0
 228 007a 80E2      		ldi r24,lo8(32)
 229 007c 8C0F      		add r24,r28
 230 007e 8830      		cpi r24,lo8(8)
 231 0080 00F4      		brsh .L17
 418:../tmk_core/common/action.c ****         send_keyboard_report();
 232               		.loc 1 418 0
 233 0082 C770      		andi r28,lo8(7)
 234               	.LVL24:
 235 0084 81E0      		ldi r24,lo8(1)
 236 0086 00C0      		rjmp 2f
 237               		1:
 238 0088 880F      		lsl r24
 239               		2:
 240 008a CA95      		dec r28
 241 008c 02F4      		brpl 1b
 242 008e 0E94 0000 		call add_mods
 243               	.LVL25:
 244 0092 00C0      		rjmp .L45
 245               	.LVL26:
 246               	.L17:
 421:../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 247               		.loc 1 421 0
 248 0094 8BE5      		ldi r24,lo8(91)
 249 0096 8C0F      		add r24,r28
 250 0098 8330      		cpi r24,lo8(3)
 251 009a 00F4      		brsh .L18
 422:../tmk_core/common/action.c ****     }
 252               		.loc 1 422 0
 253 009c C53A      		cpi r28,lo8(-91)
 254 009e 01F0      		breq .L21
 422:../tmk_core/common/action.c ****     }
 255               		.loc 1 422 0 is_stmt 0 discriminator 1
 256 00a0 C63A      		cpi r28,lo8(-90)
 257 00a2 01F0      		breq .L22
 422:../tmk_core/common/action.c ****     }
 258               		.loc 1 422 0
 259 00a4 83E8      		ldi r24,lo8(-125)
 260 00a6 90E0      		ldi r25,0
 261 00a8 00C0      		rjmp .L19
 262               	.L21:
 263 00aa 81E8      		ldi r24,lo8(-127)
 264 00ac 90E0      		ldi r25,0
 265 00ae 00C0      		rjmp .L19
 266               	.L22:
 267 00b0 82E8      		ldi r24,lo8(-126)
 268 00b2 90E0      		ldi r25,0
 269               	.L19:
 270               	/* epilogue start */
 271               		.loc 1 427 0 is_stmt 1 discriminator 12
 272 00b4 CF91      		pop r28
 273               	.LVL27:
 422:../tmk_core/common/action.c ****     }
 274               		.loc 1 422 0 discriminator 12
 275 00b6 0C94 0000 		jmp host_system_send
 276               	.LVL28:
 277               	.L18:
 424:../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 278               		.loc 1 424 0
 279 00ba 88E5      		ldi r24,lo8(88)
 280 00bc 8C0F      		add r24,r28
 281 00be 8531      		cpi r24,lo8(21)
 282 00c0 00F0      		brlo .+2
 283 00c2 00C0      		rjmp .L9
 425:../tmk_core/common/action.c ****     }
 284               		.loc 1 425 0
 285 00c4 C83A      		cpi r28,lo8(-88)
 286 00c6 01F0      		breq .L23
 425:../tmk_core/common/action.c ****     }
 287               		.loc 1 425 0 is_stmt 0 discriminator 1
 288 00c8 C93A      		cpi r28,lo8(-87)
 289 00ca 01F0      		breq .L24
 425:../tmk_core/common/action.c ****     }
 290               		.loc 1 425 0 discriminator 3
 291 00cc CA3A      		cpi r28,lo8(-86)
 292 00ce 01F0      		breq .L25
 425:../tmk_core/common/action.c ****     }
 293               		.loc 1 425 0 discriminator 5
 294 00d0 CB3A      		cpi r28,lo8(-85)
 295 00d2 01F0      		breq .L26
 425:../tmk_core/common/action.c ****     }
 296               		.loc 1 425 0 discriminator 7
 297 00d4 CC3A      		cpi r28,lo8(-84)
 298 00d6 01F0      		breq .L27
 425:../tmk_core/common/action.c ****     }
 299               		.loc 1 425 0 discriminator 9
 300 00d8 CD3A      		cpi r28,lo8(-83)
 301 00da 01F0      		breq .L28
 425:../tmk_core/common/action.c ****     }
 302               		.loc 1 425 0 discriminator 11
 303 00dc CE3A      		cpi r28,lo8(-82)
 304 00de 01F0      		breq .L29
 425:../tmk_core/common/action.c ****     }
 305               		.loc 1 425 0 discriminator 13
 306 00e0 CF3A      		cpi r28,lo8(-81)
 307 00e2 01F0      		breq .L30
 425:../tmk_core/common/action.c ****     }
 308               		.loc 1 425 0 discriminator 15
 309 00e4 C13B      		cpi r28,lo8(-79)
 310 00e6 01F0      		breq .L31
 425:../tmk_core/common/action.c ****     }
 311               		.loc 1 425 0 discriminator 17
 312 00e8 C03B      		cpi r28,lo8(-80)
 313 00ea 01F0      		breq .L32
 425:../tmk_core/common/action.c ****     }
 314               		.loc 1 425 0 discriminator 19
 315 00ec C23B      		cpi r28,lo8(-78)
 316 00ee 01F0      		breq .L33
 425:../tmk_core/common/action.c ****     }
 317               		.loc 1 425 0 discriminator 21
 318 00f0 C33B      		cpi r28,lo8(-77)
 319 00f2 01F0      		breq .L34
 425:../tmk_core/common/action.c ****     }
 320               		.loc 1 425 0 discriminator 23
 321 00f4 C43B      		cpi r28,lo8(-76)
 322 00f6 01F0      		breq .L35
 425:../tmk_core/common/action.c ****     }
 323               		.loc 1 425 0 discriminator 25
 324 00f8 C53B      		cpi r28,lo8(-75)
 325 00fa 01F0      		breq .L36
 425:../tmk_core/common/action.c ****     }
 326               		.loc 1 425 0 discriminator 27
 327 00fc C63B      		cpi r28,lo8(-74)
 328 00fe 01F0      		breq .L37
 425:../tmk_core/common/action.c ****     }
 329               		.loc 1 425 0 discriminator 29
 330 0100 C73B      		cpi r28,lo8(-73)
 331 0102 01F0      		breq .L38
 425:../tmk_core/common/action.c ****     }
 332               		.loc 1 425 0 discriminator 31
 333 0104 C83B      		cpi r28,lo8(-72)
 334 0106 01F0      		breq .L39
 425:../tmk_core/common/action.c ****     }
 335               		.loc 1 425 0 discriminator 33
 336 0108 C93B      		cpi r28,lo8(-71)
 337 010a 01F0      		breq .L40
 425:../tmk_core/common/action.c ****     }
 338               		.loc 1 425 0 discriminator 35
 339 010c CA3B      		cpi r28,lo8(-70)
 340 010e 01F0      		breq .L41
 425:../tmk_core/common/action.c ****     }
 341               		.loc 1 425 0 discriminator 37
 342 0110 CB3B      		cpi r28,lo8(-69)
 343 0112 01F0      		breq .L42
 425:../tmk_core/common/action.c ****     }
 344               		.loc 1 425 0 discriminator 39
 345 0114 CC3B      		cpi r28,lo8(-68)
 346 0116 01F4      		brne .+2
 347 0118 00C0      		rjmp .L43
 425:../tmk_core/common/action.c ****     }
 348               		.loc 1 425 0
 349 011a 80E0      		ldi r24,0
 350 011c 90E0      		ldi r25,0
 351 011e 00C0      		rjmp .L20
 352               	.L23:
 353 0120 82EE      		ldi r24,lo8(-30)
 354 0122 90E0      		ldi r25,0
 355 0124 00C0      		rjmp .L20
 356               	.L24:
 357 0126 89EE      		ldi r24,lo8(-23)
 358 0128 90E0      		ldi r25,0
 359 012a 00C0      		rjmp .L20
 360               	.L25:
 361 012c 8AEE      		ldi r24,lo8(-22)
 362 012e 90E0      		ldi r25,0
 363 0130 00C0      		rjmp .L20
 364               	.L26:
 365 0132 85EB      		ldi r24,lo8(-75)
 366 0134 90E0      		ldi r25,0
 367 0136 00C0      		rjmp .L20
 368               	.L27:
 369 0138 86EB      		ldi r24,lo8(-74)
 370 013a 90E0      		ldi r25,0
 371 013c 00C0      		rjmp .L20
 372               	.L28:
 373 013e 83EB      		ldi r24,lo8(-77)
 374 0140 90E0      		ldi r25,0
 375 0142 00C0      		rjmp .L20
 376               	.L29:
 377 0144 84EB      		ldi r24,lo8(-76)
 378 0146 90E0      		ldi r25,0
 379 0148 00C0      		rjmp .L20
 380               	.L30:
 381 014a 87EB      		ldi r24,lo8(-73)
 382 014c 90E0      		ldi r25,0
 383 014e 00C0      		rjmp .L20
 384               	.L31:
 385 0150 8CEC      		ldi r24,lo8(-52)
 386 0152 90E0      		ldi r25,0
 387 0154 00C0      		rjmp .L20
 388               	.L32:
 389 0156 8DEC      		ldi r24,lo8(-51)
 390 0158 90E0      		ldi r25,0
 391 015a 00C0      		rjmp .L20
 392               	.L33:
 393 015c 83E8      		ldi r24,lo8(-125)
 394 015e 91E0      		ldi r25,lo8(1)
 395 0160 00C0      		rjmp .L20
 396               	.L34:
 397 0162 8AE8      		ldi r24,lo8(-118)
 398 0164 91E0      		ldi r25,lo8(1)
 399 0166 00C0      		rjmp .L20
 400               	.L35:
 401 0168 82E9      		ldi r24,lo8(-110)
 402 016a 91E0      		ldi r25,lo8(1)
 403 016c 00C0      		rjmp .L20
 404               	.L36:
 405 016e 84E9      		ldi r24,lo8(-108)
 406 0170 91E0      		ldi r25,lo8(1)
 407 0172 00C0      		rjmp .L20
 408               	.L37:
 409 0174 81E2      		ldi r24,lo8(33)
 410 0176 92E0      		ldi r25,lo8(2)
 411 0178 00C0      		rjmp .L20
 412               	.L38:
 413 017a 83E2      		ldi r24,lo8(35)
 414 017c 92E0      		ldi r25,lo8(2)
 415 017e 00C0      		rjmp .L20
 416               	.L39:
 417 0180 84E2      		ldi r24,lo8(36)
 418 0182 92E0      		ldi r25,lo8(2)
 419 0184 00C0      		rjmp .L20
 420               	.L40:
 421 0186 85E2      		ldi r24,lo8(37)
 422 0188 92E0      		ldi r25,lo8(2)
 423 018a 00C0      		rjmp .L20
 424               	.L41:
 425 018c 86E2      		ldi r24,lo8(38)
 426 018e 92E0      		ldi r25,lo8(2)
 427 0190 00C0      		rjmp .L20
 428               	.L42:
 429 0192 87E2      		ldi r24,lo8(39)
 430 0194 92E0      		ldi r25,lo8(2)
 431 0196 00C0      		rjmp .L20
 432               	.L43:
 433 0198 8AE2      		ldi r24,lo8(42)
 434 019a 92E0      		ldi r25,lo8(2)
 435               	.L20:
 436               	/* epilogue start */
 437               		.loc 1 427 0 is_stmt 1 discriminator 84
 438 019c CF91      		pop r28
 439               	.LVL29:
 425:../tmk_core/common/action.c ****     }
 440               		.loc 1 425 0 discriminator 84
 441 019e 0C94 0000 		jmp host_consumer_send
 442               	.LVL30:
 443               	.L9:
 444               	/* epilogue start */
 445               		.loc 1 427 0
 446 01a2 CF91      		pop r28
 447 01a4 0895      		ret
 448               		.cfi_endproc
 449               	.LFE105:
 451               		.section	.text.unregister_code,"ax",@progbits
 452               	.global	unregister_code
 454               	unregister_code:
 455               	.LFB106:
 428:../tmk_core/common/action.c **** 
 429:../tmk_core/common/action.c **** void unregister_code(uint8_t code)
 430:../tmk_core/common/action.c **** {
 456               		.loc 1 430 0
 457               		.cfi_startproc
 458               	.LVL31:
 459               	/* prologue: function */
 460               	/* frame size = 0 */
 461               	/* stack size = 0 */
 462               	.L__stack_usage = 0
 431:../tmk_core/common/action.c ****     if (code == KC_NO) {
 463               		.loc 1 431 0
 464 0000 8823      		tst r24
 465 0002 01F4      		brne .+2
 466 0004 00C0      		rjmp .L46
 432:../tmk_core/common/action.c ****         return;
 433:../tmk_core/common/action.c ****     }
 434:../tmk_core/common/action.c **** 
 435:../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 436:../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 467               		.loc 1 436 0
 468 0006 8238      		cpi r24,lo8(-126)
 469 0008 01F4      		brne .L49
 437:../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 438:../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 439:../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 470               		.loc 1 439 0
 471 000a 0E94 0000 		call host_keyboard_leds
 472               	.LVL32:
 473 000e 81FF      		sbrs r24,1
 474 0010 00C0      		rjmp .L46
 440:../tmk_core/common/action.c **** #endif
 441:../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 475               		.loc 1 441 0
 476 0012 89E3      		ldi r24,lo8(57)
 477 0014 0E94 0000 		call add_key
 478               	.LVL33:
 442:../tmk_core/common/action.c ****         send_keyboard_report();
 479               		.loc 1 442 0
 480 0018 0E94 0000 		call send_keyboard_report
 481               	.LVL34:
 443:../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 482               		.loc 1 443 0
 483 001c 89E3      		ldi r24,lo8(57)
 484 001e 00C0      		rjmp .L65
 485               	.LVL35:
 486               	.L49:
 444:../tmk_core/common/action.c ****         send_keyboard_report();
 445:../tmk_core/common/action.c ****     }
 446:../tmk_core/common/action.c **** 
 447:../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 487               		.loc 1 447 0
 488 0020 8338      		cpi r24,lo8(-125)
 489 0022 01F4      		brne .L51
 448:../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 449:../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 490               		.loc 1 449 0
 491 0024 0E94 0000 		call host_keyboard_leds
 492               	.LVL36:
 493 0028 80FF      		sbrs r24,0
 494 002a 00C0      		rjmp .L46
 450:../tmk_core/common/action.c **** #endif
 451:../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 495               		.loc 1 451 0
 496 002c 83E5      		ldi r24,lo8(83)
 497 002e 0E94 0000 		call add_key
 498               	.LVL37:
 452:../tmk_core/common/action.c ****         send_keyboard_report();
 499               		.loc 1 452 0
 500 0032 0E94 0000 		call send_keyboard_report
 501               	.LVL38:
 453:../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 502               		.loc 1 453 0
 503 0036 83E5      		ldi r24,lo8(83)
 504               	.L65:
 505 0038 0E94 0000 		call del_key
 506               	.LVL39:
 507               	.L66:
 454:../tmk_core/common/action.c ****         send_keyboard_report();
 508               		.loc 1 454 0
 509 003c 0C94 0000 		jmp send_keyboard_report
 510               	.LVL40:
 511               	.L51:
 455:../tmk_core/common/action.c ****     }
 456:../tmk_core/common/action.c **** 
 457:../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 512               		.loc 1 457 0
 513 0040 8438      		cpi r24,lo8(-124)
 514 0042 01F4      		brne .L52
 458:../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 459:../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 515               		.loc 1 459 0
 516 0044 0E94 0000 		call host_keyboard_leds
 517               	.LVL41:
 518 0048 82FF      		sbrs r24,2
 519 004a 00C0      		rjmp .L46
 460:../tmk_core/common/action.c **** #endif
 461:../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 520               		.loc 1 461 0
 521 004c 87E4      		ldi r24,lo8(71)
 522 004e 0E94 0000 		call add_key
 523               	.LVL42:
 462:../tmk_core/common/action.c ****         send_keyboard_report();
 524               		.loc 1 462 0
 525 0052 0E94 0000 		call send_keyboard_report
 526               	.LVL43:
 463:../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 527               		.loc 1 463 0
 528 0056 87E4      		ldi r24,lo8(71)
 529 0058 00C0      		rjmp .L65
 530               	.LVL44:
 531               	.L52:
 464:../tmk_core/common/action.c ****         send_keyboard_report();
 465:../tmk_core/common/action.c ****     }
 466:../tmk_core/common/action.c **** #endif
 467:../tmk_core/common/action.c **** 
 468:../tmk_core/common/action.c ****     else if IS_KEY(code) {
 532               		.loc 1 468 0
 533 005a 9CEF      		ldi r25,lo8(-4)
 534 005c 980F      		add r25,r24
 535 005e 913A      		cpi r25,lo8(-95)
 536 0060 00F0      		brlo .L65
 469:../tmk_core/common/action.c ****         del_key(code);
 470:../tmk_core/common/action.c ****         send_keyboard_report();
 471:../tmk_core/common/action.c ****     }
 472:../tmk_core/common/action.c ****     else if IS_MOD(code) {
 537               		.loc 1 472 0
 538 0062 90E2      		ldi r25,lo8(32)
 539 0064 980F      		add r25,r24
 540 0066 9830      		cpi r25,lo8(8)
 541 0068 00F4      		brsh .L54
 473:../tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 542               		.loc 1 473 0
 543 006a 8770      		andi r24,lo8(7)
 544               	.LVL45:
 545 006c 91E0      		ldi r25,lo8(1)
 546 006e 00C0      		rjmp 2f
 547               		1:
 548 0070 990F      		lsl r25
 549               		2:
 550 0072 8A95      		dec r24
 551 0074 02F4      		brpl 1b
 552 0076 892F      		mov r24,r25
 553 0078 0E94 0000 		call del_mods
 554               	.LVL46:
 555 007c 00C0      		rjmp .L66
 556               	.LVL47:
 557               	.L54:
 474:../tmk_core/common/action.c ****         send_keyboard_report();
 475:../tmk_core/common/action.c ****     }
 476:../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 558               		.loc 1 476 0
 559 007e 9BE5      		ldi r25,lo8(91)
 560 0080 980F      		add r25,r24
 561 0082 9330      		cpi r25,lo8(3)
 562 0084 00F4      		brsh .L55
 477:../tmk_core/common/action.c ****         host_system_send(0);
 563               		.loc 1 477 0
 564 0086 80E0      		ldi r24,0
 565 0088 90E0      		ldi r25,0
 566               	.LVL48:
 567 008a 0C94 0000 		jmp host_system_send
 568               	.LVL49:
 569               	.L55:
 478:../tmk_core/common/action.c ****     }
 479:../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 570               		.loc 1 479 0
 571 008e 885A      		subi r24,lo8(-(88))
 572               	.LVL50:
 573 0090 8531      		cpi r24,lo8(21)
 574 0092 00F4      		brsh .L46
 480:../tmk_core/common/action.c ****         host_consumer_send(0);
 575               		.loc 1 480 0
 576 0094 80E0      		ldi r24,0
 577 0096 90E0      		ldi r25,0
 578               	.LVL51:
 579 0098 0C94 0000 		jmp host_consumer_send
 580               	.LVL52:
 581               	.L46:
 582 009c 0895      		ret
 583               		.cfi_endproc
 584               	.LFE106:
 586               		.section	.text.register_mods,"ax",@progbits
 587               	.global	register_mods
 589               	register_mods:
 590               	.LFB107:
 481:../tmk_core/common/action.c ****     }
 482:../tmk_core/common/action.c **** }
 483:../tmk_core/common/action.c **** 
 484:../tmk_core/common/action.c **** void register_mods(uint8_t mods)
 485:../tmk_core/common/action.c **** {
 591               		.loc 1 485 0
 592               		.cfi_startproc
 593               	.LVL53:
 594               	/* prologue: function */
 595               	/* frame size = 0 */
 596               	/* stack size = 0 */
 597               	.L__stack_usage = 0
 486:../tmk_core/common/action.c ****     if (mods) {
 598               		.loc 1 486 0
 599 0000 8823      		tst r24
 600 0002 01F0      		breq .L67
 487:../tmk_core/common/action.c ****         add_mods(mods);
 601               		.loc 1 487 0
 602 0004 0E94 0000 		call add_mods
 603               	.LVL54:
 488:../tmk_core/common/action.c ****         send_keyboard_report();
 604               		.loc 1 488 0
 605 0008 0C94 0000 		jmp send_keyboard_report
 606               	.LVL55:
 607               	.L67:
 608 000c 0895      		ret
 609               		.cfi_endproc
 610               	.LFE107:
 612               		.section	.text.unregister_mods,"ax",@progbits
 613               	.global	unregister_mods
 615               	unregister_mods:
 616               	.LFB108:
 489:../tmk_core/common/action.c ****     }
 490:../tmk_core/common/action.c **** }
 491:../tmk_core/common/action.c **** 
 492:../tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 493:../tmk_core/common/action.c **** {
 617               		.loc 1 493 0
 618               		.cfi_startproc
 619               	.LVL56:
 620               	/* prologue: function */
 621               	/* frame size = 0 */
 622               	/* stack size = 0 */
 623               	.L__stack_usage = 0
 494:../tmk_core/common/action.c ****     if (mods) {
 624               		.loc 1 494 0
 625 0000 8823      		tst r24
 626 0002 01F0      		breq .L69
 495:../tmk_core/common/action.c ****         del_mods(mods);
 627               		.loc 1 495 0
 628 0004 0E94 0000 		call del_mods
 629               	.LVL57:
 496:../tmk_core/common/action.c ****         send_keyboard_report();
 630               		.loc 1 496 0
 631 0008 0C94 0000 		jmp send_keyboard_report
 632               	.LVL58:
 633               	.L69:
 634 000c 0895      		ret
 635               		.cfi_endproc
 636               	.LFE108:
 638               		.section	.text.process_action,"ax",@progbits
 639               	.global	process_action
 641               	process_action:
 642               	.LFB104:
  59:../tmk_core/common/action.c ****     keyevent_t event = record->event;
 643               		.loc 1 59 0
 644               		.cfi_startproc
 645               	.LVL59:
 646 0000 CF92      		push r12
 647               	.LCFI5:
 648               		.cfi_def_cfa_offset 3
 649               		.cfi_offset 12, -2
 650 0002 DF92      		push r13
 651               	.LCFI6:
 652               		.cfi_def_cfa_offset 4
 653               		.cfi_offset 13, -3
 654 0004 EF92      		push r14
 655               	.LCFI7:
 656               		.cfi_def_cfa_offset 5
 657               		.cfi_offset 14, -4
 658 0006 FF92      		push r15
 659               	.LCFI8:
 660               		.cfi_def_cfa_offset 6
 661               		.cfi_offset 15, -5
 662 0008 0F93      		push r16
 663               	.LCFI9:
 664               		.cfi_def_cfa_offset 7
 665               		.cfi_offset 16, -6
 666 000a 1F93      		push r17
 667               	.LCFI10:
 668               		.cfi_def_cfa_offset 8
 669               		.cfi_offset 17, -7
 670 000c CF93      		push r28
 671               	.LCFI11:
 672               		.cfi_def_cfa_offset 9
 673               		.cfi_offset 28, -8
 674 000e DF93      		push r29
 675               	.LCFI12:
 676               		.cfi_def_cfa_offset 10
 677               		.cfi_offset 29, -9
 678 0010 00D0      		rcall .
 679 0012 00D0      		rcall .
 680 0014 00D0      		rcall .
 681               	.LCFI13:
 682               		.cfi_def_cfa_offset 16
 683 0016 CDB7      		in r28,__SP_L__
 684 0018 DEB7      		in r29,__SP_H__
 685               	.LCFI14:
 686               		.cfi_def_cfa_register 28
 687               	/* prologue: function */
 688               	/* frame size = 6 */
 689               	/* stack size = 14 */
 690               	.L__stack_usage = 14
  60:../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 691               		.loc 1 60 0
 692 001a 25E0      		ldi r18,lo8(5)
 693 001c FC01      		movw r30,r24
 694 001e DE01      		movw r26,r28
 695 0020 1196      		adiw r26,1
 696               		0:
 697 0022 0190      		ld r0,Z+
 698 0024 0D92      		st X+,r0
 699 0026 2A95      		dec r18
 700 0028 01F4      		brne 0b
 701 002a FC01      		movw r30,r24
 702 002c 4081      		ld r20,Z
 703               	.LVL60:
 704 002e 3181      		ldd r19,Z+1
 705               	.LVL61:
 706 0030 F280      		ldd r15,Z+2
 707               	.LVL62:
  62:../tmk_core/common/action.c **** #endif
 708               		.loc 1 62 0
 709 0032 2581      		ldd r18,Z+5
 710 0034 2295      		swap r18
 711 0036 2F70      		andi r18,lo8(15)
 712               	.LVL63:
 713               	.LBB12:
 714               	.LBB13:
 715               		.loc 2 49 0
 716 0038 6381      		ldd r22,Z+3
 717 003a 7481      		ldd r23,Z+4
 718 003c 672B      		or r22,r23
 719 003e 01F4      		brne .+2
 720 0040 00C0      		rjmp .L71
 721 0042 3F3F      		cpi r19,lo8(-1)
 722 0044 01F4      		brne .L73
 723               	.LBE13:
 724               	.LBE12:
  65:../tmk_core/common/action.c **** 
 725               		.loc 1 65 0
 726 0046 4F3F      		cpi r20,lo8(-1)
 727 0048 01F4      		brne .+2
 728 004a 00C0      		rjmp .L71
 729               	.L73:
 730 004c 6C01      		movw r12,r24
  67:../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 731               		.loc 1 67 0
 732 004e 4983      		std Y+1,r20
 733 0050 3A83      		std Y+2,r19
 734 0052 8981      		ldd r24,Y+1
 735 0054 9A81      		ldd r25,Y+2
 736               	.LVL64:
 737 0056 2E83      		std Y+6,r18
 738 0058 0E94 0000 		call layer_switch_get_action
 739               	.LVL65:
 740 005c 182F      		mov r17,r24
 741               	.LVL66:
 742 005e 092F      		mov r16,r25
  70:../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 743               		.loc 1 70 0
 744 0060 0E94 0000 		call layer_debug
 745               	.LVL67:
  71:../tmk_core/common/action.c **** #endif
 746               		.loc 1 71 0
 747 0064 0E94 0000 		call default_layer_debug
 748               	.LVL68:
  75:../tmk_core/common/action.c ****         /* Key and Mods */
 749               		.loc 1 75 0
 750 0068 E02F      		mov r30,r16
 751 006a E295      		swap r30
 752 006c EF70      		andi r30,lo8(15)
 753 006e F0E0      		ldi r31,0
 754 0070 E050      		subi r30,lo8(-(gs(.L76)))
 755 0072 F040      		sbci r31,hi8(-(gs(.L76)))
 756 0074 2E81      		ldd r18,Y+6
 757 0076 0C94 0000 		jmp __tablejump2__
 758               		.section	.progmem.gcc_sw_table.process_action,"a",@progbits
 759               		.p2align	1
 760               	.L76:
 761 0000 0000      		.word gs(.L75)
 762 0002 0000      		.word gs(.L75)
 763 0004 0000      		.word gs(.L77)
 764 0006 0000      		.word gs(.L77)
 765 0008 0000      		.word gs(.L78)
 766 000a 0000      		.word gs(.L79)
 767 000c 0000      		.word gs(.L71)
 768 000e 0000      		.word gs(.L71)
 769 0010 0000      		.word gs(.L80)
 770 0012 0000      		.word gs(.L71)
 771 0014 0000      		.word gs(.L81)
 772 0016 0000      		.word gs(.L81)
 773 0018 0000      		.word gs(.L82)
 774 001a 0000      		.word gs(.L71)
 775 001c 0000      		.word gs(.L71)
 776 001e 0000      		.word gs(.L83)
 777               		.section	.text.process_action
 778               	.L75:
 779               	.LBB14:
  80:../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 780               		.loc 1 80 0
 781 007a 802F      		mov r24,r16
 782 007c 807F      		andi r24,lo8(-16)
 783 007e 902F      		mov r25,r16
 784 0080 9F70      		andi r25,lo8(15)
 785 0082 092F      		mov r16,r25
 786 0084 8823      		tst r24
 787 0086 01F0      		breq .L85
  80:../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 788               		.loc 1 80 0 is_stmt 0 discriminator 2
 789 0088 0295      		swap r16
 790 008a 007F      		andi r16,lo8(-16)
 791               	.L85:
 792               	.LVL69:
  82:../tmk_core/common/action.c ****                     if (mods) {
 793               		.loc 1 82 0 is_stmt 1 discriminator 4
 794 008c FF20      		tst r15
 795 008e 01F0      		breq .L86
  83:../tmk_core/common/action.c ****                         add_weak_mods(mods);
 796               		.loc 1 83 0
 797 0090 0023      		tst r16
 798 0092 01F4      		brne .+2
 799 0094 00C0      		rjmp .L170
  84:../tmk_core/common/action.c ****                         send_keyboard_report();
 800               		.loc 1 84 0
 801 0096 802F      		mov r24,r16
 802 0098 0E94 0000 		call add_weak_mods
 803               	.LVL70:
  85:../tmk_core/common/action.c ****                     }
 804               		.loc 1 85 0
 805 009c 0E94 0000 		call send_keyboard_report
 806               	.LVL71:
 807 00a0 00C0      		rjmp .L170
 808               	.L86:
  89:../tmk_core/common/action.c ****                     if (mods) {
 809               		.loc 1 89 0
 810 00a2 812F      		mov r24,r17
 811 00a4 0E94 0000 		call unregister_code
 812               	.LVL72:
  90:../tmk_core/common/action.c ****                         del_weak_mods(mods);
 813               		.loc 1 90 0
 814 00a8 0023      		tst r16
 815 00aa 01F4      		brne .+2
 816 00ac 00C0      		rjmp .L71
  91:../tmk_core/common/action.c ****                         send_keyboard_report();
 817               		.loc 1 91 0
 818 00ae 802F      		mov r24,r16
 819 00b0 0E94 0000 		call del_weak_mods
 820               	.LVL73:
 821               	/* epilogue start */
 822               	.LBE14:
 346:../tmk_core/common/action.c **** 
 823               		.loc 1 346 0
 824 00b4 2696      		adiw r28,6
 825               	.LVL74:
 826 00b6 0FB6      		in __tmp_reg__,__SREG__
 827 00b8 F894      		cli
 828 00ba DEBF      		out __SP_H__,r29
 829 00bc 0FBE      		out __SREG__,__tmp_reg__
 830 00be CDBF      		out __SP_L__,r28
 831               	.LVL75:
 832 00c0 DF91      		pop r29
 833 00c2 CF91      		pop r28
 834 00c4 1F91      		pop r17
 835 00c6 0F91      		pop r16
 836               	.LVL76:
 837 00c8 FF90      		pop r15
 838               	.LVL77:
 839 00ca EF90      		pop r14
 840 00cc DF90      		pop r13
 841 00ce CF90      		pop r12
 842               	.LVL78:
 843               	.LBB15:
  92:../tmk_core/common/action.c ****                     }
 844               		.loc 1 92 0
 845 00d0 0C94 0000 		jmp send_keyboard_report
 846               	.LVL79:
 847               	.L77:
 848               	.LBE15:
 849               	.LBB16:
 101:../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 850               		.loc 1 101 0
 851 00d4 802F      		mov r24,r16
 852 00d6 807F      		andi r24,lo8(-16)
 853 00d8 902F      		mov r25,r16
 854 00da 9F70      		andi r25,lo8(15)
 855 00dc 092F      		mov r16,r25
 856 00de 8032      		cpi r24,lo8(32)
 857 00e0 01F0      		breq .L90
 101:../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 858               		.loc 1 101 0 is_stmt 0 discriminator 2
 859 00e2 0295      		swap r16
 860 00e4 007F      		andi r16,lo8(-16)
 861               	.L90:
 862               	.LVL80:
 103:../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 863               		.loc 1 103 0 is_stmt 1 discriminator 4
 864 00e6 1123      		tst r17
 865 00e8 01F0      		breq .L92
 866 00ea 1130      		cpi r17,lo8(1)
 867 00ec 01F0      		breq .L93
 868 00ee 00C0      		rjmp .L178
 869               	.L92:
 107:../tmk_core/common/action.c ****                             if (tap_count == 0) {
 870               		.loc 1 107 0
 871 00f0 FF20      		tst r15
 872 00f2 01F0      		breq .L94
 109:../tmk_core/common/action.c ****                             }
 873               		.loc 1 109 0
 874 00f4 802F      		mov r24,r16
 108:../tmk_core/common/action.c ****                                 register_mods(mods);
 875               		.loc 1 108 0
 876 00f6 2223      		tst r18
 877 00f8 01F0      		breq .L166
 111:../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 878               		.loc 1 111 0
 879 00fa 2130      		cpi r18,lo8(1)
 880 00fc 01F4      		brne .L166
 881               	/* epilogue start */
 882               	.LBE16:
 346:../tmk_core/common/action.c **** 
 883               		.loc 1 346 0
 884 00fe 2696      		adiw r28,6
 885 0100 0FB6      		in __tmp_reg__,__SREG__
 886 0102 F894      		cli
 887 0104 DEBF      		out __SP_H__,r29
 888 0106 0FBE      		out __SREG__,__tmp_reg__
 889 0108 CDBF      		out __SP_L__,r28
 890 010a DF91      		pop r29
 891 010c CF91      		pop r28
 892 010e 1F91      		pop r17
 893 0110 0F91      		pop r16
 894               	.LVL81:
 895 0112 FF90      		pop r15
 896               	.LVL82:
 897 0114 EF90      		pop r14
 898 0116 DF90      		pop r13
 899 0118 CF90      		pop r12
 900               	.LVL83:
 901               	.LBB17:
 113:../tmk_core/common/action.c ****                             }
 902               		.loc 1 113 0
 903 011a 0C94 0000 		jmp set_oneshot_mods
 904               	.LVL84:
 905               	.L94:
 119:../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 906               		.loc 1 119 0
 907 011e 2223      		tst r18
 908 0120 01F0      		breq .L167
 123:../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 909               		.loc 1 123 0
 910 0122 2130      		cpi r18,lo8(1)
 911 0124 01F4      		brne .+2
 912 0126 00C0      		rjmp .L71
 913               	.L167:
 127:../tmk_core/common/action.c ****                                 unregister_mods(mods);
 914               		.loc 1 127 0
 915 0128 0E94 0000 		call clear_oneshot_mods
 916               	.LVL85:
 917 012c 00C0      		rjmp .L104
 918               	.L93:
 134:../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 919               		.loc 1 134 0
 920 012e FF20      		tst r15
 921 0130 01F0      		breq .L99
 135:../tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 922               		.loc 1 135 0
 923 0132 2630      		cpi r18,lo8(6)
 924 0134 00F0      		brlo .+2
 925 0136 00C0      		rjmp .L71
 136:../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods off\n");
 926               		.loc 1 136 0
 927 0138 0E94 0000 		call get_mods
 928               	.LVL86:
 929 013c 8023      		and r24,r16
 930 013e 01F0      		breq .L100
 931 0140 00C0      		rjmp .L104
 932               	.L178:
 152:../tmk_core/common/action.c ****                             if (tap_count > 0) {
 933               		.loc 1 152 0
 934 0142 FF20      		tst r15
 935 0144 01F0      		breq .L101
 153:../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 936               		.loc 1 153 0
 937 0146 2111      		cpse r18,__zero_reg__
 938 0148 00C0      		rjmp .L179
 939               	.L100:
 141:../tmk_core/common/action.c ****                                 }
 940               		.loc 1 141 0
 941 014a 802F      		mov r24,r16
 942               	.LVL87:
 943               	.L166:
 944               	/* epilogue start */
 945               	.LBE17:
 346:../tmk_core/common/action.c **** 
 946               		.loc 1 346 0
 947 014c 2696      		adiw r28,6
 948 014e 0FB6      		in __tmp_reg__,__SREG__
 949 0150 F894      		cli
 950 0152 DEBF      		out __SP_H__,r29
 951 0154 0FBE      		out __SREG__,__tmp_reg__
 952 0156 CDBF      		out __SP_L__,r28
 953 0158 DF91      		pop r29
 954 015a CF91      		pop r28
 955 015c 1F91      		pop r17
 956               	.LVL88:
 957 015e 0F91      		pop r16
 958 0160 FF90      		pop r15
 959               	.LVL89:
 960 0162 EF90      		pop r14
 961 0164 DF90      		pop r13
 962 0166 CF90      		pop r12
 963               	.LVL90:
 964               	.LBB18:
 141:../tmk_core/common/action.c ****                                 }
 965               		.loc 1 141 0
 966 0168 0C94 0000 		jmp register_mods
 967               	.LVL91:
 968               	.L99:
 145:../tmk_core/common/action.c ****                                 dprint("MODS_TAP_TOGGLE: release : unregister_mods\n");
 969               		.loc 1 145 0
 970 016c 2530      		cpi r18,lo8(5)
 971 016e 00F0      		brlo .+2
 972 0170 00C0      		rjmp .L71
 973 0172 00C0      		rjmp .L104
 974               	.L179:
 154:../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 975               		.loc 1 154 0
 976 0174 F601      		movw r30,r12
 977 0176 8581      		ldd r24,Z+5
 978 0178 80FF      		sbrs r24,0
 979 017a 00C0      		rjmp .L170
 157:../tmk_core/common/action.c ****                                     register_mods(mods);
 980               		.loc 1 157 0
 981 017c 8F70      		andi r24,lo8(15)
 982 017e 8583      		std Z+5,r24
 983 0180 00C0      		rjmp .L100
 984               	.L101:
 168:../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 985               		.loc 1 168 0
 986 0182 2111      		cpse r18,__zero_reg__
 987 0184 00C0      		rjmp .L171
 988               	.L104:
 173:../tmk_core/common/action.c ****                             }
 989               		.loc 1 173 0
 990 0186 802F      		mov r24,r16
 991 0188 00C0      		rjmp .L172
 992               	.LVL92:
 993               	.L78:
 994               	.LBE18:
 184:../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 995               		.loc 1 184 0
 996 018a 202F      		mov r18,r16
 997 018c 2695      		lsr r18
 998 018e 2695      		lsr r18
 999 0190 2370      		andi r18,lo8(3)
 1000 0192 30E0      		ldi r19,0
 1001 0194 2115      		cp r18,__zero_reg__
 1002 0196 3105      		cpc r19,__zero_reg__
 1003 0198 01F0      		breq .L105
 1004 019a 2130      		cpi r18,1
 1005 019c 3105      		cpc r19,__zero_reg__
 1006 019e 01F0      		breq .L106
 1007 01a0 00C0      		rjmp .L71
 1008               	.L105:
 186:../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1009               		.loc 1 186 0
 1010 01a2 FF20      		tst r15
 1011 01a4 01F0      		breq .L107
 1012               	.LVL93:
 187:../tmk_core/common/action.c ****                     } else {
 1013               		.loc 1 187 0
 1014 01a6 812F      		mov r24,r17
 1015 01a8 902F      		mov r25,r16
 1016 01aa 9370      		andi r25,lo8(3)
 1017 01ac 00C0      		rjmp .L173
 1018               	.LVL94:
 1019               	.L107:
 189:../tmk_core/common/action.c ****                     }
 1020               		.loc 1 189 0
 1021 01ae 80E0      		ldi r24,0
 1022 01b0 90E0      		ldi r25,0
 1023               	.LVL95:
 1024               	.L173:
 1025               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1026               		.loc 1 346 0
 1027 01b2 2696      		adiw r28,6
 1028 01b4 0FB6      		in __tmp_reg__,__SREG__
 1029 01b6 F894      		cli
 1030 01b8 DEBF      		out __SP_H__,r29
 1031 01ba 0FBE      		out __SREG__,__tmp_reg__
 1032 01bc CDBF      		out __SP_L__,r28
 1033 01be DF91      		pop r29
 1034 01c0 CF91      		pop r28
 1035 01c2 1F91      		pop r17
 1036               	.LVL96:
 1037 01c4 0F91      		pop r16
 1038 01c6 FF90      		pop r15
 1039               	.LVL97:
 1040 01c8 EF90      		pop r14
 1041 01ca DF90      		pop r13
 1042 01cc CF90      		pop r12
 1043               	.LVL98:
 189:../tmk_core/common/action.c ****                     }
 1044               		.loc 1 189 0
 1045 01ce 0C94 0000 		jmp host_system_send
 1046               	.LVL99:
 1047               	.L106:
 193:../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1048               		.loc 1 193 0
 1049 01d2 FF20      		tst r15
 1050 01d4 01F0      		breq .L108
 1051               	.LVL100:
 194:../tmk_core/common/action.c ****                     } else {
 1052               		.loc 1 194 0
 1053 01d6 812F      		mov r24,r17
 1054 01d8 902F      		mov r25,r16
 1055 01da 9370      		andi r25,lo8(3)
 1056 01dc 00C0      		rjmp .L175
 1057               	.LVL101:
 1058               	.L108:
 196:../tmk_core/common/action.c ****                     }
 1059               		.loc 1 196 0
 1060 01de 80E0      		ldi r24,0
 1061 01e0 90E0      		ldi r25,0
 1062               	.LVL102:
 1063               	.L175:
 1064               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1065               		.loc 1 346 0
 1066 01e2 2696      		adiw r28,6
 1067 01e4 0FB6      		in __tmp_reg__,__SREG__
 1068 01e6 F894      		cli
 1069 01e8 DEBF      		out __SP_H__,r29
 1070 01ea 0FBE      		out __SREG__,__tmp_reg__
 1071 01ec CDBF      		out __SP_L__,r28
 1072 01ee DF91      		pop r29
 1073 01f0 CF91      		pop r28
 1074 01f2 1F91      		pop r17
 1075               	.LVL103:
 1076 01f4 0F91      		pop r16
 1077 01f6 FF90      		pop r15
 1078               	.LVL104:
 1079 01f8 EF90      		pop r14
 1080 01fa DF90      		pop r13
 1081 01fc CF90      		pop r12
 1082               	.LVL105:
 196:../tmk_core/common/action.c ****                     }
 1083               		.loc 1 196 0
 1084 01fe 0C94 0000 		jmp host_consumer_send
 1085               	.LVL106:
 1086               	.L79:
 206:../tmk_core/common/action.c ****                 mousekey_send();
 1087               		.loc 1 206 0
 1088 0202 812F      		mov r24,r17
 205:../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1089               		.loc 1 205 0
 1090 0204 FF20      		tst r15
 1091 0206 01F0      		breq .L109
 206:../tmk_core/common/action.c ****                 mousekey_send();
 1092               		.loc 1 206 0
 1093 0208 0E94 0000 		call mousekey_on
 1094               	.LVL107:
 1095 020c 00C0      		rjmp .L176
 1096               	.L109:
 209:../tmk_core/common/action.c ****                 mousekey_send();
 1097               		.loc 1 209 0
 1098 020e 0E94 0000 		call mousekey_off
 1099               	.LVL108:
 1100               	.L176:
 1101               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1102               		.loc 1 346 0
 1103 0212 2696      		adiw r28,6
 1104 0214 0FB6      		in __tmp_reg__,__SREG__
 1105 0216 F894      		cli
 1106 0218 DEBF      		out __SP_H__,r29
 1107 021a 0FBE      		out __SREG__,__tmp_reg__
 1108 021c CDBF      		out __SP_L__,r28
 1109 021e DF91      		pop r29
 1110 0220 CF91      		pop r28
 1111 0222 1F91      		pop r17
 1112               	.LVL109:
 1113 0224 0F91      		pop r16
 1114 0226 FF90      		pop r15
 1115               	.LVL110:
 1116 0228 EF90      		pop r14
 1117 022a DF90      		pop r13
 1118 022c CF90      		pop r12
 1119               	.LVL111:
 210:../tmk_core/common/action.c ****             }
 1120               		.loc 1 210 0
 1121 022e 0C94 0000 		jmp mousekey_send
 1122               	.LVL112:
 1123               	.L80:
 216:../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1124               		.loc 1 216 0
 1125 0232 802F      		mov r24,r16
 1126 0234 8370      		andi r24,lo8(3)
 1127 0236 01F0      		breq .+2
 1128 0238 00C0      		rjmp .L110
 218:../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1129               		.loc 1 218 0
 1130 023a F110      		cpse r15,__zero_reg__
 1131 023c 00C0      		rjmp .L71
 1132               	.LVL113:
 1133               	.LBB19:
 219:../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1134               		.loc 1 219 0
 1135 023e 812F      		mov r24,r17
 1136 0240 8295      		swap r24
 1137 0242 8695      		lsr r24
 1138 0244 8770      		andi r24,lo8(7)
 1139 0246 880F      		lsl r24
 1140 0248 880F      		lsl r24
 220:../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1141               		.loc 1 220 0
 1142 024a 912F      		mov r25,r17
 1143 024c 9F70      		andi r25,lo8(15)
 1144 024e C92E      		mov r12,r25
 1145               	.LVL114:
 1146 0250 D12C      		mov r13,__zero_reg__
 1147 0252 E12C      		mov r14,__zero_reg__
 1148 0254 F12C      		mov r15,__zero_reg__
 1149 0256 082E      		mov r0,r24
 1150 0258 00C0      		rjmp 2f
 1151               		1:
 1152 025a CC0C      		lsl r12
 1153 025c DD1C      		rol r13
 1154 025e EE1C      		rol r14
 1155 0260 FF1C      		rol r15
 1156               		2:
 1157 0262 0A94      		dec r0
 1158 0264 02F4      		brpl 1b
 1159               	.LVL115:
 221:../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1160               		.loc 1 221 0
 1161 0266 14FF      		sbrs r17,4
 1162 0268 00C0      		rjmp .L138
 221:../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1163               		.loc 1 221 0 is_stmt 0 discriminator 1
 1164 026a 4FE0      		ldi r20,lo8(15)
 1165 026c 50E0      		ldi r21,0
 1166 026e 60E0      		ldi r22,0
 1167 0270 70E0      		ldi r23,0
 1168 0272 00C0      		rjmp 2f
 1169               		1:
 1170 0274 440F      		lsl r20
 1171 0276 551F      		rol r21
 1172 0278 661F      		rol r22
 1173 027a 771F      		rol r23
 1174               		2:
 1175 027c 8A95      		dec r24
 1176 027e 02F4      		brpl 1b
 1177 0280 CB01      		movw r24,r22
 1178 0282 BA01      		movw r22,r20
 1179 0284 6095      		com r22
 1180 0286 7095      		com r23
 1181 0288 8095      		com r24
 1182 028a 9095      		com r25
 1183 028c 00C0      		rjmp .L111
 1184               	.L138:
 221:../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1185               		.loc 1 221 0
 1186 028e 60E0      		ldi r22,0
 1187 0290 70E0      		ldi r23,0
 1188 0292 CB01      		movw r24,r22
 1189               	.L111:
 1190               	.LVL116:
 222:../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1191               		.loc 1 222 0 is_stmt 1 discriminator 4
 1192 0294 202F      		mov r18,r16
 1193 0296 2695      		lsr r18
 1194 0298 2695      		lsr r18
 1195 029a 2370      		andi r18,lo8(3)
 1196 029c 422F      		mov r20,r18
 1197 029e 50E0      		ldi r21,0
 1198 02a0 4230      		cpi r20,2
 1199 02a2 5105      		cpc r21,__zero_reg__
 1200 02a4 01F0      		breq .L113
 1201 02a6 4330      		cpi r20,3
 1202 02a8 5105      		cpc r21,__zero_reg__
 1203 02aa 01F0      		breq .L114
 1204 02ac 6C29      		or r22,r12
 1205 02ae 7D29      		or r23,r13
 1206 02b0 8E29      		or r24,r14
 1207 02b2 9F29      		or r25,r15
 1208               	.LVL117:
 1209 02b4 4130      		cpi r20,1
 1210 02b6 5105      		cpc r21,__zero_reg__
 1211 02b8 01F0      		breq .L177
 1212               	/* epilogue start */
 1213               	.LBE19:
 346:../tmk_core/common/action.c **** 
 1214               		.loc 1 346 0 discriminator 4
 1215 02ba 2696      		adiw r28,6
 1216 02bc 0FB6      		in __tmp_reg__,__SREG__
 1217 02be F894      		cli
 1218 02c0 DEBF      		out __SP_H__,r29
 1219 02c2 0FBE      		out __SREG__,__tmp_reg__
 1220 02c4 CDBF      		out __SP_L__,r28
 1221 02c6 DF91      		pop r29
 1222 02c8 CF91      		pop r28
 1223 02ca 1F91      		pop r17
 1224               	.LVL118:
 1225 02cc 0F91      		pop r16
 1226 02ce FF90      		pop r15
 1227               	.LVL119:
 1228 02d0 EF90      		pop r14
 1229 02d2 DF90      		pop r13
 1230 02d4 CF90      		pop r12
 1231               	.LVL120:
 1232               	.LBB20:
 223:../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1233               		.loc 1 223 0 discriminator 4
 1234 02d6 0C94 0000 		jmp default_layer_and
 1235               	.LVL121:
 1236               	.L113:
 225:../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1237               		.loc 1 225 0
 1238 02da 6C29      		or r22,r12
 1239 02dc 7D29      		or r23,r13
 1240 02de 8E29      		or r24,r14
 1241 02e0 9F29      		or r25,r15
 1242               	.LVL122:
 1243               	/* epilogue start */
 1244               	.LBE20:
 346:../tmk_core/common/action.c **** 
 1245               		.loc 1 346 0
 1246 02e2 2696      		adiw r28,6
 1247 02e4 0FB6      		in __tmp_reg__,__SREG__
 1248 02e6 F894      		cli
 1249 02e8 DEBF      		out __SP_H__,r29
 1250 02ea 0FBE      		out __SREG__,__tmp_reg__
 1251 02ec CDBF      		out __SP_L__,r28
 1252 02ee DF91      		pop r29
 1253 02f0 CF91      		pop r28
 1254 02f2 1F91      		pop r17
 1255               	.LVL123:
 1256 02f4 0F91      		pop r16
 1257 02f6 FF90      		pop r15
 1258               	.LVL124:
 1259 02f8 EF90      		pop r14
 1260 02fa DF90      		pop r13
 1261 02fc CF90      		pop r12
 1262               	.LVL125:
 1263               	.LBB21:
 225:../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1264               		.loc 1 225 0
 1265 02fe 0C94 0000 		jmp default_layer_xor
 1266               	.LVL126:
 1267               	.L114:
 226:../tmk_core/common/action.c ****                     }
 1268               		.loc 1 226 0
 1269 0302 0E94 0000 		call default_layer_and
 1270               	.LVL127:
 1271 0306 C701      		movw r24,r14
 1272 0308 B601      		movw r22,r12
 1273               	.L177:
 1274               	/* epilogue start */
 1275               	.LBE21:
 346:../tmk_core/common/action.c **** 
 1276               		.loc 1 346 0
 1277 030a 2696      		adiw r28,6
 1278 030c 0FB6      		in __tmp_reg__,__SREG__
 1279 030e F894      		cli
 1280 0310 DEBF      		out __SP_H__,r29
 1281 0312 0FBE      		out __SREG__,__tmp_reg__
 1282 0314 CDBF      		out __SP_L__,r28
 1283 0316 DF91      		pop r29
 1284 0318 CF91      		pop r28
 1285 031a 1F91      		pop r17
 1286               	.LVL128:
 1287 031c 0F91      		pop r16
 1288 031e FF90      		pop r15
 1289               	.LVL129:
 1290 0320 EF90      		pop r14
 1291 0322 DF90      		pop r13
 1292 0324 CF90      		pop r12
 1293               	.LVL130:
 1294               	.LBB22:
 226:../tmk_core/common/action.c ****                     }
 1295               		.loc 1 226 0
 1296 0326 0C94 0000 		jmp default_layer_or
 1297               	.LVL131:
 1298               	.L110:
 1299               	.LBE22:
 231:../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1300               		.loc 1 231 0
 1301 032a FF20      		tst r15
 1302 032c 01F0      		breq .L116
 231:../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1303               		.loc 1 231 0 is_stmt 0 discriminator 1
 1304 032e 802F      		mov r24,r16
 1305 0330 8170      		andi r24,lo8(1)
 1306 0332 00C0      		rjmp .L117
 1307               	.L116:
 231:../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1308               		.loc 1 231 0 discriminator 2
 1309 0334 8695      		lsr r24
 1310               	.L117:
 231:../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1311               		.loc 1 231 0 discriminator 4
 1312 0336 8823      		tst r24
 1313 0338 01F4      		brne .+2
 1314 033a 00C0      		rjmp .L71
 1315               	.LVL132:
 1316               	.LBB23:
 233:../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1317               		.loc 1 233 0 is_stmt 1
 1318 033c 812F      		mov r24,r17
 1319 033e 8295      		swap r24
 1320 0340 8695      		lsr r24
 1321 0342 8770      		andi r24,lo8(7)
 1322 0344 880F      		lsl r24
 1323 0346 880F      		lsl r24
 234:../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1324               		.loc 1 234 0
 1325 0348 912F      		mov r25,r17
 1326 034a 9F70      		andi r25,lo8(15)
 1327 034c C92E      		mov r12,r25
 1328               	.LVL133:
 1329 034e D12C      		mov r13,__zero_reg__
 1330 0350 E12C      		mov r14,__zero_reg__
 1331 0352 F12C      		mov r15,__zero_reg__
 1332 0354 082E      		mov r0,r24
 1333 0356 00C0      		rjmp 2f
 1334               		1:
 1335 0358 CC0C      		lsl r12
 1336 035a DD1C      		rol r13
 1337 035c EE1C      		rol r14
 1338 035e FF1C      		rol r15
 1339               		2:
 1340 0360 0A94      		dec r0
 1341 0362 02F4      		brpl 1b
 1342               	.LVL134:
 235:../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1343               		.loc 1 235 0
 1344 0364 14FF      		sbrs r17,4
 1345 0366 00C0      		rjmp .L139
 235:../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1346               		.loc 1 235 0 is_stmt 0 discriminator 1
 1347 0368 4FE0      		ldi r20,lo8(15)
 1348 036a 50E0      		ldi r21,0
 1349 036c 60E0      		ldi r22,0
 1350 036e 70E0      		ldi r23,0
 1351 0370 00C0      		rjmp 2f
 1352               		1:
 1353 0372 440F      		lsl r20
 1354 0374 551F      		rol r21
 1355 0376 661F      		rol r22
 1356 0378 771F      		rol r23
 1357               		2:
 1358 037a 8A95      		dec r24
 1359 037c 02F4      		brpl 1b
 1360 037e CB01      		movw r24,r22
 1361 0380 BA01      		movw r22,r20
 1362 0382 6095      		com r22
 1363 0384 7095      		com r23
 1364 0386 8095      		com r24
 1365 0388 9095      		com r25
 1366 038a 00C0      		rjmp .L118
 1367               	.L139:
 235:../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1368               		.loc 1 235 0
 1369 038c 60E0      		ldi r22,0
 1370 038e 70E0      		ldi r23,0
 1371 0390 CB01      		movw r24,r22
 1372               	.L118:
 1373               	.LVL135:
 236:../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1374               		.loc 1 236 0 is_stmt 1 discriminator 4
 1375 0392 202F      		mov r18,r16
 1376 0394 2695      		lsr r18
 1377 0396 2695      		lsr r18
 1378 0398 2370      		andi r18,lo8(3)
 1379 039a 422F      		mov r20,r18
 1380 039c 50E0      		ldi r21,0
 1381 039e 4230      		cpi r20,2
 1382 03a0 5105      		cpc r21,__zero_reg__
 1383 03a2 01F0      		breq .L120
 1384 03a4 4330      		cpi r20,3
 1385 03a6 5105      		cpc r21,__zero_reg__
 1386 03a8 01F0      		breq .L121
 1387 03aa 6C29      		or r22,r12
 1388 03ac 7D29      		or r23,r13
 1389 03ae 8E29      		or r24,r14
 1390 03b0 9F29      		or r25,r15
 1391               	.LVL136:
 1392 03b2 4130      		cpi r20,1
 1393 03b4 5105      		cpc r21,__zero_reg__
 1394 03b6 01F0      		breq .L174
 1395               	/* epilogue start */
 1396               	.LBE23:
 346:../tmk_core/common/action.c **** 
 1397               		.loc 1 346 0 discriminator 4
 1398 03b8 2696      		adiw r28,6
 1399 03ba 0FB6      		in __tmp_reg__,__SREG__
 1400 03bc F894      		cli
 1401 03be DEBF      		out __SP_H__,r29
 1402 03c0 0FBE      		out __SREG__,__tmp_reg__
 1403 03c2 CDBF      		out __SP_L__,r28
 1404 03c4 DF91      		pop r29
 1405 03c6 CF91      		pop r28
 1406 03c8 1F91      		pop r17
 1407               	.LVL137:
 1408 03ca 0F91      		pop r16
 1409 03cc FF90      		pop r15
 1410               	.LVL138:
 1411 03ce EF90      		pop r14
 1412 03d0 DF90      		pop r13
 1413 03d2 CF90      		pop r12
 1414               	.LVL139:
 1415               	.LBB24:
 237:../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1416               		.loc 1 237 0 discriminator 4
 1417 03d4 0C94 0000 		jmp layer_and
 1418               	.LVL140:
 1419               	.L120:
 239:../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1420               		.loc 1 239 0
 1421 03d8 6C29      		or r22,r12
 1422 03da 7D29      		or r23,r13
 1423 03dc 8E29      		or r24,r14
 1424 03de 9F29      		or r25,r15
 1425               	.LVL141:
 1426               	/* epilogue start */
 1427               	.LBE24:
 346:../tmk_core/common/action.c **** 
 1428               		.loc 1 346 0
 1429 03e0 2696      		adiw r28,6
 1430 03e2 0FB6      		in __tmp_reg__,__SREG__
 1431 03e4 F894      		cli
 1432 03e6 DEBF      		out __SP_H__,r29
 1433 03e8 0FBE      		out __SREG__,__tmp_reg__
 1434 03ea CDBF      		out __SP_L__,r28
 1435 03ec DF91      		pop r29
 1436 03ee CF91      		pop r28
 1437 03f0 1F91      		pop r17
 1438               	.LVL142:
 1439 03f2 0F91      		pop r16
 1440 03f4 FF90      		pop r15
 1441               	.LVL143:
 1442 03f6 EF90      		pop r14
 1443 03f8 DF90      		pop r13
 1444 03fa CF90      		pop r12
 1445               	.LVL144:
 1446               	.LBB25:
 239:../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1447               		.loc 1 239 0
 1448 03fc 0C94 0000 		jmp layer_xor
 1449               	.LVL145:
 1450               	.L121:
 240:../tmk_core/common/action.c ****                     }
 1451               		.loc 1 240 0
 1452 0400 0E94 0000 		call layer_and
 1453               	.LVL146:
 1454 0404 C701      		movw r24,r14
 1455 0406 B601      		movw r22,r12
 1456               	.L174:
 1457               	/* epilogue start */
 1458               	.LBE25:
 346:../tmk_core/common/action.c **** 
 1459               		.loc 1 346 0
 1460 0408 2696      		adiw r28,6
 1461 040a 0FB6      		in __tmp_reg__,__SREG__
 1462 040c F894      		cli
 1463 040e DEBF      		out __SP_H__,r29
 1464 0410 0FBE      		out __SREG__,__tmp_reg__
 1465 0412 CDBF      		out __SP_L__,r28
 1466 0414 DF91      		pop r29
 1467 0416 CF91      		pop r28
 1468 0418 1F91      		pop r17
 1469               	.LVL147:
 1470 041a 0F91      		pop r16
 1471 041c FF90      		pop r15
 1472               	.LVL148:
 1473 041e EF90      		pop r14
 1474 0420 DF90      		pop r13
 1475 0422 CF90      		pop r12
 1476               	.LVL149:
 1477               	.LBB26:
 240:../tmk_core/common/action.c ****                     }
 1478               		.loc 1 240 0
 1479 0424 0C94 0000 		jmp layer_or
 1480               	.LVL150:
 1481               	.L81:
 1482               	.LBE26:
 248:../tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 1483               		.loc 1 248 0
 1484 0428 103F      		cpi r17,lo8(-16)
 1485 042a 01F0      		breq .L124
 1486 042c 00F4      		brsh .L125
 1487 042e 103E      		cpi r17,lo8(-32)
 1488 0430 00F4      		brsh .L165
 1489 0432 00C0      		rjmp .L123
 1490               	.L125:
 1491 0434 123F      		cpi r17,lo8(-14)
 1492 0436 01F4      		brne .+2
 1493 0438 00C0      		rjmp .L127
 1494 043a 00F0      		brlo .L128
 1495 043c 133F      		cpi r17,lo8(-13)
 1496 043e 01F4      		brne .+2
 1497 0440 00C0      		rjmp .L129
 1498 0442 00C0      		rjmp .L123
 1499               	.L165:
 1500 0444 1F70      		andi r17,lo8(15)
 1501               	.LVL151:
 1502 0446 802F      		mov r24,r16
 1503 0448 8F71      		andi r24,lo8(31)
 251:../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1504               		.loc 1 251 0
 1505 044a FF20      		tst r15
 1506 044c 01F0      		breq .L130
 252:../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1507               		.loc 1 252 0
 1508 044e 0E94 0000 		call layer_on
 1509               	.LVL152:
 253:../tmk_core/common/action.c ****                     } else {
 1510               		.loc 1 253 0
 1511 0452 812F      		mov r24,r17
 1512 0454 00C0      		rjmp .L166
 1513               	.L130:
 255:../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1514               		.loc 1 255 0
 1515 0456 0E94 0000 		call layer_off
 1516               	.LVL153:
 256:../tmk_core/common/action.c ****                     }
 1517               		.loc 1 256 0
 1518 045a 812F      		mov r24,r17
 1519               	.LVL154:
 1520               	.L172:
 1521               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1522               		.loc 1 346 0
 1523 045c 2696      		adiw r28,6
 1524 045e 0FB6      		in __tmp_reg__,__SREG__
 1525 0460 F894      		cli
 1526 0462 DEBF      		out __SP_H__,r29
 1527 0464 0FBE      		out __SREG__,__tmp_reg__
 1528 0466 CDBF      		out __SP_L__,r28
 1529 0468 DF91      		pop r29
 1530 046a CF91      		pop r28
 1531 046c 1F91      		pop r17
 1532               	.LVL155:
 1533 046e 0F91      		pop r16
 1534 0470 FF90      		pop r15
 1535               	.LVL156:
 1536 0472 EF90      		pop r14
 1537 0474 DF90      		pop r13
 1538 0476 CF90      		pop r12
 1539               	.LVL157:
 256:../tmk_core/common/action.c ****                     }
 1540               		.loc 1 256 0
 1541 0478 0C94 0000 		jmp unregister_mods
 1542               	.LVL158:
 1543               	.L124:
 261:../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1544               		.loc 1 261 0
 1545 047c FF20      		tst r15
 1546 047e 01F0      		breq .L131
 262:../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1547               		.loc 1 262 0
 1548 0480 2530      		cpi r18,lo8(5)
 1549 0482 00F0      		brlo .+2
 1550 0484 00C0      		rjmp .L71
 1551               	.L132:
 263:../tmk_core/common/action.c ****                         }
 1552               		.loc 1 263 0
 1553 0486 802F      		mov r24,r16
 1554 0488 8F71      		andi r24,lo8(31)
 1555               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1556               		.loc 1 346 0
 1557 048a 2696      		adiw r28,6
 1558 048c 0FB6      		in __tmp_reg__,__SREG__
 1559 048e F894      		cli
 1560 0490 DEBF      		out __SP_H__,r29
 1561 0492 0FBE      		out __SREG__,__tmp_reg__
 1562 0494 CDBF      		out __SP_L__,r28
 1563 0496 DF91      		pop r29
 1564 0498 CF91      		pop r28
 1565 049a 1F91      		pop r17
 1566               	.LVL159:
 1567 049c 0F91      		pop r16
 1568 049e FF90      		pop r15
 1569               	.LVL160:
 1570 04a0 EF90      		pop r14
 1571 04a2 DF90      		pop r13
 1572 04a4 CF90      		pop r12
 1573               	.LVL161:
 263:../tmk_core/common/action.c ****                         }
 1574               		.loc 1 263 0
 1575 04a6 0C94 0000 		jmp layer_invert
 1576               	.LVL162:
 1577               	.L131:
 266:../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1578               		.loc 1 266 0
 1579 04aa 2630      		cpi r18,lo8(6)
 1580 04ac 00F0      		brlo .+2
 1581 04ae 00C0      		rjmp .L71
 1582 04b0 00C0      		rjmp .L132
 1583               	.L128:
 272:../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1584               		.loc 1 272 0
 1585 04b2 FF20      		tst r15
 1586 04b4 01F0      		breq .L133
 1587               	.L134:
 272:../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1588               		.loc 1 272 0 is_stmt 0 discriminator 1
 1589 04b6 802F      		mov r24,r16
 1590 04b8 8F71      		andi r24,lo8(31)
 1591               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1592               		.loc 1 346 0 is_stmt 1 discriminator 1
 1593 04ba 2696      		adiw r28,6
 1594 04bc 0FB6      		in __tmp_reg__,__SREG__
 1595 04be F894      		cli
 1596 04c0 DEBF      		out __SP_H__,r29
 1597 04c2 0FBE      		out __SREG__,__tmp_reg__
 1598 04c4 CDBF      		out __SP_L__,r28
 1599 04c6 DF91      		pop r29
 1600 04c8 CF91      		pop r28
 1601 04ca 1F91      		pop r17
 1602               	.LVL163:
 1603 04cc 0F91      		pop r16
 1604 04ce FF90      		pop r15
 1605               	.LVL164:
 1606 04d0 EF90      		pop r14
 1607 04d2 DF90      		pop r13
 1608 04d4 CF90      		pop r12
 1609               	.LVL165:
 272:../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1610               		.loc 1 272 0 discriminator 1
 1611 04d6 0C94 0000 		jmp layer_on
 1612               	.LVL166:
 1613               	.L127:
 276:../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1614               		.loc 1 276 0
 1615 04da FF20      		tst r15
 1616 04dc 01F0      		breq .L134
 1617               	.L133:
 273:../tmk_core/common/action.c ****                     break;
 1618               		.loc 1 273 0
 1619 04de 802F      		mov r24,r16
 1620 04e0 8F71      		andi r24,lo8(31)
 1621               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1622               		.loc 1 346 0
 1623 04e2 2696      		adiw r28,6
 1624 04e4 0FB6      		in __tmp_reg__,__SREG__
 1625 04e6 F894      		cli
 1626 04e8 DEBF      		out __SP_H__,r29
 1627 04ea 0FBE      		out __SREG__,__tmp_reg__
 1628 04ec CDBF      		out __SP_L__,r28
 1629 04ee DF91      		pop r29
 1630 04f0 CF91      		pop r28
 1631 04f2 1F91      		pop r17
 1632               	.LVL167:
 1633 04f4 0F91      		pop r16
 1634 04f6 FF90      		pop r15
 1635               	.LVL168:
 1636 04f8 EF90      		pop r14
 1637 04fa DF90      		pop r13
 1638 04fc CF90      		pop r12
 1639               	.LVL169:
 273:../tmk_core/common/action.c ****                     break;
 1640               		.loc 1 273 0
 1641 04fe 0C94 0000 		jmp layer_off
 1642               	.LVL170:
 1643               	.L129:
 280:../tmk_core/common/action.c ****                                     layer_clear();
 1644               		.loc 1 280 0
 1645 0502 FF20      		tst r15
 1646 0504 01F0      		breq .L135
 280:../tmk_core/common/action.c ****                                     layer_clear();
 1647               		.loc 1 280 0 is_stmt 0 discriminator 1
 1648 0506 802F      		mov r24,r16
 1649 0508 8F71      		andi r24,lo8(31)
 1650               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1651               		.loc 1 346 0 is_stmt 1 discriminator 1
 1652 050a 2696      		adiw r28,6
 1653 050c 0FB6      		in __tmp_reg__,__SREG__
 1654 050e F894      		cli
 1655 0510 DEBF      		out __SP_H__,r29
 1656 0512 0FBE      		out __SREG__,__tmp_reg__
 1657 0514 CDBF      		out __SP_L__,r28
 1658 0516 DF91      		pop r29
 1659 0518 CF91      		pop r28
 1660 051a 1F91      		pop r17
 1661               	.LVL171:
 1662 051c 0F91      		pop r16
 1663 051e FF90      		pop r15
 1664               	.LVL172:
 1665 0520 EF90      		pop r14
 1666 0522 DF90      		pop r13
 1667 0524 CF90      		pop r12
 1668               	.LVL173:
 280:../tmk_core/common/action.c ****                                     layer_clear();
 1669               		.loc 1 280 0 discriminator 1
 1670 0526 0C94 0000 		jmp layer_move
 1671               	.LVL174:
 1672               	.L135:
 1673               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1674               		.loc 1 346 0
 1675 052a 2696      		adiw r28,6
 1676 052c 0FB6      		in __tmp_reg__,__SREG__
 1677 052e F894      		cli
 1678 0530 DEBF      		out __SP_H__,r29
 1679 0532 0FBE      		out __SREG__,__tmp_reg__
 1680 0534 CDBF      		out __SP_L__,r28
 1681 0536 DF91      		pop r29
 1682 0538 CF91      		pop r28
 1683 053a 1F91      		pop r17
 1684               	.LVL175:
 1685 053c 0F91      		pop r16
 1686 053e FF90      		pop r15
 1687               	.LVL176:
 1688 0540 EF90      		pop r14
 1689 0542 DF90      		pop r13
 1690 0544 CF90      		pop r12
 1691               	.LVL177:
 281:../tmk_core/common/action.c ****                     break;
 1692               		.loc 1 281 0
 1693 0546 0C94 0000 		jmp layer_clear
 1694               	.LVL178:
 1695               	.L123:
 285:../tmk_core/common/action.c ****                         if (tap_count > 0) {
 1696               		.loc 1 285 0
 1697 054a FF20      		tst r15
 1698 054c 01F0      		breq .L136
 286:../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1699               		.loc 1 286 0
 1700 054e 2223      		tst r18
 1701 0550 01F4      		brne .+2
 1702 0552 00C0      		rjmp .L134
 1703               	.L170:
 288:../tmk_core/common/action.c ****                         } else {
 1704               		.loc 1 288 0
 1705 0554 812F      		mov r24,r17
 1706               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1707               		.loc 1 346 0
 1708 0556 2696      		adiw r28,6
 1709 0558 0FB6      		in __tmp_reg__,__SREG__
 1710 055a F894      		cli
 1711 055c DEBF      		out __SP_H__,r29
 1712 055e 0FBE      		out __SREG__,__tmp_reg__
 1713 0560 CDBF      		out __SP_L__,r28
 1714 0562 DF91      		pop r29
 1715 0564 CF91      		pop r28
 1716 0566 1F91      		pop r17
 1717               	.LVL179:
 1718 0568 0F91      		pop r16
 1719 056a FF90      		pop r15
 1720               	.LVL180:
 1721 056c EF90      		pop r14
 1722 056e DF90      		pop r13
 1723 0570 CF90      		pop r12
 1724               	.LVL181:
 288:../tmk_core/common/action.c ****                         } else {
 1725               		.loc 1 288 0
 1726 0572 0C94 0000 		jmp register_code
 1727               	.LVL182:
 1728               	.L136:
 294:../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1729               		.loc 1 294 0
 1730 0576 2223      		tst r18
 1731 0578 01F4      		brne .+2
 1732 057a 00C0      		rjmp .L133
 1733               	.L171:
 296:../tmk_core/common/action.c ****                         } else {
 1734               		.loc 1 296 0
 1735 057c 812F      		mov r24,r17
 1736               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1737               		.loc 1 346 0
 1738 057e 2696      		adiw r28,6
 1739 0580 0FB6      		in __tmp_reg__,__SREG__
 1740 0582 F894      		cli
 1741 0584 DEBF      		out __SP_H__,r29
 1742 0586 0FBE      		out __SREG__,__tmp_reg__
 1743 0588 CDBF      		out __SP_L__,r28
 1744 058a DF91      		pop r29
 1745 058c CF91      		pop r28
 1746 058e 1F91      		pop r17
 1747               	.LVL183:
 1748 0590 0F91      		pop r16
 1749 0592 FF90      		pop r15
 1750               	.LVL184:
 1751 0594 EF90      		pop r14
 1752 0596 DF90      		pop r13
 1753 0598 CF90      		pop r12
 1754               	.LVL185:
 296:../tmk_core/common/action.c ****                         } else {
 1755               		.loc 1 296 0
 1756 059a 0C94 0000 		jmp unregister_code
 1757               	.LVL186:
 1758               	.L82:
 310:../tmk_core/common/action.c ****             break;
 1759               		.loc 1 310 0
 1760 059e 402F      		mov r20,r16
 1761 05a0 4F70      		andi r20,lo8(15)
 1762               	.LVL187:
 1763 05a2 612F      		mov r22,r17
 1764 05a4 C601      		movw r24,r12
 1765 05a6 0E94 0000 		call action_get_macro
 1766               	.LVL188:
 1767               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1768               		.loc 1 346 0
 1769 05aa 2696      		adiw r28,6
 1770 05ac 0FB6      		in __tmp_reg__,__SREG__
 1771 05ae F894      		cli
 1772 05b0 DEBF      		out __SP_H__,r29
 1773 05b2 0FBE      		out __SREG__,__tmp_reg__
 1774 05b4 CDBF      		out __SP_L__,r28
 1775 05b6 DF91      		pop r29
 1776 05b8 CF91      		pop r28
 1777 05ba 1F91      		pop r17
 1778               	.LVL189:
 1779 05bc 0F91      		pop r16
 1780 05be FF90      		pop r15
 1781               	.LVL190:
 1782 05c0 EF90      		pop r14
 1783 05c2 DF90      		pop r13
 1784 05c4 CF90      		pop r12
 1785               	.LVL191:
 310:../tmk_core/common/action.c ****             break;
 1786               		.loc 1 310 0
 1787 05c6 0C94 0000 		jmp action_macro_play
 1788               	.LVL192:
 1789               	.L83:
 340:../tmk_core/common/action.c ****             break;
 1790               		.loc 1 340 0
 1791 05ca 402F      		mov r20,r16
 1792 05cc 4F70      		andi r20,lo8(15)
 1793               	.LVL193:
 1794 05ce 612F      		mov r22,r17
 1795 05d0 C601      		movw r24,r12
 1796               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1797               		.loc 1 346 0
 1798 05d2 2696      		adiw r28,6
 1799 05d4 0FB6      		in __tmp_reg__,__SREG__
 1800 05d6 F894      		cli
 1801 05d8 DEBF      		out __SP_H__,r29
 1802 05da 0FBE      		out __SREG__,__tmp_reg__
 1803 05dc CDBF      		out __SP_L__,r28
 1804 05de DF91      		pop r29
 1805 05e0 CF91      		pop r28
 1806 05e2 1F91      		pop r17
 1807               	.LVL194:
 1808 05e4 0F91      		pop r16
 1809 05e6 FF90      		pop r15
 1810               	.LVL195:
 1811 05e8 EF90      		pop r14
 1812 05ea DF90      		pop r13
 1813 05ec CF90      		pop r12
 1814               	.LVL196:
 340:../tmk_core/common/action.c ****             break;
 1815               		.loc 1 340 0
 1816 05ee 0C94 0000 		jmp action_function
 1817               	.LVL197:
 1818               	.L71:
 1819               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1820               		.loc 1 346 0
 1821 05f2 2696      		adiw r28,6
 1822 05f4 0FB6      		in __tmp_reg__,__SREG__
 1823 05f6 F894      		cli
 1824 05f8 DEBF      		out __SP_H__,r29
 1825 05fa 0FBE      		out __SREG__,__tmp_reg__
 1826 05fc CDBF      		out __SP_L__,r28
 1827 05fe DF91      		pop r29
 1828 0600 CF91      		pop r28
 1829 0602 1F91      		pop r17
 1830               	.LVL198:
 1831 0604 0F91      		pop r16
 1832 0606 FF90      		pop r15
 1833               	.LVL199:
 1834 0608 EF90      		pop r14
 1835 060a DF90      		pop r13
 1836 060c CF90      		pop r12
 1837 060e 0895      		ret
 1838               		.cfi_endproc
 1839               	.LFE104:
 1841               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1842               	.global	clear_keyboard_but_mods
 1844               	clear_keyboard_but_mods:
 1845               	.LFB110:
 497:../tmk_core/common/action.c ****     }
 498:../tmk_core/common/action.c **** }
 499:../tmk_core/common/action.c **** 
 500:../tmk_core/common/action.c **** void clear_keyboard(void)
 501:../tmk_core/common/action.c **** {
 502:../tmk_core/common/action.c ****     clear_mods();
 503:../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 504:../tmk_core/common/action.c **** }
 505:../tmk_core/common/action.c **** 
 506:../tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 507:../tmk_core/common/action.c **** {
 1846               		.loc 1 507 0
 1847               		.cfi_startproc
 1848               	/* prologue: function */
 1849               	/* frame size = 0 */
 1850               	/* stack size = 0 */
 1851               	.L__stack_usage = 0
 508:../tmk_core/common/action.c ****     clear_weak_mods();
 1852               		.loc 1 508 0
 1853 0000 0E94 0000 		call clear_weak_mods
 1854               	.LVL200:
 509:../tmk_core/common/action.c ****     clear_keys();
 1855               		.loc 1 509 0
 1856 0004 0E94 0000 		call clear_keys
 1857               	.LVL201:
 510:../tmk_core/common/action.c ****     send_keyboard_report();
 1858               		.loc 1 510 0
 1859 0008 0E94 0000 		call send_keyboard_report
 1860               	.LVL202:
 511:../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 512:../tmk_core/common/action.c ****     mousekey_clear();
 1861               		.loc 1 512 0
 1862 000c 0E94 0000 		call mousekey_clear
 1863               	.LVL203:
 513:../tmk_core/common/action.c ****     mousekey_send();
 1864               		.loc 1 513 0
 1865 0010 0E94 0000 		call mousekey_send
 1866               	.LVL204:
 514:../tmk_core/common/action.c **** #endif
 515:../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 516:../tmk_core/common/action.c ****     host_system_send(0);
 1867               		.loc 1 516 0
 1868 0014 80E0      		ldi r24,0
 1869 0016 90E0      		ldi r25,0
 1870 0018 0E94 0000 		call host_system_send
 1871               	.LVL205:
 517:../tmk_core/common/action.c ****     host_consumer_send(0);
 1872               		.loc 1 517 0
 1873 001c 80E0      		ldi r24,0
 1874 001e 90E0      		ldi r25,0
 1875 0020 0C94 0000 		jmp host_consumer_send
 1876               	.LVL206:
 1877               		.cfi_endproc
 1878               	.LFE110:
 1880               		.section	.text.clear_keyboard,"ax",@progbits
 1881               	.global	clear_keyboard
 1883               	clear_keyboard:
 1884               	.LFB109:
 501:../tmk_core/common/action.c ****     clear_mods();
 1885               		.loc 1 501 0
 1886               		.cfi_startproc
 1887               	/* prologue: function */
 1888               	/* frame size = 0 */
 1889               	/* stack size = 0 */
 1890               	.L__stack_usage = 0
 502:../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1891               		.loc 1 502 0
 1892 0000 0E94 0000 		call clear_mods
 1893               	.LVL207:
 503:../tmk_core/common/action.c **** }
 1894               		.loc 1 503 0
 1895 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1896               	.LVL208:
 1897               		.cfi_endproc
 1898               	.LFE109:
 1900               		.section	.text.is_tap_key,"ax",@progbits
 1901               	.global	is_tap_key
 1903               	is_tap_key:
 1904               	.LFB111:
 518:../tmk_core/common/action.c **** #endif
 519:../tmk_core/common/action.c **** }
 520:../tmk_core/common/action.c **** 
 521:../tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 522:../tmk_core/common/action.c **** {
 1905               		.loc 1 522 0
 1906               		.cfi_startproc
 1907               	.LVL209:
 1908               	/* prologue: function */
 1909               	/* frame size = 0 */
 1910               	/* stack size = 0 */
 1911               	.L__stack_usage = 0
 523:../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1912               		.loc 1 523 0
 1913 0000 0E94 0000 		call layer_switch_get_action
 1914               	.LVL210:
 524:../tmk_core/common/action.c **** 
 525:../tmk_core/common/action.c ****     switch (action.kind.id) {
 1915               		.loc 1 525 0
 1916 0004 292F      		mov r18,r25
 1917 0006 2295      		swap r18
 1918 0008 2F70      		andi r18,lo8(15)
 1919 000a 30E0      		ldi r19,0
 1920 000c 2C30      		cpi r18,12
 1921 000e 3105      		cpc r19,__zero_reg__
 1922 0010 04F4      		brge .L184
 1923 0012 2A30      		cpi r18,10
 1924 0014 3105      		cpc r19,__zero_reg__
 1925 0016 04F4      		brge .L185
 1926 0018 2250      		subi r18,2
 1927 001a 3109      		sbc r19,__zero_reg__
 1928 001c 2230      		cpi r18,2
 1929 001e 3105      		cpc r19,__zero_reg__
 1930 0020 00F4      		brsh .L188
 1931 0022 00C0      		rjmp .L185
 1932               	.L184:
 1933 0024 2C30      		cpi r18,12
 1934 0026 3105      		cpc r19,__zero_reg__
 1935 0028 01F0      		breq .L186
 1936 002a 2F30      		cpi r18,15
 1937 002c 3105      		cpc r19,__zero_reg__
 1938 002e 01F0      		breq .L186
 1939 0030 00C0      		rjmp .L188
 1940               	.L185:
 1941               	.LVL211:
 526:../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 527:../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 528:../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 529:../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 530:../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1942               		.loc 1 530 0
 1943 0032 803E      		cpi r24,lo8(-32)
 1944 0034 00F0      		brlo .L189
 1945 0036 803F      		cpi r24,lo8(-16)
 1946 0038 01F4      		brne .L188
 1947 003a 00C0      		rjmp .L189
 1948               	.LVL212:
 1949               	.L186:
 531:../tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 532:../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 533:../tmk_core/common/action.c ****                     return true;
 534:../tmk_core/common/action.c ****             }
 535:../tmk_core/common/action.c ****             return false;
 536:../tmk_core/common/action.c ****         case ACT_MACRO:
 537:../tmk_core/common/action.c ****         case ACT_FUNCTION:
 538:../tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 1950               		.loc 1 538 0
 1951 003c 93FB      		bst r25,3
 1952 003e 8827      		clr r24
 1953 0040 80F9      		bld r24,0
 1954 0042 0895      		ret
 1955               	.LVL213:
 1956               	.L188:
 539:../tmk_core/common/action.c ****             return false;
 540:../tmk_core/common/action.c ****     }
 541:../tmk_core/common/action.c ****     return false;
 1957               		.loc 1 541 0
 1958 0044 80E0      		ldi r24,0
 1959               	.LVL214:
 1960 0046 0895      		ret
 1961               	.LVL215:
 1962               	.L189:
 533:../tmk_core/common/action.c ****             }
 1963               		.loc 1 533 0
 1964 0048 81E0      		ldi r24,lo8(1)
 1965               	.LVL216:
 542:../tmk_core/common/action.c **** }
 1966               		.loc 1 542 0
 1967 004a 0895      		ret
 1968               		.cfi_endproc
 1969               	.LFE111:
 1971               		.section	.text.debug_event,"ax",@progbits
 1972               	.global	debug_event
 1974               	debug_event:
 1975               	.LFB112:
 543:../tmk_core/common/action.c **** 
 544:../tmk_core/common/action.c **** 
 545:../tmk_core/common/action.c **** /*
 546:../tmk_core/common/action.c ****  * debug print
 547:../tmk_core/common/action.c ****  */
 548:../tmk_core/common/action.c **** void debug_event(keyevent_t event)
 549:../tmk_core/common/action.c **** {
 1976               		.loc 1 549 0
 1977               		.cfi_startproc
 1978 0000 CF93      		push r28
 1979               	.LCFI15:
 1980               		.cfi_def_cfa_offset 3
 1981               		.cfi_offset 28, -2
 1982 0002 DF93      		push r29
 1983               	.LCFI16:
 1984               		.cfi_def_cfa_offset 4
 1985               		.cfi_offset 29, -3
 1986 0004 00D0      		rcall .
 1987 0006 00D0      		rcall .
 1988 0008 1F92      		push __zero_reg__
 1989               	.LCFI17:
 1990               		.cfi_def_cfa_offset 9
 1991 000a CDB7      		in r28,__SP_L__
 1992 000c DEB7      		in r29,__SP_H__
 1993               	.LCFI18:
 1994               		.cfi_def_cfa_register 28
 1995               	/* prologue: function */
 1996               	/* frame size = 5 */
 1997               	/* stack size = 7 */
 1998               	.L__stack_usage = 7
 1999               	/* epilogue start */
 550:../tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 551:../tmk_core/common/action.c **** }
 2000               		.loc 1 551 0
 2001 000e 0F90      		pop __tmp_reg__
 2002 0010 0F90      		pop __tmp_reg__
 2003 0012 0F90      		pop __tmp_reg__
 2004 0014 0F90      		pop __tmp_reg__
 2005 0016 0F90      		pop __tmp_reg__
 2006 0018 DF91      		pop r29
 2007 001a CF91      		pop r28
 2008 001c 0895      		ret
 2009               		.cfi_endproc
 2010               	.LFE112:
 2012               		.section	.text.debug_record,"ax",@progbits
 2013               	.global	debug_record
 2015               	debug_record:
 2016               	.LFB113:
 552:../tmk_core/common/action.c **** 
 553:../tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 554:../tmk_core/common/action.c **** {
 2017               		.loc 1 554 0
 2018               		.cfi_startproc
 2019 0000 CF93      		push r28
 2020               	.LCFI19:
 2021               		.cfi_def_cfa_offset 3
 2022               		.cfi_offset 28, -2
 2023 0002 DF93      		push r29
 2024               	.LCFI20:
 2025               		.cfi_def_cfa_offset 4
 2026               		.cfi_offset 29, -3
 2027 0004 00D0      		rcall .
 2028 0006 00D0      		rcall .
 2029 0008 00D0      		rcall .
 2030               	.LCFI21:
 2031               		.cfi_def_cfa_offset 10
 2032 000a CDB7      		in r28,__SP_L__
 2033 000c DEB7      		in r29,__SP_H__
 2034               	.LCFI22:
 2035               		.cfi_def_cfa_register 28
 2036               	/* prologue: function */
 2037               	/* frame size = 6 */
 2038               	/* stack size = 8 */
 2039               	.L__stack_usage = 8
 2040               	/* epilogue start */
 555:../tmk_core/common/action.c ****     debug_event(record.event);
 556:../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 557:../tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 558:../tmk_core/common/action.c **** #endif
 559:../tmk_core/common/action.c **** }
 2041               		.loc 1 559 0
 2042 000e 2696      		adiw r28,6
 2043 0010 0FB6      		in __tmp_reg__,__SREG__
 2044 0012 F894      		cli
 2045 0014 DEBF      		out __SP_H__,r29
 2046 0016 0FBE      		out __SREG__,__tmp_reg__
 2047 0018 CDBF      		out __SP_L__,r28
 2048 001a DF91      		pop r29
 2049 001c CF91      		pop r28
 2050 001e 0895      		ret
 2051               		.cfi_endproc
 2052               	.LFE113:
 2054               		.section	.text.debug_action,"ax",@progbits
 2055               	.global	debug_action
 2057               	debug_action:
 2058               	.LFB114:
 560:../tmk_core/common/action.c **** 
 561:../tmk_core/common/action.c **** void debug_action(action_t action)
 562:../tmk_core/common/action.c **** {
 2059               		.loc 1 562 0
 2060               		.cfi_startproc
 2061               	.LVL217:
 2062               	/* prologue: function */
 2063               	/* frame size = 0 */
 2064               	/* stack size = 0 */
 2065               	.L__stack_usage = 0
 2066 0000 0895      		ret
 2067               		.cfi_endproc
 2068               	.LFE114:
 2070               		.text
 2071               	.Letext0:
 2072               		.file 3 "/usr/lib/avr/include/stdint.h"
 2073               		.file 4 "../tmk_core/common/keycode.h"
 2074               		.file 5 "../tmk_core/common/action_code.h"
 2075               		.file 6 "../tmk_core/common/action_macro.h"
 2076               		.file 7 "../tmk_core/common/action.h"
 2077               		.file 8 "../tmk_core/common/action_tapping.h"
 2078               		.file 9 "../tmk_core/common/hook.h"
 2079               		.file 10 "../tmk_core/common/action_util.h"
 2080               		.file 11 "../tmk_core/common/host.h"
 2081               		.file 12 "../tmk_core/common/action_layer.h"
 2082               		.file 13 "../tmk_core/common/command.h"
 2083               		.file 14 "../tmk_core/common/mousekey.h"
 2084               		.file 15 "../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
     /tmp/cc3mrlK4.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc3mrlK4.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc3mrlK4.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc3mrlK4.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cc3mrlK4.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc3mrlK4.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc3mrlK4.s:14     .text.action_exec:0000000000000000 action_exec
     /tmp/cc3mrlK4.s:123    .text.register_code:0000000000000000 register_code
     /tmp/cc3mrlK4.s:454    .text.unregister_code:0000000000000000 unregister_code
     /tmp/cc3mrlK4.s:589    .text.register_mods:0000000000000000 register_mods
     /tmp/cc3mrlK4.s:615    .text.unregister_mods:0000000000000000 unregister_mods
     /tmp/cc3mrlK4.s:641    .text.process_action:0000000000000000 process_action
     /tmp/cc3mrlK4.s:1844   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
     /tmp/cc3mrlK4.s:1883   .text.clear_keyboard:0000000000000000 clear_keyboard
     /tmp/cc3mrlK4.s:1903   .text.is_tap_key:0000000000000000 is_tap_key
     /tmp/cc3mrlK4.s:1974   .text.debug_event:0000000000000000 debug_event
     /tmp/cc3mrlK4.s:2015   .text.debug_record:0000000000000000 debug_record
     /tmp/cc3mrlK4.s:2057   .text.debug_action:0000000000000000 debug_action

UNDEFINED SYMBOLS
action_tapping_process
hook_matrix_change
host_keyboard_leds
add_key
send_keyboard_report
del_key
command_proc
add_mods
host_system_send
host_consumer_send
del_mods
layer_switch_get_action
layer_debug
default_layer_debug
__tablejump2__
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
get_mods
mousekey_on
mousekey_off
mousekey_send
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_on
layer_off
layer_invert
layer_move
layer_clear
action_get_macro
action_macro_play
action_function
clear_weak_mods
clear_keys
mousekey_clear
clear_mods
