
firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00005700  00005794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005700  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ae  00800138  00800138  000057cc  2**0
                  ALLOC
  3 .noinit       00000004  008001e6  008001e6  000057cc  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  000057cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000070  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000060f4  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006108  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000960  00000000  00000000  00006148  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000fd93  00000000  00000000  00006aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003c1d  00000000  00000000  0001683b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004f10  00000000  00000000  0001a458  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a44  00000000  00000000  0001f368  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003e9f  00000000  00000000  00020dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000080d4  00000000  00000000  00024c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a78  00000000  00000000  0002cd1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
       0:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__ctors_end>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
       4:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
       8:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
       c:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
      10:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      14:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      18:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
      1c:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
      20:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
      24:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
      28:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <__vector_10>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
      2c:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <__vector_11>
      30:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <__vector_12>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
      34:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      38:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      3c:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      40:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      44:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      48:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      4c:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      50:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      54:	0c 94 ac 1e 	jmp	0x3d58	; 0x3d58 <__vector_21>
      58:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      5c:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      60:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      64:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      68:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      6c:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      70:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      74:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      78:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      7c:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      80:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      84:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      88:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      8c:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      90:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      94:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__bad_interrupt>
      98:	d5 07       	cpc	r29, r21
      9a:	da 07       	cpc	r29, r26
      9c:	df 07       	cpc	r29, r31
      9e:	e4 07       	cpc	r30, r20
      a0:	e9 07       	cpc	r30, r25
      a2:	ee 07       	cpc	r30, r30
      a4:	f3 07       	cpc	r31, r19
      a6:	f8 07       	cpc	r31, r24
      a8:	5d 10       	cpse	r5, r13
      aa:	7f 10       	cpse	r7, r15
      ac:	6d 11       	cpse	r22, r13
      ae:	7f 10       	cpse	r7, r15
      b0:	6d 11       	cpse	r22, r13
      b2:	c4 10       	cpse	r12, r4
      b4:	e7 10       	cpse	r14, r7
      b6:	6d 11       	cpse	r22, r13
      b8:	3c 11       	cpse	r19, r12
      ba:	4f 11       	cpse	r20, r15
      bc:	9f 14       	cp	r9, r15
      be:	9f 14       	cp	r9, r15
      c0:	cc 14       	cp	r12, r12
      c2:	cc 14       	cp	r12, r12
      c4:	27 15       	cp	r18, r7
      c6:	63 15       	cp	r22, r3
      c8:	5b 17       	cp	r21, r27
      ca:	5b 17       	cp	r21, r27
      cc:	7b 15       	cp	r23, r11
      ce:	5b 17       	cp	r21, r27
      d0:	76 16       	cp	r7, r22
      d2:	76 16       	cp	r7, r22
      d4:	31 17       	cp	r19, r17
      d6:	5b 17       	cp	r21, r27
      d8:	5b 17       	cp	r21, r27
      da:	47 17       	cp	r20, r23

000000dc <__trampolines_end>:
      dc:	00 00       	nop

000000dd <__m.4689>:
      dd:	00                                                  .

000000de <__m.4686>:
      de:	00                                                  .

000000df <__m.4684>:
      df:	00                                                  .

000000e0 <__m.4681>:
      e0:	00                                                  .

000000e1 <__m.4679>:
      e1:	00                                                  .

000000e2 <__m.4676>:
      e2:	00                                                  .

000000e3 <__m.4674>:
      e3:	00                                                  .

000000e4 <__m.4671>:
      e4:	00                                                  .

000000e5 <__m.4669>:
      e5:	00                                                  .

000000e6 <__m.4666>:
      e6:	00                                                  .

000000e7 <__m.4664>:
      e7:	00                                                  .

000000e8 <__m.4661>:
      e8:	00                                                  .

000000e9 <__m.4659>:
      e9:	00                                                  .

000000ea <__m.4656>:
      ea:	00                                                  .

000000eb <__m.4654>:
      eb:	00                                                  .

000000ec <fn_actions>:
      ec:	f1 a1 f1 a2 f1 a3 f1 a4 f1 a5 f1 a6 f1 a7 02 8a     ................
      fc:	04 8a 08 8a 21 8a 22 8a 24 8a 28 8a 00 c0 01 c0     ....!.".$.(.....
     10c:	02 c0 03 c0 04 c0 05 c0 06 c0 07 c0                 ............

00000118 <keymaps>:
     118:	29 1e 1f 20 21 22 23 24 25 26 27 2d 2e 2a 2b 14     ).. !"#$%&'-.*+.
     128:	1a 08 15 17 1c 18 0c 12 13 2f 30 31 39 04 16 07     ........./019...
     138:	09 0a 0b 0d 0e 0f 33 34 28 28 e1 1d 1b 06 19 05     ......34((......
     148:	11 10 36 37 38 4b 52 4e e0 e3 e2 c0 00 2c 00 2c     ..678KRN.....,.,
     158:	e0 00 76 50 51 4f 35 3a 3b 3c 3d 3e 3f 40 41 42     ..vPQO5:;<=>?@AB
     168:	43 44 45 01 01 01 01 01 01 01 01 01 01 01 01 01     CDE.............
     178:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     188:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     198:	01 01 00 01 00 01 01 01 01 01 01 01 01 01 01 01     ................
     1a8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     1b8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     1c8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     1d8:	01 01 01 01 01 01 01 01 00 01 00 01 01 01 01 01     ................
     1e8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     1f8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     208:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     218:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 01     ................
     228:	00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     238:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     248:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     258:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     268:	01 01 01 01 00 01 00 01 01 01 01 01 01 01 01 01     ................
     278:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     288:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     298:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     2a8:	01 01 01 01 01 01 01 01 01 01 00 01 00 01 01 01     ................
     2b8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     2c8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     2d8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     2e8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     2f8:	00 01 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     308:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     318:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     328:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     338:	01 01 01 01 01 01 00 01 00 01 01 01 01 01 01 01     ................

00000348 <__c.1942>:
     348:	0a 00                                               ..

0000034a <__c.1940>:
     34a:	25 30 31 36 62 00                                   %016b.

00000350 <__c.1938>:
     350:	3a 20 00                                            : .

00000353 <__c.1936>:
     353:	25 30 32 58 00                                      %02X.

00000358 <__c.1933>:
     358:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     368:	42 43 44 45 46 0a 00                                BCDEF..

0000036f <__c.1911>:
     36f:	0a 00                                               ..

00000371 <__c.1909>:
     371:	25 30 32 58 00                                      %02X.

00000376 <__c.1907>:
     376:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

00000380 <__c.4833>:
     380:	5b 73 5d 00                                         [s].

00000384 <__c.4831>:
     384:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     394:	00                                                  .

00000395 <__c.4829>:
     395:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     3a5:	00                                                  .

000003a6 <__c.4727>:
     3a6:	5b 57 5d 00                                         [W].

000003aa <__c.4723>:
     3aa:	5b 53 5d 00                                         [S].

000003ae <__c.4719>:
     3ae:	5b 52 5d 00                                         [R].

000003b2 <__c.4714>:
     3b2:	5b 44 5d 00                                         [D].

000003b6 <__c.4709>:
     3b6:	5b 43 5d 00                                         [C].

000003ba <ProductString>:
     3ba:	1a 03 46 00 72 00 65 00 64 00 27 00 73 00 20 00     ..F.r.e.d.'.s. .
     3ca:	53 00 49 00 4e 00 41 00 50 00 00 00                 S.I.N.A.P...

000003d6 <ManufacturerString>:
     3d6:	0c 03 46 00 72 00 65 00 64 00 48 00 00 00           ..F.r.e.d.H...

000003e4 <LanguageString>:
     3e4:	04 03 09 04                                         ....

000003e8 <ConfigurationDescriptor>:
     3e8:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     3f8:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     408:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     418:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     428:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     438:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     448:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     458:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     468:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

00000475 <DeviceDescriptor>:
     475:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
     485:	00 01                                               ..

00000487 <NKROReport>:
     487:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     497:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     4a7:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
     4b7:	25 01 95 78 75 01 81 02 c0                          %..xu....

000004c0 <ConsoleReport>:
     4c0:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     4d0:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     4e0:	02 c0                                               ..

000004e2 <ExtrakeyReport>:
     4e2:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     4f2:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     502:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     512:	10 95 01 81 00 c0                                   ......

00000518 <MouseReport>:
     518:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     528:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     538:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     548:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     558:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

00000565 <KeyboardReport>:
     565:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     575:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     585:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     595:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

000005a5 <__c.4447>:
     5a5:	0a 00                                               ..

000005a7 <__c.4442>:
     5a7:	25 30 32 58 20 00                                   %02X .

000005ad <__c.4439>:
     5ad:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     5bd:	20 00                                                .

000005bf <__c.4802>:
     5bf:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

000005ca <__c.4587>:
     5ca:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     5da:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

000005e8 <__c.4582>:
     5e8:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     5f8:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

00000606 <__c.4752>:
     606:	64 6f 6e 65 2e 0a 00                                done...

0000060d <__c.4746>:
     60d:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
     61d:	2e 2e 2e 20 00                                      ... .

00000622 <__c.4519>:
     622:	29 0a 00                                            )..

00000625 <__c.4517>:
     625:	25 75 00                                            %u.

00000628 <__c.4515>:
     628:	2f 00                                               /.

0000062a <__c.4513>:
     62a:	25 75 00                                            %u.

0000062d <__c.4511>:
     62d:	5d 28 00                                            ](.

00000630 <__c.4509>:
     630:	25 64 00                                            %d.

00000633 <__c.4507>:
     633:	20 00                                                .

00000635 <__c.4505>:
     635:	25 64 00                                            %d.

00000638 <__c.4503>:
     638:	20 00                                                .

0000063a <__c.4501>:
     63a:	25 64 00                                            %d.

0000063d <__c.4499>:
     63d:	20 00                                                .

0000063f <__c.4497>:
     63f:	25 64 00                                            %d.

00000642 <__c.4495>:
     642:	7c 00                                               |.

00000644 <__c.4493>:
     644:	25 30 32 58 00                                      %02X.

00000649 <__c.4491>:
     649:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     659:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     669:	20 5b 00                                             [.

0000066c <__c.5116>:
     66c:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     67c:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000687 <__c.5113>:
     687:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     697:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000006a0 <__c.5110>:
     6a0:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     6b0:	20 25 64 0a 00                                       %d..

000006b5 <__c.5107>:
     6b5:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     6c5:	64 0a 00                                            d..

000006c8 <__c.5104>:
     6c8:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     6d8:	0a 00                                               ..

000006da <__c.5100>:
     6da:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000006e9 <__c.5093>:
     6e9:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     6f9:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000704 <__c.5090>:
     704:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     714:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

0000071d <__c.5087>:
     71d:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     72d:	20 25 64 0a 00                                       %d..

00000732 <__c.5084>:
     732:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     742:	64 0a 00                                            d..

00000745 <__c.5081>:
     745:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     755:	0a 00                                               ..

00000757 <__c.5077>:
     757:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000766 <__c.5070>:
     766:	0a 00                                               ..

00000768 <__c.5068>:
     768:	25 75 00                                            %u.

0000076b <__c.5066>:
     76b:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     77b:	5f 6d 61 78 3a 20 00                                _max: .

00000782 <__c.5064>:
     782:	0a 00                                               ..

00000784 <__c.5062>:
     784:	25 75 00                                            %u.

00000787 <__c.5060>:
     787:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     797:	65 64 3a 20 00                                      ed: .

0000079c <__c.5058>:
     79c:	0a 00                                               ..

0000079e <__c.5056>:
     79e:	25 75 00                                            %u.

000007a1 <__c.5054>:
     7a1:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     7b1:	00                                                  .

000007b2 <__c.5052>:
     7b2:	0a 00                                               ..

000007b4 <__c.5050>:
     7b4:	25 75 00                                            %u.

000007b7 <__c.5048>:
     7b7:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

000007c6 <__c.5046>:
     7c6:	0a 00                                               ..

000007c8 <__c.5044>:
     7c8:	25 75 00                                            %u.

000007cb <__c.5042>:
     7cb:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     7db:	20 00                                                .

000007dd <__c.5040>:
     7dd:	0a 00                                               ..

000007df <__c.5038>:
     7df:	25 75 00                                            %u.

000007e2 <__c.5036>:
     7e2:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     7f2:	20 00                                                .

000007f4 <__c.5034>:
     7f4:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

00000802 <__c.5154>:
     802:	4d 3e 00                                            M>.

00000805 <__c.5152>:
     805:	4d 25 64 3e 20 00                                   M%d> .

0000080b <__c.5150>:
     80b:	3f 00                                               ?.

0000080d <__c.5147>:
     80d:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

0000081a <__c.5133>:
     81a:	43 3e 20 00                                         C> .

0000081e <__c.5123>:
     81e:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     82e:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     83e:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     84e:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     85e:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

0000086c <__c.5121>:
     86c:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     87c:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     88c:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     89c:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     8ac:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     8bc:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     8cc:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     8dc:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     8ec:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     8fc:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     90c:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     91c:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     92c:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     93c:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     94c:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     95c:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000967 <__c.5026>:
     967:	3f 00                                               ?.

00000969 <__c.5023>:
     969:	4d 3e 20 00                                         M> .

0000096d <__c.5028>:
     96d:	43 3e 20 00                                         C> .

00000971 <__c.5172>:
     971:	4c 25 64 0a 00                                      L%d..

00000976 <__c.5012>:
     976:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     986:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     996:	73 65 6b 65 79 0a 00                                sekey..

0000099d <__c.4837>:
     99d:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     9ad:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     9bd:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     9cd:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     9dd:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     9ed:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     9fd:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     a0d:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     a1d:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     a2d:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     a3d:	4b 52 4f 0a 00                                      KRO..

00000a42 <__c.4932>:
     a42:	0a 00                                               ..

00000a44 <__c.4930>:
     a44:	25 75 00                                            %u.

00000a47 <__c.4928>:
     a47:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000a4f <__c.4926>:
     a4f:	0a 00                                               ..

00000a51 <__c.4924>:
     a51:	25 75 00                                            %u.

00000a54 <__c.4922>:
     a54:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     a64:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000a70 <__c.4920>:
     a70:	0a 00                                               ..

00000a72 <__c.4918>:
     a72:	25 75 00                                            %u.

00000a75 <__c.4916>:
     a75:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     a85:	20 00                                                .

00000a87 <__c.4914>:
     a87:	0a 00                                               ..

00000a89 <__c.4912>:
     a89:	25 75 00                                            %u.

00000a8c <__c.4910>:
     a8c:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000a96 <__c.4908>:
     a96:	0a 00                                               ..

00000a98 <__c.4906>:
     a98:	25 75 00                                            %u.

00000a9b <__c.4904>:
     a9b:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     aab:	20 00                                                .

00000aad <__c.4902>:
     aad:	0a 00                                               ..

00000aaf <__c.4900>:
     aaf:	25 75 00                                            %u.

00000ab2 <__c.4898>:
     ab2:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     ac2:	20 00                                                .

00000ac4 <__c.4896>:
     ac4:	0a 00                                               ..

00000ac6 <__c.4894>:
     ac6:	25 75 00                                            %u.

00000ac9 <__c.4892>:
     ac9:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     ad9:	74 72 6f 6c 3a 20 00                                trol: .

00000ae0 <__c.4890>:
     ae0:	0a 00                                               ..

00000ae2 <__c.4888>:
     ae2:	25 75 00                                            %u.

00000ae5 <__c.4886>:
     ae5:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     af5:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000afe <__c.4884>:
     afe:	0a 00                                               ..

00000b00 <__c.4882>:
     b00:	25 30 32 58 00                                      %02X.

00000b05 <__c.4880>:
     b05:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     b15:	77 3a 20 00                                         w: .

00000b19 <__c.4877>:
     b19:	0a 00                                               ..

00000b1b <__c.4875>:
     b1b:	25 75 00                                            %u.

00000b1e <__c.4873>:
     b1e:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000b27 <__c.4871>:
     b27:	0a 00                                               ..

00000b29 <__c.4869>:
     b29:	25 75 00                                            %u.

00000b2c <__c.4867>:
     b2c:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000b38 <__c.4865>:
     b38:	0a 00                                               ..

00000b3a <__c.4863>:
     b3a:	25 75 00                                            %u.

00000b3d <__c.4861>:
     b3d:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000b47 <__c.4859>:
     b47:	0a 00                                               ..

00000b49 <__c.4857>:
     b49:	25 75 00                                            %u.

00000b4c <__c.4855>:
     b4c:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000b56 <__c.4853>:
     b56:	0a 00                                               ..

00000b58 <__c.4851>:
     b58:	25 30 32 58 00                                      %02X.

00000b5d <__c.4849>:
     b5d:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     b6d:	3a 20 00                                            : .

00000b70 <__c.4846>:
     b70:	0a 00                                               ..

00000b72 <__c.4844>:
     b72:	25 75 00                                            %u.

00000b75 <__c.4842>:
     b75:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000b85 <__c.5007>:
     b85:	3f 00                                               ?.

00000b87 <__c.4998>:
     b87:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000b92 <__c.4996>:
     b92:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000b9c <__c.4993>:
     b9c:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     bac:	25 30 34 6c 58 0a 00                                %04lX..

00000bb3 <__c.4991>:
     bb3:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     bc3:	58 0a 00                                            X..

00000bc6 <__c.4989>:
     bc6:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     bd6:	58 0a 00                                            X..

00000bd9 <__c.4987>:
     bd9:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     be9:	6c 3a 20 25 58 0a 00                                l: %X..

00000bf0 <__c.4985>:
     bf0:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     c00:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000c0a <__c.4983>:
     c0a:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000c18 <__c.4980>:
     c18:	47 43 43 3a 20 34 2e 39 2e 32 20 41 56 52 2d 4c     GCC: 4.9.2 AVR-L
     c28:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     c38:	52 5f 41 52 43 48 3a 20 61 76 72 35 31 0a 00        R_ARCH: avr51..

00000c47 <__c.4978>:
     c47:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     c57:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     c67:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     c77:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 32     E COMMAND NKRO 2
     c87:	30 34 38 0a 00                                      048..

00000c8c <__c.4976>:
     c8c:	42 55 49 4c 44 3a 20 37 66 61 30 34 30 36 20 28     BUILD: 7fa0406 (
     c9c:	32 31 3a 31 35 3a 32 30 20 41 70 72 20 31 31 20     21:15:20 Apr 11 
     cac:	32 30 31 37 29 0a 00                                2017)..

00000cb3 <__c.4974>:
     cb3:	56 49 44 3a 20 30 78 46 45 45 44 28 46 72 65 64     VID: 0xFEED(Fred
     cc3:	48 29 20 50 49 44 3a 20 30 78 36 30 36 30 28 46     H) PID: 0x6060(F
     cd3:	72 65 64 27 73 20 53 49 4e 41 50 29 20 56 45 52     red's SINAP) VER
     ce3:	3a 20 30 78 30 30 30 31 0a 00                       : 0x0001..

00000ced <__c.4972>:
     ced:	44 45 53 43 3a 20 43 75 73 74 6f 6d 20 4b 65 79     DESC: Custom Key
     cfd:	62 6f 61 72 64 0a 00                                board..

00000d04 <__c.4970>:
     d04:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000d13 <__c.4967>:
     d13:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000d20 <__c.4965>:
     d20:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000d2c <__c.4962>:
     d2c:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000d3c <__c.4960>:
     d3c:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000d4b <__c.4957>:
     d4b:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000d59 <__c.4955>:
     d59:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000d66 <__c.4952>:
     d66:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000d72 <__c.4950>:
     d72:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000d7f <__c.4947>:
     d7f:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     d8f:	00                                                  .

00000d90 <__c.4944>:
     d90:	43 3e 20 00                                         C> .

00000d94 <__c.4938>:
     d94:	65 65 63 6f 6e 66 69 67 3a 0a 00 00                 eeconfig:...

00000da0 <__ctors_end>:
     da0:	11 24       	eor	r1, r1
     da2:	1f be       	out	0x3f, r1	; 63
     da4:	cf ef       	ldi	r28, 0xFF	; 255
     da6:	d0 e2       	ldi	r29, 0x20	; 32
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	cd bf       	out	0x3d, r28	; 61

00000dac <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     dac:	04 b6       	in	r0, 0x34	; 52
     dae:	03 fe       	sbrs	r0, 3
     db0:	27 c0       	rjmp	.+78     	; 0xe00 <__do_copy_data>
     db2:	80 91 e6 01 	lds	r24, 0x01E6
     db6:	90 91 e7 01 	lds	r25, 0x01E7
     dba:	a0 91 e8 01 	lds	r26, 0x01E8
     dbe:	b0 91 e9 01 	lds	r27, 0x01E9
     dc2:	87 30       	cpi	r24, 0x07	; 7
     dc4:	90 4b       	sbci	r25, 0xB0	; 176
     dc6:	a7 40       	sbci	r26, 0x07	; 7
     dc8:	b0 4b       	sbci	r27, 0xB0	; 176
     dca:	d1 f4       	brne	.+52     	; 0xe00 <__do_copy_data>
        reset_key = 0;
     dcc:	10 92 e6 01 	sts	0x01E6, r1
     dd0:	10 92 e7 01 	sts	0x01E7, r1
     dd4:	10 92 e8 01 	sts	0x01E8, r1
     dd8:	10 92 e9 01 	sts	0x01E9, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     ddc:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     dde:	84 b7       	in	r24, 0x34	; 52
     de0:	87 7f       	andi	r24, 0xF7	; 247
     de2:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	a8 95       	wdr
     dea:	80 91 60 00 	lds	r24, 0x0060
     dee:	88 61       	ori	r24, 0x18	; 24
     df0:	80 93 60 00 	sts	0x0060, r24
     df4:	10 92 60 00 	sts	0x0060, r1
     df8:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     dfa:	e0 e0       	ldi	r30, 0x00	; 0
     dfc:	fc ef       	ldi	r31, 0xFC	; 252
     dfe:	09 95       	icall

00000e00 <__do_copy_data>:
     e00:	11 e0       	ldi	r17, 0x01	; 1
     e02:	a0 e0       	ldi	r26, 0x00	; 0
     e04:	b1 e0       	ldi	r27, 0x01	; 1
     e06:	e0 e0       	ldi	r30, 0x00	; 0
     e08:	f7 e5       	ldi	r31, 0x57	; 87
     e0a:	00 e0       	ldi	r16, 0x00	; 0
     e0c:	0b bf       	out	0x3b, r16	; 59
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <__do_copy_data+0x14>
     e10:	07 90       	elpm	r0, Z+
     e12:	0d 92       	st	X+, r0
     e14:	a8 33       	cpi	r26, 0x38	; 56
     e16:	b1 07       	cpc	r27, r17
     e18:	d9 f7       	brne	.-10     	; 0xe10 <__do_copy_data+0x10>

00000e1a <__do_clear_bss>:
     e1a:	21 e0       	ldi	r18, 0x01	; 1
     e1c:	a8 e3       	ldi	r26, 0x38	; 56
     e1e:	b1 e0       	ldi	r27, 0x01	; 1
     e20:	01 c0       	rjmp	.+2      	; 0xe24 <.do_clear_bss_start>

00000e22 <.do_clear_bss_loop>:
     e22:	1d 92       	st	X+, r1

00000e24 <.do_clear_bss_start>:
     e24:	a6 3e       	cpi	r26, 0xE6	; 230
     e26:	b2 07       	cpc	r27, r18
     e28:	e1 f7       	brne	.-8      	; 0xe22 <.do_clear_bss_loop>
     e2a:	0e 94 46 0c 	call	0x188c	; 0x188c <main>
     e2e:	0c 94 7e 2b 	jmp	0x56fc	; 0x56fc <_exit>

00000e32 <__bad_interrupt>:
     e32:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000e36 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     e36:	ff 93       	push	r31
	push	ZL
     e38:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     e3a:	e0 91 38 01 	lds	r30, 0x0138
	lds	ZH, xfunc_out+1	;/
     e3e:	f0 91 39 01 	lds	r31, 0x0139
	sbiw	ZL, 0		;Skip if null
     e42:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     e44:	09 f0       	breq	.+2      	; 0xe48 <xputc+0x12>
	icall
     e46:	09 95       	icall
2:	pop	ZL
     e48:	ef 91       	pop	r30
	pop	ZH
     e4a:	ff 91       	pop	r31
	ret
     e4c:	08 95       	ret

00000e4e <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     e4e:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     e50:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     e52:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     e54:	11 f0       	breq	.+4      	; 0xe5a <xputs+0xc>
	rcall	xputc
     e56:	ef df       	rcall	.-34     	; 0xe36 <xputc>
	rjmp	1b
     e58:	fb cf       	rjmp	.-10     	; 0xe50 <xputs+0x2>
2:	ret
     e5a:	08 95       	ret

00000e5c <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     e5c:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     e5e:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     e60:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     e62:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     e64:	0c c0       	rjmp	.+24     	; 0xe7e <xitoa+0x22>
	neg	r20		;
     e66:	41 95       	neg	r20
	sbrs	r25, 7		;
     e68:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     e6a:	09 c0       	rjmp	.+18     	; 0xe7e <xitoa+0x22>
	ldi	r30, '-'	;
     e6c:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     e6e:	60 95       	com	r22
	com	r23		;
     e70:	70 95       	com	r23
	com	r24		;
     e72:	80 95       	com	r24
	com	r25		;
     e74:	90 95       	com	r25
	adc	r22, r1		;
     e76:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     e78:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     e7a:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     e7c:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     e7e:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <xitoa+0x2a>
	neg	r18		;
     e82:	21 95       	neg	r18
	ldi	r19, '0'	;/
     e84:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     e86:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     e88:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     e8a:	66 0f       	add	r22, r22
	rol	r23		;
     e8c:	77 1f       	adc	r23, r23
	rol	r24		;
     e8e:	88 1f       	adc	r24, r24
	rol	r25		;
     e90:	99 1f       	adc	r25, r25
	rol	r26		;
     e92:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     e94:	a4 17       	cp	r26, r20
	brcs	3f		;
     e96:	10 f0       	brcs	.+4      	; 0xe9c <xitoa+0x40>
	sub	r26, r20	;
     e98:	a4 1b       	sub	r26, r20
	inc	r22		;
     e9a:	63 95       	inc	r22
3:	dec	r21		;
     e9c:	5a 95       	dec	r21
	brne	2b		;/
     e9e:	a9 f7       	brne	.-22     	; 0xe8a <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     ea0:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     ea2:	08 f0       	brcs	.+2      	; 0xea6 <xitoa+0x4a>
	subi	r26, -7		;
     ea4:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     ea6:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     ea8:	af 93       	push	r26
	inc	r31		;/
     eaa:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     eac:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     eae:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     eb0:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     eb2:	91 05       	cpc	r25, r1
	brne	1b		;/
     eb4:	41 f7       	brne	.-48     	; 0xe86 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     eb6:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     eb8:	11 f4       	brne	.+4      	; 0xebe <xitoa+0x62>
	push	r30		;
     eba:	ef 93       	push	r30
	inc	r31		;/
     ebc:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     ebe:	f2 17       	cp	r31, r18
	brcc	6f		;
     ec0:	18 f4       	brcc	.+6      	; 0xec8 <xitoa+0x6c>
	push	r19		;
     ec2:	3f 93       	push	r19
	inc	r31		;
     ec4:	f3 95       	inc	r31
	rjmp	5b		;/
     ec6:	fb cf       	rjmp	.-10     	; 0xebe <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     ec8:	8f 91       	pop	r24
	rcall	xputc		;
     eca:	b5 df       	rcall	.-150    	; 0xe36 <xputc>
	dec	r31		;
     ecc:	fa 95       	dec	r31
	brne	6b		;/
     ece:	e1 f7       	brne	.-8      	; 0xec8 <xitoa+0x6c>

	ret
     ed0:	08 95       	ret

00000ed2 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     ed2:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     ed4:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     ed6:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     ed8:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     eda:	21 f0       	breq	.+8      	; 0xee4 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     edc:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     ede:	19 f0       	breq	.+6      	; 0xee6 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     ee0:	aa df       	rcall	.-172    	; 0xe36 <xputc>
	rjmp	0b		;/
     ee2:	f9 cf       	rjmp	.-14     	; 0xed6 <xvprintf+0x4>
90:	ret
     ee4:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     ee6:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     ee8:	e8 94       	clt
	_LPMI	r21		;Get flags
     eea:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     eec:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     eee:	c1 f3       	breq	.-16     	; 0xee0 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     ef0:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     ef2:	11 f4       	brne	.+4      	; 0xef8 <xvprintf+0x26>
	set			;/
     ef4:	68 94       	set
22:	_LPMI	r21		;Get width
     ef6:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     ef8:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     efa:	48 f4       	brcc	.+18     	; 0xf0e <xvprintf+0x3c>
	subi	r21, '0'	;
     efc:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     efe:	90 f3       	brcs	.-28     	; 0xee4 <xvprintf+0x12>
	lsl	r18		;
     f00:	22 0f       	add	r18, r18
	mov	r0, r18		;
     f02:	02 2e       	mov	r0, r18
	lsl	r18		;
     f04:	22 0f       	add	r18, r18
	lsl	r18		;
     f06:	22 0f       	add	r18, r18
	add	r18, r0		;
     f08:	20 0d       	add	r18, r0
	add	r18, r21	;
     f0a:	25 0f       	add	r18, r21
	rjmp	22b		;/
     f0c:	f4 cf       	rjmp	.-24     	; 0xef6 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     f0e:	0e f4       	brtc	.+2      	; 0xf12 <xvprintf+0x40>
	neg	r18		;
     f10:	21 95       	neg	r18
25:	ld	r24, Y+		;
     f12:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     f14:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     f16:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     f18:	19 f3       	breq	.-58     	; 0xee0 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     f1a:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     f1c:	29 f1       	breq	.+74     	; 0xf68 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     f1e:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     f20:	59 f1       	breq	.+86     	; 0xf78 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     f22:	bc 01       	movw	r22, r24
	clr	r24		;
     f24:	88 27       	eor	r24, r24
	clr	r25		;
     f26:	99 27       	eor	r25, r25
	clt			;/
     f28:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     f2a:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     f2c:	21 f4       	brne	.+8      	; 0xf36 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     f2e:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     f30:	99 91       	ld	r25, Y+
	set			;
     f32:	68 94       	set
	_LPMI	r21		;/
     f34:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     f36:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     f38:	39 f4       	brne	.+14     	; 0xf48 <xvprintf+0x76>
	ldi	r20, -10	;
     f3a:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     f3c:	7e f0       	brts	.+30     	; 0xf5c <xvprintf+0x8a>
	sbrs	r23, 7		;
     f3e:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     f40:	0d c0       	rjmp	.+26     	; 0xf5c <xvprintf+0x8a>
	ldi	r24, -1		;
     f42:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     f44:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     f46:	0a c0       	rjmp	.+20     	; 0xf5c <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     f48:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     f4a:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     f4c:	39 f0       	breq	.+14     	; 0xf5c <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     f4e:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     f50:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     f52:	21 f0       	breq	.+8      	; 0xf5c <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     f54:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     f56:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     f58:	09 f0       	breq	.+2      	; 0xf5c <xvprintf+0x8a>
	ret			;abort
     f5a:	08 95       	ret
40:	push	ZH		;Output the value
     f5c:	ff 93       	push	r31
	push	ZL		;
     f5e:	ef 93       	push	r30
	rcall	xitoa		;
     f60:	7d df       	rcall	.-262    	; 0xe5c <xitoa>
42:	pop	ZL		;
     f62:	ef 91       	pop	r30
	pop	ZH		;
     f64:	ff 91       	pop	r31
	rjmp	0b		;/
     f66:	b7 cf       	rjmp	.-146    	; 0xed6 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     f68:	ff 93       	push	r31
	push	ZL
     f6a:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     f6c:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     f6e:	81 91       	ld	r24, Z+
	cpi	r24, 0
     f70:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     f72:	b9 f3       	breq	.-18     	; 0xf62 <xvprintf+0x90>
	rcall	xputc
     f74:	60 df       	rcall	.-320    	; 0xe36 <xputc>
	rjmp	51b
     f76:	fb cf       	rjmp	.-10     	; 0xf6e <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     f78:	ff 93       	push	r31
	push	ZL
     f7a:	ef 93       	push	r30
	rcall	xputs
     f7c:	68 df       	rcall	.-304    	; 0xe4e <xputs>
	rjmp	42b
     f7e:	f1 cf       	rjmp	.-30     	; 0xf62 <xvprintf+0x90>

00000f80 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     f80:	df 93       	push	r29
	push	YL
     f82:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     f84:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     f86:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     f88:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     f8a:	a3 df       	rcall	.-186    	; 0xed2 <xvprintf>
	pop	YL
     f8c:	cf 91       	pop	r28
	pop	YH
     f8e:	df 91       	pop	r29
	ret
     f90:	08 95       	ret

00000f92 <action_get_macro>:
    MACRO_6,
    MACRO_7,
};

const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt) {
    keyevent_t event = record->event;
     f92:	fc 01       	movw	r30, r24
     f94:	82 81       	ldd	r24, Z+2	; 0x02
    switch (id) {
     f96:	46 2f       	mov	r20, r22
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	48 30       	cpi	r20, 0x08	; 8
     f9c:	51 05       	cpc	r21, r1
     f9e:	68 f5       	brcc	.+90     	; 0xffa <action_get_macro+0x68>
     fa0:	fa 01       	movw	r30, r20
     fa2:	e4 5b       	subi	r30, 0xB4	; 180
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	0c 94 30 2b 	jmp	0x5660	; 0x5660 <__tablejump2__>
        case MACRO_0:
            return (event.pressed ?
                    MACRO( END ) :
     faa:	81 11       	cpse	r24, r1
     fac:	29 c0       	rjmp	.+82     	; 0x1000 <action_get_macro+0x6e>
     fae:	8a ee       	ldi	r24, 0xEA	; 234
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	08 95       	ret
                    MACRO( END ));
        case MACRO_1:
            return (event.pressed ?
                    MACRO( END ) :
     fb4:	81 11       	cpse	r24, r1
     fb6:	27 c0       	rjmp	.+78     	; 0x1006 <action_get_macro+0x74>
     fb8:	88 ee       	ldi	r24, 0xE8	; 232
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	08 95       	ret
                    MACRO( END ));
        case MACRO_2:
            return (event.pressed ?
                    MACRO( END ) :
     fbe:	81 11       	cpse	r24, r1
     fc0:	25 c0       	rjmp	.+74     	; 0x100c <action_get_macro+0x7a>
     fc2:	86 ee       	ldi	r24, 0xE6	; 230
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	08 95       	ret
                    MACRO( END ));
        case MACRO_3:
            return (event.pressed ?
                    MACRO( END ) :
     fc8:	81 11       	cpse	r24, r1
     fca:	23 c0       	rjmp	.+70     	; 0x1012 <action_get_macro+0x80>
     fcc:	84 ee       	ldi	r24, 0xE4	; 228
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	08 95       	ret
                    MACRO( END ));
        case MACRO_4:
            return (event.pressed ?
                    MACRO( END ) :
     fd2:	81 11       	cpse	r24, r1
     fd4:	21 c0       	rjmp	.+66     	; 0x1018 <action_get_macro+0x86>
     fd6:	82 ee       	ldi	r24, 0xE2	; 226
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	08 95       	ret
                    MACRO( END ));
        case MACRO_5:
            return (event.pressed ?
                    MACRO( END ) :
     fdc:	81 11       	cpse	r24, r1
     fde:	1f c0       	rjmp	.+62     	; 0x101e <action_get_macro+0x8c>
     fe0:	80 ee       	ldi	r24, 0xE0	; 224
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	08 95       	ret
                    MACRO( END ));
        case MACRO_6:
            return (event.pressed ?
                    MACRO( END ) :
     fe6:	81 11       	cpse	r24, r1
     fe8:	1d c0       	rjmp	.+58     	; 0x1024 <action_get_macro+0x92>
     fea:	8e ed       	ldi	r24, 0xDE	; 222
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	08 95       	ret
                    MACRO( END ));
        case MACRO_7:
            return (event.pressed ?
                    MACRO( END ) :
     ff0:	81 11       	cpse	r24, r1
     ff2:	1b c0       	rjmp	.+54     	; 0x102a <action_get_macro+0x98>
     ff4:	8c ed       	ldi	r24, 0xDC	; 220
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	08 95       	ret
                    MACRO( END ));
    }
    return MACRO_NONE;
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	08 95       	ret
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt) {
    keyevent_t event = record->event;
    switch (id) {
        case MACRO_0:
            return (event.pressed ?
                    MACRO( END ) :
    1000:	8b ee       	ldi	r24, 0xEB	; 235
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	08 95       	ret
                    MACRO( END ));
        case MACRO_1:
            return (event.pressed ?
                    MACRO( END ) :
    1006:	89 ee       	ldi	r24, 0xE9	; 233
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	08 95       	ret
                    MACRO( END ));
        case MACRO_2:
            return (event.pressed ?
                    MACRO( END ) :
    100c:	87 ee       	ldi	r24, 0xE7	; 231
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	08 95       	ret
                    MACRO( END ));
        case MACRO_3:
            return (event.pressed ?
                    MACRO( END ) :
    1012:	85 ee       	ldi	r24, 0xE5	; 229
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	08 95       	ret
                    MACRO( END ));
        case MACRO_4:
            return (event.pressed ?
                    MACRO( END ) :
    1018:	83 ee       	ldi	r24, 0xE3	; 227
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	08 95       	ret
                    MACRO( END ));
        case MACRO_5:
            return (event.pressed ?
                    MACRO( END ) :
    101e:	81 ee       	ldi	r24, 0xE1	; 225
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	08 95       	ret
                    MACRO( END ));
        case MACRO_6:
            return (event.pressed ?
                    MACRO( END ) :
    1024:	8f ed       	ldi	r24, 0xDF	; 223
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	08 95       	ret
                    MACRO( END ));
        case MACRO_7:
            return (event.pressed ?
                    MACRO( END ) :
    102a:	8d ed       	ldi	r24, 0xDD	; 221
    102c:	90 e0       	ldi	r25, 0x00	; 0
                    MACRO( END ));
    }
    return MACRO_NONE;
}
    102e:	08 95       	ret

00001030 <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    1030:	9e e0       	ldi	r25, 0x0E	; 14
    1032:	79 9f       	mul	r23, r25
    1034:	f0 01       	movw	r30, r0
    1036:	11 24       	eor	r1, r1
    1038:	96 e4       	ldi	r25, 0x46	; 70
    103a:	89 9f       	mul	r24, r25
    103c:	e0 0d       	add	r30, r0
    103e:	f1 1d       	adc	r31, r1
    1040:	11 24       	eor	r1, r1
    1042:	e6 0f       	add	r30, r22
    1044:	f1 1d       	adc	r31, r1
    1046:	e8 5e       	subi	r30, 0xE8	; 232
    1048:	fe 4f       	sbci	r31, 0xFE	; 254
    104a:	84 91       	lpm	r24, Z
}
    104c:	08 95       	ret

0000104e <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
    104e:	e8 2f       	mov	r30, r24
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	ee 0f       	add	r30, r30
    1054:	ff 1f       	adc	r31, r31
    1056:	e4 59       	subi	r30, 0x94	; 148
    1058:	f0 40       	sbci	r31, 0x00	; 0
}
    105a:	85 91       	lpm	r24, Z+
    105c:	94 91       	lpm	r25, Z
    105e:	08 95       	ret

00001060 <unselect_rows>:
        (PINF & (1 << 6) ? 0 : (1UL << 12)) |
        (PINF & (1 << 7) ? 0 : (1UL << 13));
}

static void unselect_rows(void) {
    DDRD  &= ~0b00011111;
    1060:	8a b1       	in	r24, 0x0a	; 10
    1062:	80 7e       	andi	r24, 0xE0	; 224
    1064:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~0b00011111;
    1066:	8b b1       	in	r24, 0x0b	; 11
    1068:	80 7e       	andi	r24, 0xE0	; 224
    106a:	8b b9       	out	0x0b, r24	; 11
    106c:	08 95       	ret

0000106e <matrix_init>:
}

void matrix_init(void)
{
    // disable JTAG
    MCUCR |= (1 << JTD);
    106e:	85 b7       	in	r24, 0x35	; 53
    1070:	80 68       	ori	r24, 0x80	; 128
    1072:	85 bf       	out	0x35, r24	; 53
    MCUCR |= (1 << JTD);
    1074:	85 b7       	in	r24, 0x35	; 53
    1076:	80 68       	ori	r24, 0x80	; 128
    1078:	85 bf       	out	0x35, r24	; 53

    // initialize row and col
    unselect_rows();
    107a:	0e 94 30 08 	call	0x1060	; 0x1060 <unselect_rows>
    }
    return count;
}

static void init_cols(void) {
    DDRB  &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7);
    107e:	84 b1       	in	r24, 0x04	; 4
    1080:	14 b8       	out	0x04, r1	; 4
    PORTB |=  (1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7);
    1082:	85 b1       	in	r24, 0x05	; 5
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	85 b9       	out	0x05, r24	; 5
    DDRF  &= ~(1 << 0 | 1 << 1 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7);
    1088:	80 b3       	in	r24, 0x10	; 16
    108a:	8c 70       	andi	r24, 0x0C	; 12
    108c:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1 << 0 | 1 << 1 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7);
    108e:	81 b3       	in	r24, 0x11	; 17
    1090:	83 6f       	ori	r24, 0xF3	; 243
    1092:	81 bb       	out	0x11, r24	; 17
    1094:	e4 e4       	ldi	r30, 0x44	; 68
    1096:	f1 e0       	ldi	r31, 0x01	; 1
    1098:	aa e3       	ldi	r26, 0x3A	; 58
    109a:	b1 e0       	ldi	r27, 0x01	; 1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
    109c:	11 92       	st	Z+, r1
    109e:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
    10a0:	1d 92       	st	X+, r1
    10a2:	1d 92       	st	X+, r1
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	ee 34       	cpi	r30, 0x4E	; 78
    10a8:	f8 07       	cpc	r31, r24
    10aa:	c1 f7       	brne	.-16     	; 0x109c <matrix_init+0x2e>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
    10ac:	08 95       	ret

000010ae <matrix_scan>:

uint8_t matrix_scan(void)
{
    10ae:	bf 92       	push	r11
    10b0:	cf 92       	push	r12
    10b2:	df 92       	push	r13
    10b4:	ef 92       	push	r14
    10b6:	ff 92       	push	r15
    10b8:	0f 93       	push	r16
    10ba:	1f 93       	push	r17
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	0a e3       	ldi	r16, 0x3A	; 58
    10c2:	11 e0       	ldi	r17, 0x01	; 1
    10c4:	e8 01       	movw	r28, r16
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    10c6:	b1 2c       	mov	r11, r1
    10c8:	dd 24       	eor	r13, r13
    10ca:	d3 94       	inc	r13
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
    10cc:	e5 e0       	ldi	r30, 0x05	; 5
    10ce:	ce 2e       	mov	r12, r30
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    10d0:	f1 e7       	ldi	r31, 0x71	; 113
    10d2:	ef 2e       	mov	r14, r31
    10d4:	f3 e0       	ldi	r31, 0x03	; 3
    10d6:	ff 2e       	mov	r15, r31
    DDRD  &= ~0b00011111;
    PORTD &= ~0b00011111;
}

static void select_row(uint8_t row) {
    switch (row) {
    10d8:	82 e0       	ldi	r24, 0x02	; 2
    10da:	b8 16       	cp	r11, r24
    10dc:	91 f0       	breq	.+36     	; 0x1102 <matrix_scan+0x54>
    10de:	8b 15       	cp	r24, r11
    10e0:	20 f0       	brcs	.+8      	; 0x10ea <matrix_scan+0x3c>
    10e2:	91 e0       	ldi	r25, 0x01	; 1
    10e4:	b9 16       	cp	r11, r25
    10e6:	51 f0       	breq	.+20     	; 0x10fc <matrix_scan+0x4e>
    10e8:	06 c0       	rjmp	.+12     	; 0x10f6 <matrix_scan+0x48>
    10ea:	a3 e0       	ldi	r26, 0x03	; 3
    10ec:	ba 16       	cp	r11, r26
    10ee:	61 f0       	breq	.+24     	; 0x1108 <matrix_scan+0x5a>
    10f0:	b4 e0       	ldi	r27, 0x04	; 4
    10f2:	bb 16       	cp	r11, r27
    10f4:	61 f0       	breq	.+24     	; 0x110e <matrix_scan+0x60>
        case 0:
            DDRD  |=  (1 << 0);
    10f6:	50 9a       	sbi	0x0a, 0	; 10
            PORTD &= ~(1 << 0);
    10f8:	58 98       	cbi	0x0b, 0	; 11
    10fa:	0b c0       	rjmp	.+22     	; 0x1112 <matrix_scan+0x64>
            break;
        case 1:
            DDRD  |=  (1 << 1);
    10fc:	51 9a       	sbi	0x0a, 1	; 10
            PORTD &= ~(1 << 1);
    10fe:	59 98       	cbi	0x0b, 1	; 11
    1100:	08 c0       	rjmp	.+16     	; 0x1112 <matrix_scan+0x64>
            break;
        case 2:
            DDRD  |=  (1 << 2);
    1102:	52 9a       	sbi	0x0a, 2	; 10
            PORTD &= ~(1 << 2);
    1104:	5a 98       	cbi	0x0b, 2	; 11
    1106:	05 c0       	rjmp	.+10     	; 0x1112 <matrix_scan+0x64>
            break;
        case 3:
            DDRD  |=  (1 << 3);
    1108:	53 9a       	sbi	0x0a, 3	; 10
            PORTD &= ~(1 << 3);
    110a:	5b 98       	cbi	0x0b, 3	; 11
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <matrix_scan+0x64>
            break;
        case 4:
            DDRD  |=  (1 << 4);
    110e:	54 9a       	sbi	0x0a, 4	; 10
            PORTD &= ~(1 << 4);
    1110:	5c 98       	cbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1112:	80 ea       	ldi	r24, 0xA0	; 160
    1114:	8a 95       	dec	r24
    1116:	f1 f7       	brne	.-4      	; 0x1114 <matrix_scan+0x66>
    PORTF |=  (1 << 0 | 1 << 1 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7);
}

static matrix_row_t read_cols(void) {
    return
        (PINB & (1 << 0) ? 0 : (1UL <<  0)) |
    1118:	83 b1       	in	r24, 0x03	; 3
    111a:	81 70       	andi	r24, 0x01	; 1
    111c:	8d 25       	eor	r24, r13
    111e:	90 e0       	ldi	r25, 0x00	; 0
    DDRF  &= ~(1 << 0 | 1 << 1 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7);
    PORTF |=  (1 << 0 | 1 << 1 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7);
}

static matrix_row_t read_cols(void) {
    return
    1120:	19 99       	sbic	0x03, 1	; 3
    1122:	03 c0       	rjmp	.+6      	; 0x112a <matrix_scan+0x7c>
    1124:	22 e0       	ldi	r18, 0x02	; 2
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	02 c0       	rjmp	.+4      	; 0x112e <matrix_scan+0x80>
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	82 2b       	or	r24, r18
    1130:	93 2b       	or	r25, r19
    1132:	1a 99       	sbic	0x03, 2	; 3
    1134:	03 c0       	rjmp	.+6      	; 0x113c <matrix_scan+0x8e>
    1136:	24 e0       	ldi	r18, 0x04	; 4
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <matrix_scan+0x92>
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	82 2b       	or	r24, r18
    1142:	93 2b       	or	r25, r19
    1144:	1b 99       	sbic	0x03, 3	; 3
    1146:	03 c0       	rjmp	.+6      	; 0x114e <matrix_scan+0xa0>
    1148:	28 e0       	ldi	r18, 0x08	; 8
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <matrix_scan+0xa4>
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	82 2b       	or	r24, r18
    1154:	93 2b       	or	r25, r19
    1156:	1c 99       	sbic	0x03, 4	; 3
    1158:	03 c0       	rjmp	.+6      	; 0x1160 <matrix_scan+0xb2>
    115a:	e0 e1       	ldi	r30, 0x10	; 16
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <matrix_scan+0xb6>
    1160:	e0 e0       	ldi	r30, 0x00	; 0
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	8e 2b       	or	r24, r30
    1166:	9f 2b       	or	r25, r31
    1168:	1d 99       	sbic	0x03, 5	; 3
    116a:	03 c0       	rjmp	.+6      	; 0x1172 <matrix_scan+0xc4>
    116c:	60 e2       	ldi	r22, 0x20	; 32
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <matrix_scan+0xc8>
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	70 e0       	ldi	r23, 0x00	; 0
    1176:	86 2b       	or	r24, r22
    1178:	97 2b       	or	r25, r23
    117a:	1e 99       	sbic	0x03, 6	; 3
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <matrix_scan+0xd6>
    117e:	20 e4       	ldi	r18, 0x40	; 64
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <matrix_scan+0xda>
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	ac 01       	movw	r20, r24
    118a:	42 2b       	or	r20, r18
    118c:	53 2b       	or	r21, r19
        (PINB & (1 << 2) ? 0 : (1UL <<  2)) |
        (PINB & (1 << 3) ? 0 : (1UL <<  3)) |
        (PINB & (1 << 4) ? 0 : (1UL <<  4)) |
        (PINB & (1 << 5) ? 0 : (1UL <<  5)) |
        (PINB & (1 << 6) ? 0 : (1UL <<  6)) |
        (PINB & (1 << 7) ? 0 : (1UL <<  7)) |
    118e:	23 b1       	in	r18, 0x03	; 3
    DDRF  &= ~(1 << 0 | 1 << 1 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7);
    PORTF |=  (1 << 0 | 1 << 1 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7);
}

static matrix_row_t read_cols(void) {
    return
    1190:	02 2e       	mov	r0, r18
    1192:	00 0c       	add	r0, r0
    1194:	33 0b       	sbc	r19, r19
    1196:	20 95       	com	r18
    1198:	30 95       	com	r19
    119a:	c9 01       	movw	r24, r18
    119c:	88 27       	eor	r24, r24
    119e:	99 0f       	add	r25, r25
    11a0:	88 1f       	adc	r24, r24
    11a2:	99 27       	eor	r25, r25
    11a4:	96 95       	lsr	r25
    11a6:	98 2f       	mov	r25, r24
    11a8:	88 27       	eor	r24, r24
    11aa:	97 95       	ror	r25
    11ac:	87 95       	ror	r24
    11ae:	84 2b       	or	r24, r20
    11b0:	95 2b       	or	r25, r21
    11b2:	78 99       	sbic	0x0f, 0	; 15
    11b4:	03 c0       	rjmp	.+6      	; 0x11bc <matrix_scan+0x10e>
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	31 e0       	ldi	r19, 0x01	; 1
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <matrix_scan+0x112>
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	82 2b       	or	r24, r18
    11c2:	93 2b       	or	r25, r19
    11c4:	79 99       	sbic	0x0f, 1	; 15
    11c6:	03 c0       	rjmp	.+6      	; 0x11ce <matrix_scan+0x120>
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	32 e0       	ldi	r19, 0x02	; 2
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <matrix_scan+0x124>
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	82 2b       	or	r24, r18
    11d4:	93 2b       	or	r25, r19
    11d6:	7c 99       	sbic	0x0f, 4	; 15
    11d8:	03 c0       	rjmp	.+6      	; 0x11e0 <matrix_scan+0x132>
    11da:	e0 e0       	ldi	r30, 0x00	; 0
    11dc:	f4 e0       	ldi	r31, 0x04	; 4
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <matrix_scan+0x136>
    11e0:	e0 e0       	ldi	r30, 0x00	; 0
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	8e 2b       	or	r24, r30
    11e6:	9f 2b       	or	r25, r31
    11e8:	7d 99       	sbic	0x0f, 5	; 15
    11ea:	03 c0       	rjmp	.+6      	; 0x11f2 <matrix_scan+0x144>
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	78 e0       	ldi	r23, 0x08	; 8
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <matrix_scan+0x148>
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	86 2b       	or	r24, r22
    11f8:	97 2b       	or	r25, r23
    11fa:	7e 99       	sbic	0x0f, 6	; 15
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <matrix_scan+0x156>
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e1       	ldi	r19, 0x10	; 16
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <matrix_scan+0x15a>
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	ac 01       	movw	r20, r24
    120a:	42 2b       	or	r20, r18
    120c:	53 2b       	or	r21, r19
        (PINF & (1 << 0) ? 0 : (1UL <<  8)) |
        (PINF & (1 << 1) ? 0 : (1UL <<  9)) |
        (PINF & (1 << 4) ? 0 : (1UL << 10)) |
        (PINF & (1 << 5) ? 0 : (1UL << 11)) |
        (PINF & (1 << 6) ? 0 : (1UL << 12)) |
        (PINF & (1 << 7) ? 0 : (1UL << 13));
    120e:	2f b1       	in	r18, 0x0f	; 15
    DDRF  &= ~(1 << 0 | 1 << 1 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7);
    PORTF |=  (1 << 0 | 1 << 1 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7);
}

static matrix_row_t read_cols(void) {
    return
    1210:	02 2e       	mov	r0, r18
    1212:	00 0c       	add	r0, r0
    1214:	33 0b       	sbc	r19, r19
    1216:	20 95       	com	r18
    1218:	30 95       	com	r19
    121a:	c9 01       	movw	r24, r18
    121c:	88 27       	eor	r24, r24
    121e:	99 0f       	add	r25, r25
    1220:	88 1f       	adc	r24, r24
    1222:	99 27       	eor	r25, r25
    1224:	98 2f       	mov	r25, r24
    1226:	88 27       	eor	r24, r24
    1228:	92 95       	swap	r25
    122a:	99 0f       	add	r25, r25
    122c:	90 7e       	andi	r25, 0xE0	; 224
    122e:	84 2b       	or	r24, r20
    1230:	95 2b       	or	r25, r21
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
    1232:	28 81       	ld	r18, Y
    1234:	39 81       	ldd	r19, Y+1	; 0x01
    1236:	28 17       	cp	r18, r24
    1238:	39 07       	cpc	r19, r25
    123a:	41 f1       	breq	.+80     	; 0x128c <matrix_scan+0x1de>
            matrix_debouncing[i] = cols;
    123c:	99 83       	std	Y+1, r25	; 0x01
    123e:	88 83       	st	Y, r24
            if (debouncing) {
    1240:	80 91 00 01 	lds	r24, 0x0100
    1244:	88 23       	and	r24, r24
    1246:	01 f1       	breq	.+64     	; 0x1288 <matrix_scan+0x1da>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    1248:	80 91 c7 01 	lds	r24, 0x01C7
    124c:	80 ff       	sbrs	r24, 0
    124e:	04 c0       	rjmp	.+8      	; 0x1258 <matrix_scan+0x1aa>
    1250:	86 e7       	ldi	r24, 0x76	; 118
    1252:	93 e0       	ldi	r25, 0x03	; 3
    1254:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    1258:	80 91 c7 01 	lds	r24, 0x01C7
    125c:	80 ff       	sbrs	r24, 0
    125e:	0c c0       	rjmp	.+24     	; 0x1278 <matrix_scan+0x1ca>
    1260:	80 91 00 01 	lds	r24, 0x0100
    1264:	1f 92       	push	r1
    1266:	8f 93       	push	r24
    1268:	ff 92       	push	r15
    126a:	ef 92       	push	r14
    126c:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	80 91 c7 01 	lds	r24, 0x01C7
    127c:	80 ff       	sbrs	r24, 0
    127e:	04 c0       	rjmp	.+8      	; 0x1288 <matrix_scan+0x1da>
    1280:	8f e6       	ldi	r24, 0x6F	; 111
    1282:	93 e0       	ldi	r25, 0x03	; 3
    1284:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
            }
            debouncing = DEBOUNCE;
    1288:	c0 92 00 01 	sts	0x0100, r12
        }
        unselect_rows();
    128c:	0e 94 30 08 	call	0x1060	; 0x1060 <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    1290:	b3 94       	inc	r11
    1292:	22 96       	adiw	r28, 0x02	; 2
    1294:	95 e0       	ldi	r25, 0x05	; 5
    1296:	b9 12       	cpse	r11, r25
    1298:	1f cf       	rjmp	.-450    	; 0x10d8 <matrix_scan+0x2a>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    129a:	80 91 00 01 	lds	r24, 0x0100
    129e:	88 23       	and	r24, r24
    12a0:	c1 f0       	breq	.+48     	; 0x12d2 <matrix_scan+0x224>
        if (--debouncing) {
    12a2:	81 50       	subi	r24, 0x01	; 1
    12a4:	80 93 00 01 	sts	0x0100, r24
    12a8:	88 23       	and	r24, r24
    12aa:	39 f0       	breq	.+14     	; 0x12ba <matrix_scan+0x20c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12ac:	af e9       	ldi	r26, 0x9F	; 159
    12ae:	bf e0       	ldi	r27, 0x0F	; 15
    12b0:	11 97       	sbiw	r26, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <matrix_scan+0x202>
    12b4:	00 c0       	rjmp	.+0      	; 0x12b6 <matrix_scan+0x208>
    12b6:	00 00       	nop
    12b8:	0c c0       	rjmp	.+24     	; 0x12d2 <matrix_scan+0x224>
    12ba:	e4 e4       	ldi	r30, 0x44	; 68
    12bc:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    12be:	d8 01       	movw	r26, r16
    12c0:	8d 91       	ld	r24, X+
    12c2:	9d 91       	ld	r25, X+
    12c4:	8d 01       	movw	r16, r26
    12c6:	81 93       	st	Z+, r24
    12c8:	91 93       	st	Z+, r25

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    12ca:	b1 e0       	ldi	r27, 0x01	; 1
    12cc:	04 34       	cpi	r16, 0x44	; 68
    12ce:	1b 07       	cpc	r17, r27
    12d0:	b1 f7       	brne	.-20     	; 0x12be <matrix_scan+0x210>
            }
        }
    }

    return 1;
}
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	ff 90       	pop	r15
    12de:	ef 90       	pop	r14
    12e0:	df 90       	pop	r13
    12e2:	cf 90       	pop	r12
    12e4:	bf 90       	pop	r11
    12e6:	08 95       	ret

000012e8 <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    12e8:	e8 2f       	mov	r30, r24
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	ee 0f       	add	r30, r30
    12ee:	ff 1f       	adc	r31, r31
    12f0:	ec 5b       	subi	r30, 0xBC	; 188
    12f2:	fe 4f       	sbci	r31, 0xFE	; 254
}
    12f4:	80 81       	ld	r24, Z
    12f6:	91 81       	ldd	r25, Z+1	; 0x01
    12f8:	08 95       	ret

000012fa <matrix_print>:

void matrix_print(void)
{
    12fa:	cf 92       	push	r12
    12fc:	df 92       	push	r13
    12fe:	ef 92       	push	r14
    1300:	ff 92       	push	r15
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    130a:	88 e5       	ldi	r24, 0x58	; 88
    130c:	93 e0       	ldi	r25, 0x03	; 3
    130e:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    1312:	84 e4       	ldi	r24, 0x44	; 68
    1314:	e8 2e       	mov	r14, r24
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	f8 2e       	mov	r15, r24
    131a:	c0 e0       	ldi	r28, 0x00	; 0
    131c:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    131e:	93 e5       	ldi	r25, 0x53	; 83
    1320:	c9 2e       	mov	r12, r25
    1322:	93 e0       	ldi	r25, 0x03	; 3
    1324:	d9 2e       	mov	r13, r25
        pbin_reverse16(matrix_get_row(row));
    1326:	0a e4       	ldi	r16, 0x4A	; 74
    1328:	13 e0       	ldi	r17, 0x03	; 3

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	df 92       	push	r13
    1330:	cf 92       	push	r12
    1332:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    1336:	80 e5       	ldi	r24, 0x50	; 80
    1338:	93 e0       	ldi	r25, 0x03	; 3
    133a:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
        pbin_reverse16(matrix_get_row(row));
    133e:	f7 01       	movw	r30, r14
    1340:	81 91       	ld	r24, Z+
    1342:	91 91       	ld	r25, Z+
    1344:	7f 01       	movw	r14, r30
    1346:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <bitrev16>
    134a:	9f 93       	push	r25
    134c:	8f 93       	push	r24
    134e:	1f 93       	push	r17
    1350:	0f 93       	push	r16
    1352:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
        print("\n");
    1356:	88 e4       	ldi	r24, 0x48	; 72
    1358:	93 e0       	ldi	r25, 0x03	; 3
    135a:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    135e:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    1360:	8d b7       	in	r24, 0x3d	; 61
    1362:	9e b7       	in	r25, 0x3e	; 62
    1364:	08 96       	adiw	r24, 0x08	; 8
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	9e bf       	out	0x3e, r25	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	8d bf       	out	0x3d, r24	; 61
    1370:	c5 30       	cpi	r28, 0x05	; 5
    1372:	d1 05       	cpc	r29, r1
    1374:	d1 f6       	brne	.-76     	; 0x132a <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	ff 90       	pop	r15
    1380:	ef 90       	pop	r14
    1382:	df 90       	pop	r13
    1384:	cf 90       	pop	r12
    1386:	08 95       	ret

00001388 <led_set>:
#include <avr/io.h>
#include "stdint.h"
#include "led.h"

void led_set(uint8_t usb_led) {
    1388:	08 95       	ret

0000138a <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    138a:	80 91 61 01 	lds	r24, 0x0161
    138e:	08 95       	ret

00001390 <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    1390:	9f b7       	in	r25, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	10 92 50 01 	sts	0x0150, r1
    1398:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    139a:	90 91 dc 01 	lds	r25, 0x01DC
    139e:	94 30       	cpi	r25, 0x04	; 4
    13a0:	09 f0       	breq	.+2      	; 0x13a4 <sendchar+0x14>
    13a2:	57 c0       	rjmp	.+174    	; 0x1452 <sendchar+0xc2>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    13a4:	90 91 e9 00 	lds	r25, 0x00E9
    13a8:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    13aa:	30 91 ec 00 	lds	r19, 0x00EC
    13ae:	23 2f       	mov	r18, r19
    13b0:	21 70       	andi	r18, 0x01	; 1
    13b2:	30 fd       	sbrc	r19, 0
    13b4:	20 e8       	ldi	r18, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    13b6:	92 2b       	or	r25, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13b8:	24 e0       	ldi	r18, 0x04	; 4
    13ba:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    13be:	20 91 eb 00 	lds	r18, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    13c2:	20 ff       	sbrs	r18, 0
    13c4:	43 c0       	rjmp	.+134    	; 0x144c <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    13c6:	20 91 ee 00 	lds	r18, 0x00EE
    13ca:	27 ff       	sbrs	r18, 7
    13cc:	3f c0       	rjmp	.+126    	; 0x144c <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    13ce:	20 91 4e 01 	lds	r18, 0x014E
    13d2:	22 23       	and	r18, r18
    13d4:	21 f0       	breq	.+8      	; 0x13de <sendchar+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13d6:	20 91 e8 00 	lds	r18, 0x00E8
    13da:	25 ff       	sbrs	r18, 5
    13dc:	37 c0       	rjmp	.+110    	; 0x144c <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    timeouted = false;
    13de:	10 92 4e 01 	sts	0x014E, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    13e2:	26 e0       	ldi	r18, 0x06	; 6
    13e4:	30 91 e8 00 	lds	r19, 0x00E8
    13e8:	35 fd       	sbrc	r19, 5
    13ea:	15 c0       	rjmp	.+42     	; 0x1416 <sendchar+0x86>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    13ec:	30 91 dc 01 	lds	r19, 0x01DC
    13f0:	34 30       	cpi	r19, 0x04	; 4
    13f2:	61 f5       	brne	.+88     	; 0x144c <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    13f4:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    13f8:	35 fd       	sbrc	r19, 5
    13fa:	28 c0       	rjmp	.+80     	; 0x144c <sendchar+0xbc>
    13fc:	21 50       	subi	r18, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    13fe:	21 f4       	brne	.+8      	; 0x1408 <sendchar+0x78>
            timeouted = true;
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	80 93 4e 01 	sts	0x014E, r24
            goto ERROR_EXIT;
    1406:	22 c0       	rjmp	.+68     	; 0x144c <sendchar+0xbc>
    1408:	ef e9       	ldi	r30, 0x9F	; 159
    140a:	ff e0       	ldi	r31, 0x0F	; 15
    140c:	31 97       	sbiw	r30, 0x01	; 1
    140e:	f1 f7       	brne	.-4      	; 0x140c <sendchar+0x7c>
    1410:	00 c0       	rjmp	.+0      	; 0x1412 <sendchar+0x82>
    1412:	00 00       	nop
    1414:	e7 cf       	rjmp	.-50     	; 0x13e4 <sendchar+0x54>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1416:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    141a:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    141e:	85 fd       	sbrc	r24, 5
    1420:	0a c0       	rjmp	.+20     	; 0x1436 <sendchar+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1422:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    1426:	80 ff       	sbrs	r24, 0
    1428:	fc cf       	rjmp	.-8      	; 0x1422 <sendchar+0x92>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    142a:	80 91 e8 00 	lds	r24, 0x00E8
    142e:	8e 77       	andi	r24, 0x7E	; 126
    1430:	80 93 e8 00 	sts	0x00E8, r24
    1434:	06 c0       	rjmp	.+12     	; 0x1442 <sendchar+0xb2>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    1436:	8f b7       	in	r24, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	21 e0       	ldi	r18, 0x01	; 1
    143c:	20 93 50 01 	sts	0x0150, r18
    1440:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1442:	9f 70       	andi	r25, 0x0F	; 15
    1444:	90 93 e9 00 	sts	0x00E9, r25
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	08 95       	ret
    144c:	9f 70       	andi	r25, 0x0F	; 15
    144e:	90 93 e9 00 	sts	0x00E9, r25
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    1452:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    1454:	08 95       	ret

00001456 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	00 d0       	rcall	.+0      	; 0x145c <send_consumer+0x6>
    145c:	1f 92       	push	r1
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	9c 01       	movw	r18, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1464:	80 91 dc 01 	lds	r24, 0x01DC
    1468:	84 30       	cpi	r24, 0x04	; 4
    146a:	19 f5       	brne	.+70     	; 0x14b2 <send_consumer+0x5c>
        return;

    report_extra_t r = {
    146c:	93 e0       	ldi	r25, 0x03	; 3
    146e:	99 83       	std	Y+1, r25	; 0x01
    1470:	3b 83       	std	Y+3, r19	; 0x03
    1472:	2a 83       	std	Y+2, r18	; 0x02
    1474:	90 93 e9 00 	sts	0x00E9, r25
    1478:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    147a:	90 91 e8 00 	lds	r25, 0x00E8
    147e:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1480:	95 fd       	sbrc	r25, 5
    1482:	06 c0       	rjmp	.+12     	; 0x1490 <send_consumer+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1484:	95 ed       	ldi	r25, 0xD5	; 213
    1486:	9a 95       	dec	r25
    1488:	f1 f7       	brne	.-4      	; 0x1486 <send_consumer+0x30>
    148a:	00 00       	nop
    148c:	81 11       	cpse	r24, r1
    148e:	f5 cf       	rjmp	.-22     	; 0x147a <send_consumer+0x24>
    1490:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1494:	85 ff       	sbrs	r24, 5
    1496:	0d c0       	rjmp	.+26     	; 0x14b2 <send_consumer+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	63 e0       	ldi	r22, 0x03	; 3
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	ce 01       	movw	r24, r28
    14a2:	01 96       	adiw	r24, 0x01	; 1
    14a4:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14a8:	80 91 e8 00 	lds	r24, 0x00E8
    14ac:	8e 77       	andi	r24, 0x7E	; 126
    14ae:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <send_system+0x6>
    14c4:	1f 92       	push	r1
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    14ca:	20 91 dc 01 	lds	r18, 0x01DC
    14ce:	24 30       	cpi	r18, 0x04	; 4
    14d0:	21 f5       	brne	.+72     	; 0x151a <send_system+0x5c>
        return;

    report_extra_t r = {
    14d2:	22 e0       	ldi	r18, 0x02	; 2
    14d4:	29 83       	std	Y+1, r18	; 0x01
    14d6:	9b 83       	std	Y+3, r25	; 0x03
    14d8:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14da:	83 e0       	ldi	r24, 0x03	; 3
    14dc:	80 93 e9 00 	sts	0x00E9, r24
    14e0:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14e2:	90 91 e8 00 	lds	r25, 0x00E8
    14e6:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    14e8:	95 fd       	sbrc	r25, 5
    14ea:	06 c0       	rjmp	.+12     	; 0x14f8 <send_system+0x3a>
    14ec:	95 ed       	ldi	r25, 0xD5	; 213
    14ee:	9a 95       	dec	r25
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <send_system+0x30>
    14f2:	00 00       	nop
    14f4:	81 11       	cpse	r24, r1
    14f6:	f5 cf       	rjmp	.-22     	; 0x14e2 <send_system+0x24>
    14f8:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    14fc:	85 ff       	sbrs	r24, 5
    14fe:	0d c0       	rjmp	.+26     	; 0x151a <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	50 e0       	ldi	r21, 0x00	; 0
    1504:	63 e0       	ldi	r22, 0x03	; 3
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	ce 01       	movw	r24, r28
    150a:	01 96       	adiw	r24, 0x01	; 1
    150c:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1510:	80 91 e8 00 	lds	r24, 0x00E8
    1514:	8e 77       	andi	r24, 0x7E	; 126
    1516:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	08 95       	ret

00001526 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1526:	20 91 dc 01 	lds	r18, 0x01DC
    152a:	24 30       	cpi	r18, 0x04	; 4
    152c:	f1 f4       	brne	.+60     	; 0x156a <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    152e:	22 e0       	ldi	r18, 0x02	; 2
    1530:	20 93 e9 00 	sts	0x00E9, r18
    1534:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1536:	30 91 e8 00 	lds	r19, 0x00E8
    153a:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    153c:	35 fd       	sbrc	r19, 5
    153e:	06 c0       	rjmp	.+12     	; 0x154c <send_mouse+0x26>
    1540:	35 ed       	ldi	r19, 0xD5	; 213
    1542:	3a 95       	dec	r19
    1544:	f1 f7       	brne	.-4      	; 0x1542 <send_mouse+0x1c>
    1546:	00 00       	nop
    1548:	21 11       	cpse	r18, r1
    154a:	f5 cf       	rjmp	.-22     	; 0x1536 <send_mouse+0x10>
    154c:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1550:	25 ff       	sbrs	r18, 5
    1552:	0b c0       	rjmp	.+22     	; 0x156a <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1554:	40 e0       	ldi	r20, 0x00	; 0
    1556:	50 e0       	ldi	r21, 0x00	; 0
    1558:	65 e0       	ldi	r22, 0x05	; 5
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1560:	80 91 e8 00 	lds	r24, 0x00E8
    1564:	8e 77       	andi	r24, 0x7E	; 126
    1566:	80 93 e8 00 	sts	0x00E8, r24
    156a:	08 95       	ret

0000156c <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1570:	20 91 dc 01 	lds	r18, 0x01DC
    1574:	24 30       	cpi	r18, 0x04	; 4
    1576:	09 f0       	breq	.+2      	; 0x157a <send_keyboard+0xe>
    1578:	48 c0       	rjmp	.+144    	; 0x160a <send_keyboard+0x9e>
    157a:	ec 01       	movw	r28, r24
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    157c:	80 91 0b 01 	lds	r24, 0x010B
    1580:	88 23       	and	r24, r24
    1582:	e1 f0       	breq	.+56     	; 0x15bc <send_keyboard+0x50>
    1584:	80 91 0c 01 	lds	r24, 0x010C
    1588:	88 23       	and	r24, r24
    158a:	c1 f0       	breq	.+48     	; 0x15bc <send_keyboard+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    158c:	85 e0       	ldi	r24, 0x05	; 5
    158e:	80 93 e9 00 	sts	0x00E9, r24
    1592:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1594:	90 91 e8 00 	lds	r25, 0x00E8
    1598:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    159a:	95 fd       	sbrc	r25, 5
    159c:	06 c0       	rjmp	.+12     	; 0x15aa <send_keyboard+0x3e>
    159e:	95 e1       	ldi	r25, 0x15	; 21
    15a0:	9a 95       	dec	r25
    15a2:	f1 f7       	brne	.-4      	; 0x15a0 <send_keyboard+0x34>
    15a4:	00 00       	nop
    15a6:	81 11       	cpse	r24, r1
    15a8:	f5 cf       	rjmp	.-22     	; 0x1594 <send_keyboard+0x28>
    15aa:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    15ae:	85 ff       	sbrs	r24, 5
    15b0:	2c c0       	rjmp	.+88     	; 0x160a <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    15b2:	40 e0       	ldi	r20, 0x00	; 0
    15b4:	50 e0       	ldi	r21, 0x00	; 0
    15b6:	60 e1       	ldi	r22, 0x10	; 16
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	17 c0       	rjmp	.+46     	; 0x15ea <send_keyboard+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	80 93 e9 00 	sts	0x00E9, r24
    15c2:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    15c4:	90 91 e8 00 	lds	r25, 0x00E8
    15c8:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    15ca:	95 fd       	sbrc	r25, 5
    15cc:	06 c0       	rjmp	.+12     	; 0x15da <send_keyboard+0x6e>
    15ce:	95 ed       	ldi	r25, 0xD5	; 213
    15d0:	9a 95       	dec	r25
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <send_keyboard+0x64>
    15d4:	00 00       	nop
    15d6:	81 11       	cpse	r24, r1
    15d8:	f5 cf       	rjmp	.-22     	; 0x15c4 <send_keyboard+0x58>
    15da:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    15de:	85 ff       	sbrs	r24, 5
    15e0:	14 c0       	rjmp	.+40     	; 0x160a <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    15e2:	40 e0       	ldi	r20, 0x00	; 0
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	68 e0       	ldi	r22, 0x08	; 8
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	ce 01       	movw	r24, r28
    15ec:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15f0:	80 91 e8 00 	lds	r24, 0x00E8
    15f4:	8e 77       	andi	r24, 0x7E	; 126
    15f6:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    15fa:	80 e1       	ldi	r24, 0x10	; 16
    15fc:	fe 01       	movw	r30, r28
    15fe:	a1 e5       	ldi	r26, 0x51	; 81
    1600:	b1 e0       	ldi	r27, 0x01	; 1
    1602:	01 90       	ld	r0, Z+
    1604:	0d 92       	st	X+, r0
    1606:	8a 95       	dec	r24
    1608:	e1 f7       	brne	.-8      	; 0x1602 <send_keyboard+0x96>
}
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	08 95       	ret

00001610 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    1610:	86 eb       	ldi	r24, 0xB6	; 182
    1612:	93 e0       	ldi	r25, 0x03	; 3
    1614:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    1618:	80 91 db 01 	lds	r24, 0x01DB
    161c:	81 11       	cpse	r24, r1
    161e:	09 c0       	rjmp	.+18     	; 0x1632 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    1620:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <USB_Disable>
        USB_Init();
    1624:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1628:	80 91 e2 00 	lds	r24, 0x00E2
    162c:	84 60       	ori	r24, 0x04	; 4
    162e:	80 93 e2 00 	sts	0x00E2, r24
    1632:	08 95       	ret

00001634 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    1634:	82 eb       	ldi	r24, 0xB2	; 178
    1636:	93 e0       	ldi	r25, 0x03	; 3
    1638:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    163c:	10 92 db 01 	sts	0x01DB, r1
    1640:	08 95       	ret

00001642 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    1642:	8e ea       	ldi	r24, 0xAE	; 174
    1644:	93 e0       	ldi	r25, 0x03	; 3
    1646:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <xputs>

0000164a <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    164a:	20 91 4f 01 	lds	r18, 0x014F
    164e:	2f 5f       	subi	r18, 0xFF	; 255
    1650:	82 2f       	mov	r24, r18
    1652:	62 e3       	ldi	r22, 0x32	; 50
    1654:	0e 94 10 2b 	call	0x5620	; 0x5620 <__udivmodqi4>
    1658:	99 23       	and	r25, r25
    165a:	19 f0       	breq	.+6      	; 0x1662 <EVENT_USB_Device_StartOfFrame+0x18>
    165c:	20 93 4f 01 	sts	0x014F, r18
    1660:	08 95       	ret
    count = 0;
    1662:	10 92 4f 01 	sts	0x014F, r1

    if (!console_flush) return;
    1666:	80 91 50 01 	lds	r24, 0x0150
    166a:	88 23       	and	r24, r24
    166c:	71 f1       	breq	.+92     	; 0x16ca <EVENT_USB_Device_StartOfFrame+0x80>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    166e:	80 91 dc 01 	lds	r24, 0x01DC
    1672:	84 30       	cpi	r24, 0x04	; 4
    1674:	41 f5       	brne	.+80     	; 0x16c6 <EVENT_USB_Device_StartOfFrame+0x7c>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1676:	80 91 e9 00 	lds	r24, 0x00E9
    167a:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    167c:	20 91 ec 00 	lds	r18, 0x00EC
    1680:	92 2f       	mov	r25, r18
    1682:	91 70       	andi	r25, 0x01	; 1
    1684:	20 fd       	sbrc	r18, 0
    1686:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1688:	89 2b       	or	r24, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    168a:	94 e0       	ldi	r25, 0x04	; 4
    168c:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1690:	90 91 eb 00 	lds	r25, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1694:	90 ff       	sbrs	r25, 0
    1696:	14 c0       	rjmp	.+40     	; 0x16c0 <EVENT_USB_Device_StartOfFrame+0x76>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1698:	90 91 ee 00 	lds	r25, 0x00EE
    169c:	97 ff       	sbrs	r25, 7
    169e:	10 c0       	rjmp	.+32     	; 0x16c0 <EVENT_USB_Device_StartOfFrame+0x76>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16a0:	90 91 e8 00 	lds	r25, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    16a4:	95 ff       	sbrs	r25, 5
    16a6:	03 c0       	rjmp	.+6      	; 0x16ae <EVENT_USB_Device_StartOfFrame+0x64>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16a8:	10 92 f1 00 	sts	0x00F1, r1
    16ac:	f9 cf       	rjmp	.-14     	; 0x16a0 <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16ae:	90 91 e8 00 	lds	r25, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    16b2:	90 ff       	sbrs	r25, 0
    16b4:	05 c0       	rjmp	.+10     	; 0x16c0 <EVENT_USB_Device_StartOfFrame+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16b6:	90 91 e8 00 	lds	r25, 0x00E8
    16ba:	9e 77       	andi	r25, 0x7E	; 126
    16bc:	90 93 e8 00 	sts	0x00E8, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16c0:	8f 70       	andi	r24, 0x0F	; 15
    16c2:	80 93 e9 00 	sts	0x00E9, r24
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    16c6:	10 92 50 01 	sts	0x0150, r1
    16ca:	08 95       	ret

000016cc <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    16cc:	42 e0       	ldi	r20, 0x02	; 2
    16ce:	61 ec       	ldi	r22, 0xC1	; 193
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Endpoint_ConfigureEndpoint_Prv>
    16d6:	42 e0       	ldi	r20, 0x02	; 2
    16d8:	61 ec       	ldi	r22, 0xC1	; 193
    16da:	82 e0       	ldi	r24, 0x02	; 2
    16dc:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Endpoint_ConfigureEndpoint_Prv>
    16e0:	42 e0       	ldi	r20, 0x02	; 2
    16e2:	61 ec       	ldi	r22, 0xC1	; 193
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Endpoint_ConfigureEndpoint_Prv>
    16ea:	42 e2       	ldi	r20, 0x22	; 34
    16ec:	61 ec       	ldi	r22, 0xC1	; 193
    16ee:	84 e0       	ldi	r24, 0x04	; 4
    16f0:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Endpoint_ConfigureEndpoint_Prv>
    16f4:	42 e1       	ldi	r20, 0x12	; 18
    16f6:	61 ec       	ldi	r22, 0xC1	; 193
    16f8:	85 e0       	ldi	r24, 0x05	; 5
    16fa:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <Endpoint_ConfigureEndpoint_Prv>

000016fe <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    16fe:	80 91 de 01 	lds	r24, 0x01DE
    1702:	83 30       	cpi	r24, 0x03	; 3
    1704:	09 f4       	brne	.+2      	; 0x1708 <EVENT_USB_Device_ControlRequest+0xa>
    1706:	55 c0       	rjmp	.+170    	; 0x17b2 <EVENT_USB_Device_ControlRequest+0xb4>
    1708:	30 f4       	brcc	.+12     	; 0x1716 <EVENT_USB_Device_ControlRequest+0x18>
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	71 f0       	breq	.+28     	; 0x172a <EVENT_USB_Device_ControlRequest+0x2c>
    170e:	82 30       	cpi	r24, 0x02	; 2
    1710:	09 f4       	brne	.+2      	; 0x1714 <EVENT_USB_Device_ControlRequest+0x16>
    1712:	8e c0       	rjmp	.+284    	; 0x1830 <EVENT_USB_Device_ControlRequest+0x132>
    1714:	08 95       	ret
    1716:	8a 30       	cpi	r24, 0x0A	; 10
    1718:	09 f4       	brne	.+2      	; 0x171c <EVENT_USB_Device_ControlRequest+0x1e>
    171a:	7a c0       	rjmp	.+244    	; 0x1810 <EVENT_USB_Device_ControlRequest+0x112>
    171c:	8b 30       	cpi	r24, 0x0B	; 11
    171e:	09 f4       	brne	.+2      	; 0x1722 <EVENT_USB_Device_ControlRequest+0x24>
    1720:	60 c0       	rjmp	.+192    	; 0x17e2 <EVENT_USB_Device_ControlRequest+0xe4>
    1722:	89 30       	cpi	r24, 0x09	; 9
    1724:	09 f0       	breq	.+2      	; 0x1728 <EVENT_USB_Device_ControlRequest+0x2a>
    1726:	9c c0       	rjmp	.+312    	; 0x1860 <EVENT_USB_Device_ControlRequest+0x162>
    1728:	20 c0       	rjmp	.+64     	; 0x176a <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    172a:	80 91 dd 01 	lds	r24, 0x01DD
    172e:	81 3a       	cpi	r24, 0xA1	; 161
    1730:	09 f0       	breq	.+2      	; 0x1734 <EVENT_USB_Device_ControlRequest+0x36>
    1732:	96 c0       	rjmp	.+300    	; 0x1860 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1734:	80 91 e8 00 	lds	r24, 0x00E8
    1738:	87 7f       	andi	r24, 0xF7	; 247
    173a:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    173e:	80 91 e1 01 	lds	r24, 0x01E1
    1742:	90 91 e2 01 	lds	r25, 0x01E2
    1746:	89 2b       	or	r24, r25
    1748:	21 f4       	brne	.+8      	; 0x1752 <EVENT_USB_Device_ControlRequest+0x54>
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    174a:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    174c:	81 e5       	ldi	r24, 0x51	; 81
    174e:	91 e0       	ldi	r25, 0x01	; 1
    1750:	03 c0       	rjmp	.+6      	; 0x1758 <EVENT_USB_Device_ControlRequest+0x5a>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    1752:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    175e:	80 91 e8 00 	lds	r24, 0x00E8
    1762:	8b 77       	andi	r24, 0x7B	; 123
    1764:	80 93 e8 00 	sts	0x00E8, r24
    1768:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    176a:	80 91 dd 01 	lds	r24, 0x01DD
    176e:	81 32       	cpi	r24, 0x21	; 33
    1770:	09 f0       	breq	.+2      	; 0x1774 <EVENT_USB_Device_ControlRequest+0x76>
    1772:	76 c0       	rjmp	.+236    	; 0x1860 <EVENT_USB_Device_ControlRequest+0x162>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1774:	80 91 e1 01 	lds	r24, 0x01E1
    1778:	90 91 e2 01 	lds	r25, 0x01E2
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	19 f0       	breq	.+6      	; 0x1786 <EVENT_USB_Device_ControlRequest+0x88>
    1780:	04 97       	sbiw	r24, 0x04	; 4
    1782:	09 f0       	breq	.+2      	; 0x1786 <EVENT_USB_Device_ControlRequest+0x88>
    1784:	6d c0       	rjmp	.+218    	; 0x1860 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1786:	80 91 e8 00 	lds	r24, 0x00E8
    178a:	87 7f       	andi	r24, 0xF7	; 247
    178c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1790:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1794:	82 fd       	sbrc	r24, 2
    1796:	05 c0       	rjmp	.+10     	; 0x17a2 <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1798:	80 91 dc 01 	lds	r24, 0x01DC
    179c:	81 11       	cpse	r24, r1
    179e:	f8 cf       	rjmp	.-16     	; 0x1790 <EVENT_USB_Device_ControlRequest+0x92>
    17a0:	5f c0       	rjmp	.+190    	; 0x1860 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    17a2:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    17a6:	80 93 61 01 	sts	0x0161, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    17aa:	80 91 e8 00 	lds	r24, 0x00E8
    17ae:	8b 77       	andi	r24, 0x7B	; 123
    17b0:	53 c0       	rjmp	.+166    	; 0x1858 <EVENT_USB_Device_ControlRequest+0x15a>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    17b2:	80 91 dd 01 	lds	r24, 0x01DD
    17b6:	81 3a       	cpi	r24, 0xA1	; 161
    17b8:	09 f0       	breq	.+2      	; 0x17bc <EVENT_USB_Device_ControlRequest+0xbe>
    17ba:	52 c0       	rjmp	.+164    	; 0x1860 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    17bc:	80 91 e1 01 	lds	r24, 0x01E1
    17c0:	90 91 e2 01 	lds	r25, 0x01E2
    17c4:	89 2b       	or	r24, r25
    17c6:	09 f0       	breq	.+2      	; 0x17ca <EVENT_USB_Device_ControlRequest+0xcc>
    17c8:	4b c0       	rjmp	.+150    	; 0x1860 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17ca:	80 91 e8 00 	lds	r24, 0x00E8
    17ce:	87 7f       	andi	r24, 0xF7	; 247
    17d0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17d4:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    17d8:	80 ff       	sbrs	r24, 0
    17da:	fc cf       	rjmp	.-8      	; 0x17d4 <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    17dc:	80 91 0b 01 	lds	r24, 0x010B
    17e0:	36 c0       	rjmp	.+108    	; 0x184e <EVENT_USB_Device_ControlRequest+0x150>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    17e2:	80 91 dd 01 	lds	r24, 0x01DD
    17e6:	81 32       	cpi	r24, 0x21	; 33
    17e8:	d9 f5       	brne	.+118    	; 0x1860 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    17ea:	80 91 e1 01 	lds	r24, 0x01E1
    17ee:	90 91 e2 01 	lds	r25, 0x01E2
    17f2:	89 2b       	or	r24, r25
    17f4:	a9 f5       	brne	.+106    	; 0x1860 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17f6:	80 91 e8 00 	lds	r24, 0x00E8
    17fa:	87 7f       	andi	r24, 0xF7	; 247
    17fc:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    1800:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1804:	80 91 df 01 	lds	r24, 0x01DF
    1808:	80 93 0b 01 	sts	0x010B, r24
                    clear_keyboard();
    180c:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1810:	80 91 dd 01 	lds	r24, 0x01DD
    1814:	81 32       	cpi	r24, 0x21	; 33
    1816:	21 f5       	brne	.+72     	; 0x1860 <EVENT_USB_Device_ControlRequest+0x162>
    1818:	80 91 e8 00 	lds	r24, 0x00E8
    181c:	87 7f       	andi	r24, 0xF7	; 247
    181e:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    1822:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1826:	80 91 e0 01 	lds	r24, 0x01E0
    182a:	80 93 62 01 	sts	0x0162, r24
    182e:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1830:	80 91 dd 01 	lds	r24, 0x01DD
    1834:	81 3a       	cpi	r24, 0xA1	; 161
    1836:	a1 f4       	brne	.+40     	; 0x1860 <EVENT_USB_Device_ControlRequest+0x162>
    1838:	80 91 e8 00 	lds	r24, 0x00E8
    183c:	87 7f       	andi	r24, 0xF7	; 247
    183e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1842:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    1846:	80 ff       	sbrs	r24, 0
    1848:	fc cf       	rjmp	.-8      	; 0x1842 <EVENT_USB_Device_ControlRequest+0x144>
                Endpoint_Write_8(keyboard_idle);
    184a:	80 91 62 01 	lds	r24, 0x0162
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    184e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1852:	80 91 e8 00 	lds	r24, 0x00E8
    1856:	8e 77       	andi	r24, 0x7E	; 126
    1858:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    185c:	0c 94 47 0e 	jmp	0x1c8e	; 0x1c8e <Endpoint_ClearStatusStage>
    1860:	08 95       	ret

00001862 <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    1862:	08 95       	ret

00001864 <hook_late_init>:

__attribute__((weak))
void hook_late_init(void) {}
    1864:	08 95       	ret

00001866 <hook_usb_suspend_entry>:

 __attribute__((weak))
void hook_usb_suspend_entry(void)
{
    1866:	08 95       	ret

00001868 <EVENT_USB_Device_Suspend>:
    print("[R]");
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    1868:	8a ea       	ldi	r24, 0xAA	; 170
    186a:	93 e0       	ldi	r25, 0x03	; 3
    186c:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    hook_usb_suspend_entry();
    1870:	0c 94 33 0c 	jmp	0x1866	; 0x1866 <hook_usb_suspend_entry>

00001874 <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    1874:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1878:	80 91 da 01 	lds	r24, 0x01DA
    187c:	88 23       	and	r24, r24
    187e:	29 f0       	breq	.+10     	; 0x188a <hook_usb_suspend_loop+0x16>
    1880:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <suspend_wakeup_condition>
    1884:	81 11       	cpse	r24, r1
            USB_Device_SendRemoteWakeup();
    1886:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <USB_Device_SendRemoteWakeup>
    188a:	08 95       	ret

0000188c <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    188c:	84 b7       	in	r24, 0x34	; 52
    188e:	87 7f       	andi	r24, 0xF7	; 247
    1890:	84 bf       	out	0x34, r24	; 52
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	a8 95       	wdr
    1898:	80 91 60 00 	lds	r24, 0x0060
    189c:	88 61       	ori	r24, 0x18	; 24
    189e:	80 93 60 00 	sts	0x0060, r24
    18a2:	10 92 60 00 	sts	0x0060, r1
    18a6:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	80 e8       	ldi	r24, 0x80	; 128
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	80 93 61 00 	sts	0x0061, r24
    18b4:	90 93 61 00 	sts	0x0061, r25
    18b8:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    hook_early_init();
    18ba:	0e 94 31 0c 	call	0x1862	; 0x1862 <hook_early_init>
    keyboard_setup();
    18be:	0e 94 17 12 	call	0x242e	; 0x242e <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    18c2:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <USB_Disable>

    USB_Init();
    18c6:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <USB_Init>
    18ca:	80 91 e2 00 	lds	r24, 0x00E2
    18ce:	84 60       	ori	r24, 0x04	; 4
    18d0:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    18d4:	88 ec       	ldi	r24, 0xC8	; 200
    18d6:	99 e0       	ldi	r25, 0x09	; 9
    18d8:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <print_set_sendchar>
{
    setup_mcu();
    hook_early_init();
    keyboard_setup();
    setup_usb();
    sei();
    18dc:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    18de:	80 91 dc 01 	lds	r24, 0x01DC
    18e2:	84 30       	cpi	r24, 0x04	; 4
    18e4:	e1 f7       	brne	.-8      	; 0x18de <main+0x52>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    18e6:	85 e9       	ldi	r24, 0x95	; 149
    18e8:	93 e0       	ldi	r25, 0x03	; 3
    18ea:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>

    /* init modules */
    keyboard_init();
    18ee:	0e 94 19 12 	call	0x2432	; 0x2432 <keyboard_init>
    host_set_driver(&lufa_driver);
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	91 e0       	ldi	r25, 0x01	; 1
    18f6:	0e 94 85 11 	call	0x230a	; 0x230a <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    18fa:	84 e8       	ldi	r24, 0x84	; 132
    18fc:	93 e0       	ldi	r25, 0x03	; 3
    18fe:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    hook_late_init();
    1902:	0e 94 32 0c 	call	0x1864	; 0x1864 <hook_late_init>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1906:	80 91 dc 01 	lds	r24, 0x01DC
    190a:	85 30       	cpi	r24, 0x05	; 5
    190c:	39 f4       	brne	.+14     	; 0x191c <main+0x90>
            print("[s]");
    190e:	80 e8       	ldi	r24, 0x80	; 128
    1910:	93 e0       	ldi	r25, 0x03	; 3
    1912:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
            hook_usb_suspend_loop();
    1916:	0e 94 3a 0c 	call	0x1874	; 0x1874 <hook_usb_suspend_loop>
    191a:	f5 cf       	rjmp	.-22     	; 0x1906 <main+0x7a>
        }

        keyboard_task();
    191c:	0e 94 1f 12 	call	0x243e	; 0x243e <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    1920:	f2 cf       	rjmp	.-28     	; 0x1906 <main+0x7a>

00001922 <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    1922:	0c 94 36 1e 	jmp	0x3c6c	; 0x3c6c <suspend_wakeup_init>

00001926 <EVENT_USB_Device_WakeUp>:
    hook_usb_suspend_entry();
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    1926:	86 ea       	ldi	r24, 0xA6	; 166
    1928:	93 e0       	ldi	r25, 0x03	; 3
    192a:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    hook_usb_wakeup();
    192e:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <hook_usb_wakeup>

00001932 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    1932:	29 2f       	mov	r18, r25
    1934:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1936:	23 30       	cpi	r18, 0x03	; 3
    1938:	31 05       	cpc	r19, r1
    193a:	c9 f0       	breq	.+50     	; 0x196e <CALLBACK_USB_GetDescriptor+0x3c>
    193c:	64 f4       	brge	.+24     	; 0x1956 <CALLBACK_USB_GetDescriptor+0x24>
    193e:	21 30       	cpi	r18, 0x01	; 1
    1940:	31 05       	cpc	r19, r1
    1942:	81 f0       	breq	.+32     	; 0x1964 <CALLBACK_USB_GetDescriptor+0x32>
    1944:	22 30       	cpi	r18, 0x02	; 2
    1946:	31 05       	cpc	r19, r1
    1948:	09 f0       	breq	.+2      	; 0x194c <CALLBACK_USB_GetDescriptor+0x1a>
    194a:	43 c0       	rjmp	.+134    	; 0x19d2 <CALLBACK_USB_GetDescriptor+0xa0>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    194c:	8d e8       	ldi	r24, 0x8D	; 141
    194e:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    1950:	28 ee       	ldi	r18, 0xE8	; 232
    1952:	33 e0       	ldi	r19, 0x03	; 3
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    1954:	42 c0       	rjmp	.+132    	; 0x19da <CALLBACK_USB_GetDescriptor+0xa8>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1956:	21 32       	cpi	r18, 0x21	; 33
    1958:	31 05       	cpc	r19, r1
    195a:	f1 f0       	breq	.+60     	; 0x1998 <CALLBACK_USB_GetDescriptor+0x66>
    195c:	22 32       	cpi	r18, 0x22	; 34
    195e:	31 05       	cpc	r19, r1
    1960:	41 f1       	breq	.+80     	; 0x19b2 <CALLBACK_USB_GetDescriptor+0x80>
    1962:	37 c0       	rjmp	.+110    	; 0x19d2 <CALLBACK_USB_GetDescriptor+0xa0>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    1964:	82 e1       	ldi	r24, 0x12	; 18
    1966:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1968:	25 e7       	ldi	r18, 0x75	; 117
    196a:	34 e0       	ldi	r19, 0x04	; 4
    196c:	36 c0       	rjmp	.+108    	; 0x19da <CALLBACK_USB_GetDescriptor+0xa8>
    196e:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    1970:	81 30       	cpi	r24, 0x01	; 1
    1972:	91 05       	cpc	r25, r1
    1974:	41 f0       	breq	.+16     	; 0x1986 <CALLBACK_USB_GetDescriptor+0x54>
    1976:	82 30       	cpi	r24, 0x02	; 2
    1978:	91 05       	cpc	r25, r1
    197a:	41 f0       	breq	.+16     	; 0x198c <CALLBACK_USB_GetDescriptor+0x5a>
    197c:	89 2b       	or	r24, r25
    197e:	49 f5       	brne	.+82     	; 0x19d2 <CALLBACK_USB_GetDescriptor+0xa0>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1980:	e4 ee       	ldi	r30, 0xE4	; 228
    1982:	f3 e0       	ldi	r31, 0x03	; 3
    1984:	05 c0       	rjmp	.+10     	; 0x1990 <CALLBACK_USB_GetDescriptor+0x5e>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1986:	e6 ed       	ldi	r30, 0xD6	; 214
    1988:	f3 e0       	ldi	r31, 0x03	; 3
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <CALLBACK_USB_GetDescriptor+0x5e>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    198c:	ea eb       	ldi	r30, 0xBA	; 186
    198e:	f3 e0       	ldi	r31, 0x03	; 3
    1990:	84 91       	lpm	r24, Z
    1992:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    1994:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    1996:	21 c0       	rjmp	.+66     	; 0x19da <CALLBACK_USB_GetDescriptor+0xa8>
    1998:	65 30       	cpi	r22, 0x05	; 5
    199a:	d8 f4       	brcc	.+54     	; 0x19d2 <CALLBACK_USB_GetDescriptor+0xa0>
    199c:	e6 2f       	mov	r30, r22
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	ee 0f       	add	r30, r30
    19a2:	ff 1f       	adc	r31, r31
    19a4:	ec 5d       	subi	r30, 0xDC	; 220
    19a6:	fe 4f       	sbci	r31, 0xFE	; 254
    19a8:	20 81       	ld	r18, Z
    19aa:	31 81       	ldd	r19, Z+1	; 0x01
    19ac:	89 e0       	ldi	r24, 0x09	; 9
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	14 c0       	rjmp	.+40     	; 0x19da <CALLBACK_USB_GetDescriptor+0xa8>
    19b2:	65 30       	cpi	r22, 0x05	; 5
    19b4:	70 f4       	brcc	.+28     	; 0x19d2 <CALLBACK_USB_GetDescriptor+0xa0>
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	fb 01       	movw	r30, r22
    19ba:	ee 0f       	add	r30, r30
    19bc:	ff 1f       	adc	r31, r31
    19be:	e6 5e       	subi	r30, 0xE6	; 230
    19c0:	fe 4f       	sbci	r31, 0xFE	; 254
    19c2:	20 81       	ld	r18, Z
    19c4:	31 81       	ldd	r19, Z+1	; 0x01
    19c6:	fb 01       	movw	r30, r22
    19c8:	eb 5e       	subi	r30, 0xEB	; 235
    19ca:	fe 4f       	sbci	r31, 0xFE	; 254
    19cc:	80 81       	ld	r24, Z
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	04 c0       	rjmp	.+8      	; 0x19da <CALLBACK_USB_GetDescriptor+0xa8>
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    19da:	fa 01       	movw	r30, r20
    19dc:	31 83       	std	Z+1, r19	; 0x01
    19de:	20 83       	st	Z, r18
    return Size;
}
    19e0:	08 95       	ret

000019e2 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    19e2:	84 e1       	ldi	r24, 0x14	; 20
    19e4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    19e6:	86 e1       	ldi	r24, 0x16	; 22
    19e8:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    19ea:	09 b4       	in	r0, 0x29	; 41
    19ec:	00 fe       	sbrs	r0, 0
    19ee:	fd cf       	rjmp	.-6      	; 0x19ea <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    19f0:	80 91 d8 00 	lds	r24, 0x00D8
    19f4:	8f 7d       	andi	r24, 0xDF	; 223
    19f6:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    19fa:	80 91 e0 00 	lds	r24, 0x00E0
    19fe:	82 60       	ori	r24, 0x02	; 2
    1a00:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1a04:	80 91 e0 00 	lds	r24, 0x00E0
    1a08:	81 fd       	sbrc	r24, 1
    1a0a:	fc cf       	rjmp	.-8      	; 0x1a04 <USB_Device_SendRemoteWakeup+0x22>
}
    1a0c:	08 95       	ret

00001a0e <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1a0e:	cf 92       	push	r12
    1a10:	df 92       	push	r13
    1a12:	ef 92       	push	r14
    1a14:	ff 92       	push	r15
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	ec 01       	movw	r28, r24
    1a20:	8b 01       	movw	r16, r22
    1a22:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1a24:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <Endpoint_WaitUntilReady>
    1a28:	81 11       	cpse	r24, r1
    1a2a:	33 c0       	rjmp	.+102    	; 0x1a92 <Endpoint_Write_Stream_LE+0x84>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1a2c:	c1 14       	cp	r12, r1
    1a2e:	d1 04       	cpc	r13, r1
    1a30:	39 f0       	breq	.+14     	; 0x1a40 <Endpoint_Write_Stream_LE+0x32>
	{
		Length -= *BytesProcessed;
    1a32:	f6 01       	movw	r30, r12
    1a34:	80 81       	ld	r24, Z
    1a36:	91 81       	ldd	r25, Z+1	; 0x01
    1a38:	08 1b       	sub	r16, r24
    1a3a:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1a3c:	c8 0f       	add	r28, r24
    1a3e:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1a40:	e1 2c       	mov	r14, r1
    1a42:	f1 2c       	mov	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1a44:	01 15       	cp	r16, r1
    1a46:	11 05       	cpc	r17, r1
    1a48:	19 f1       	breq	.+70     	; 0x1a90 <Endpoint_Write_Stream_LE+0x82>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1a4a:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1a4e:	85 fd       	sbrc	r24, 5
    1a50:	16 c0       	rjmp	.+44     	; 0x1a7e <Endpoint_Write_Stream_LE+0x70>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a52:	80 91 e8 00 	lds	r24, 0x00E8
    1a56:	8e 77       	andi	r24, 0x7E	; 126
    1a58:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1a5c:	c1 14       	cp	r12, r1
    1a5e:	d1 04       	cpc	r13, r1
    1a60:	49 f0       	breq	.+18     	; 0x1a74 <Endpoint_Write_Stream_LE+0x66>
			{
				*BytesProcessed += BytesInTransfer;
    1a62:	f6 01       	movw	r30, r12
    1a64:	80 81       	ld	r24, Z
    1a66:	91 81       	ldd	r25, Z+1	; 0x01
    1a68:	e8 0e       	add	r14, r24
    1a6a:	f9 1e       	adc	r15, r25
    1a6c:	f1 82       	std	Z+1, r15	; 0x01
    1a6e:	e0 82       	st	Z, r14
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1a70:	85 e0       	ldi	r24, 0x05	; 5
    1a72:	0f c0       	rjmp	.+30     	; 0x1a92 <Endpoint_Write_Stream_LE+0x84>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1a74:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <Endpoint_WaitUntilReady>
    1a78:	88 23       	and	r24, r24
    1a7a:	21 f3       	breq	.-56     	; 0x1a44 <Endpoint_Write_Stream_LE+0x36>
    1a7c:	0a c0       	rjmp	.+20     	; 0x1a92 <Endpoint_Write_Stream_LE+0x84>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1a7e:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a80:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1a84:	01 50       	subi	r16, 0x01	; 1
    1a86:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    1a88:	ff ef       	ldi	r31, 0xFF	; 255
    1a8a:	ef 1a       	sub	r14, r31
    1a8c:	ff 0a       	sbc	r15, r31
    1a8e:	da cf       	rjmp	.-76     	; 0x1a44 <Endpoint_Write_Stream_LE+0x36>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    1a90:	80 e0       	ldi	r24, 0x00	; 0
}
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	1f 91       	pop	r17
    1a98:	0f 91       	pop	r16
    1a9a:	ff 90       	pop	r15
    1a9c:	ef 90       	pop	r14
    1a9e:	df 90       	pop	r13
    1aa0:	cf 90       	pop	r12
    1aa2:	08 95       	ret

00001aa4 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1aa4:	20 91 e3 01 	lds	r18, 0x01E3
    1aa8:	30 91 e4 01 	lds	r19, 0x01E4
    1aac:	26 17       	cp	r18, r22
    1aae:	37 07       	cpc	r19, r23
    1ab0:	48 f0       	brcs	.+18     	; 0x1ac4 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1ab2:	61 15       	cp	r22, r1
    1ab4:	71 05       	cpc	r23, r1
    1ab6:	39 f4       	brne	.+14     	; 0x1ac6 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ab8:	20 91 e8 00 	lds	r18, 0x00E8
    1abc:	2e 77       	andi	r18, 0x7E	; 126
    1abe:	20 93 e8 00 	sts	0x00E8, r18
    1ac2:	01 c0       	rjmp	.+2      	; 0x1ac6 <Endpoint_Write_Control_Stream_LE+0x22>
    1ac4:	b9 01       	movw	r22, r18
    1ac6:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1ac8:	61 15       	cp	r22, r1
    1aca:	71 05       	cpc	r23, r1
    1acc:	99 f1       	breq	.+102    	; 0x1b34 <Endpoint_Write_Control_Stream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1ace:	20 91 dc 01 	lds	r18, 0x01DC

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ad2:	22 23       	and	r18, r18
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <Endpoint_Write_Control_Stream_LE+0x34>
    1ad6:	41 c0       	rjmp	.+130    	; 0x1b5a <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1ad8:	25 30       	cpi	r18, 0x05	; 5
    1ada:	09 f4       	brne	.+2      	; 0x1ade <Endpoint_Write_Control_Stream_LE+0x3a>
    1adc:	40 c0       	rjmp	.+128    	; 0x1b5e <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1ade:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1ae2:	23 fd       	sbrc	r18, 3
    1ae4:	3e c0       	rjmp	.+124    	; 0x1b62 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ae6:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1aea:	22 fd       	sbrc	r18, 2
    1aec:	30 c0       	rjmp	.+96     	; 0x1b4e <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1aee:	20 91 e8 00 	lds	r18, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1af2:	20 ff       	sbrs	r18, 0
    1af4:	e9 cf       	rjmp	.-46     	; 0x1ac8 <Endpoint_Write_Control_Stream_LE+0x24>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1af6:	20 91 f2 00 	lds	r18, 0x00F2
    1afa:	30 91 f3 00 	lds	r19, 0x00F3
    1afe:	fc 01       	movw	r30, r24
    1b00:	cf 01       	movw	r24, r30
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1b02:	61 15       	cp	r22, r1
    1b04:	71 05       	cpc	r23, r1
    1b06:	59 f0       	breq	.+22     	; 0x1b1e <Endpoint_Write_Control_Stream_LE+0x7a>
    1b08:	28 30       	cpi	r18, 0x08	; 8
    1b0a:	31 05       	cpc	r19, r1
    1b0c:	40 f4       	brcc	.+16     	; 0x1b1e <Endpoint_Write_Control_Stream_LE+0x7a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1b0e:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b10:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1b14:	61 50       	subi	r22, 0x01	; 1
    1b16:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1b18:	2f 5f       	subi	r18, 0xFF	; 255
    1b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1c:	f1 cf       	rjmp	.-30     	; 0x1b00 <Endpoint_Write_Control_Stream_LE+0x5c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1b1e:	41 e0       	ldi	r20, 0x01	; 1
    1b20:	28 30       	cpi	r18, 0x08	; 8
    1b22:	31 05       	cpc	r19, r1
    1b24:	09 f0       	breq	.+2      	; 0x1b28 <Endpoint_Write_Control_Stream_LE+0x84>
    1b26:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b28:	20 91 e8 00 	lds	r18, 0x00E8
    1b2c:	2e 77       	andi	r18, 0x7E	; 126
    1b2e:	20 93 e8 00 	sts	0x00E8, r18
    1b32:	ca cf       	rjmp	.-108    	; 0x1ac8 <Endpoint_Write_Control_Stream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1b34:	41 11       	cpse	r20, r1
    1b36:	cb cf       	rjmp	.-106    	; 0x1ace <Endpoint_Write_Control_Stream_LE+0x2a>
    1b38:	0a c0       	rjmp	.+20     	; 0x1b4e <Endpoint_Write_Control_Stream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b3a:	80 91 dc 01 	lds	r24, 0x01DC

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b3e:	88 23       	and	r24, r24
    1b40:	61 f0       	breq	.+24     	; 0x1b5a <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b42:	85 30       	cpi	r24, 0x05	; 5
    1b44:	61 f0       	breq	.+24     	; 0x1b5e <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b46:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1b4a:	83 fd       	sbrc	r24, 3
    1b4c:	0a c0       	rjmp	.+20     	; 0x1b62 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b4e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1b52:	82 ff       	sbrs	r24, 2
    1b54:	f2 cf       	rjmp	.-28     	; 0x1b3a <Endpoint_Write_Control_Stream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1b5a:	82 e0       	ldi	r24, 0x02	; 2
    1b5c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1b5e:	83 e0       	ldi	r24, 0x03	; 3
    1b60:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1b64:	08 95       	ret

00001b66 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1b66:	20 91 e3 01 	lds	r18, 0x01E3
    1b6a:	30 91 e4 01 	lds	r19, 0x01E4
    1b6e:	26 17       	cp	r18, r22
    1b70:	37 07       	cpc	r19, r23
    1b72:	48 f0       	brcs	.+18     	; 0x1b86 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1b74:	61 15       	cp	r22, r1
    1b76:	71 05       	cpc	r23, r1
    1b78:	39 f4       	brne	.+14     	; 0x1b88 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b7a:	20 91 e8 00 	lds	r18, 0x00E8
    1b7e:	2e 77       	andi	r18, 0x7E	; 126
    1b80:	20 93 e8 00 	sts	0x00E8, r18
    1b84:	01 c0       	rjmp	.+2      	; 0x1b88 <Endpoint_Write_Control_PStream_LE+0x22>
    1b86:	b9 01       	movw	r22, r18
    1b88:	fc 01       	movw	r30, r24
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1b8c:	61 15       	cp	r22, r1
    1b8e:	71 05       	cpc	r23, r1
    1b90:	81 f1       	breq	.+96     	; 0x1bf2 <Endpoint_Write_Control_PStream_LE+0x8c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b92:	80 91 dc 01 	lds	r24, 0x01DC

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b96:	88 23       	and	r24, r24
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <Endpoint_Write_Control_PStream_LE+0x36>
    1b9a:	3e c0       	rjmp	.+124    	; 0x1c18 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b9c:	85 30       	cpi	r24, 0x05	; 5
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <Endpoint_Write_Control_PStream_LE+0x3c>
    1ba0:	3d c0       	rjmp	.+122    	; 0x1c1c <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1ba2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1ba6:	83 fd       	sbrc	r24, 3
    1ba8:	3b c0       	rjmp	.+118    	; 0x1c20 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1baa:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1bae:	82 fd       	sbrc	r24, 2
    1bb0:	2d c0       	rjmp	.+90     	; 0x1c0c <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1bb2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1bb6:	80 ff       	sbrs	r24, 0
    1bb8:	e9 cf       	rjmp	.-46     	; 0x1b8c <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1bba:	80 91 f2 00 	lds	r24, 0x00F2
    1bbe:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1bc2:	61 15       	cp	r22, r1
    1bc4:	71 05       	cpc	r23, r1
    1bc6:	59 f0       	breq	.+22     	; 0x1bde <Endpoint_Write_Control_PStream_LE+0x78>
    1bc8:	88 30       	cpi	r24, 0x08	; 8
    1bca:	91 05       	cpc	r25, r1
    1bcc:	40 f4       	brcc	.+16     	; 0x1bde <Endpoint_Write_Control_PStream_LE+0x78>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1bce:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1bd0:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1bd4:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1bd6:	61 50       	subi	r22, 0x01	; 1
    1bd8:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1bda:	01 96       	adiw	r24, 0x01	; 1
    1bdc:	f2 cf       	rjmp	.-28     	; 0x1bc2 <Endpoint_Write_Control_PStream_LE+0x5c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1bde:	21 e0       	ldi	r18, 0x01	; 1
    1be0:	08 97       	sbiw	r24, 0x08	; 8
    1be2:	09 f0       	breq	.+2      	; 0x1be6 <Endpoint_Write_Control_PStream_LE+0x80>
    1be4:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1be6:	80 91 e8 00 	lds	r24, 0x00E8
    1bea:	8e 77       	andi	r24, 0x7E	; 126
    1bec:	80 93 e8 00 	sts	0x00E8, r24
    1bf0:	cd cf       	rjmp	.-102    	; 0x1b8c <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1bf2:	21 11       	cpse	r18, r1
    1bf4:	ce cf       	rjmp	.-100    	; 0x1b92 <Endpoint_Write_Control_PStream_LE+0x2c>
    1bf6:	0a c0       	rjmp	.+20     	; 0x1c0c <Endpoint_Write_Control_PStream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1bf8:	80 91 dc 01 	lds	r24, 0x01DC

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1bfc:	88 23       	and	r24, r24
    1bfe:	61 f0       	breq	.+24     	; 0x1c18 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c00:	85 30       	cpi	r24, 0x05	; 5
    1c02:	61 f0       	breq	.+24     	; 0x1c1c <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1c04:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1c08:	83 fd       	sbrc	r24, 3
    1c0a:	0a c0       	rjmp	.+20     	; 0x1c20 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c0c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1c10:	82 ff       	sbrs	r24, 2
    1c12:	f2 cf       	rjmp	.-28     	; 0x1bf8 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1c18:	82 e0       	ldi	r24, 0x02	; 2
    1c1a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1c1c:	83 e0       	ldi	r24, 0x03	; 3
    1c1e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1c22:	08 95       	ret

00001c24 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1c24:	98 2f       	mov	r25, r24
    1c26:	97 30       	cpi	r25, 0x07	; 7
    1c28:	58 f5       	brcc	.+86     	; 0x1c80 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c2a:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1c2e:	98 17       	cp	r25, r24
    1c30:	39 f0       	breq	.+14     	; 0x1c40 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1c32:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1c36:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1c3a:	50 91 f0 00 	lds	r21, 0x00F0
    1c3e:	03 c0       	rjmp	.+6      	; 0x1c46 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1c40:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1c42:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1c44:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1c46:	21 ff       	sbrs	r18, 1
    1c48:	19 c0       	rjmp	.+50     	; 0x1c7c <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1c4a:	30 91 eb 00 	lds	r19, 0x00EB
    1c4e:	3e 7f       	andi	r19, 0xFE	; 254
    1c50:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1c54:	30 91 ed 00 	lds	r19, 0x00ED
    1c58:	3d 7f       	andi	r19, 0xFD	; 253
    1c5a:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1c5e:	30 91 eb 00 	lds	r19, 0x00EB
    1c62:	31 60       	ori	r19, 0x01	; 1
    1c64:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1c68:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1c6c:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1c70:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1c74:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1c78:	27 ff       	sbrs	r18, 7
    1c7a:	07 c0       	rjmp	.+14     	; 0x1c8a <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1c7c:	9f 5f       	subi	r25, 0xFF	; 255
    1c7e:	d3 cf       	rjmp	.-90     	; 0x1c26 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c80:	8f 70       	andi	r24, 0x0F	; 15
    1c82:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1c8c:	08 95       	ret

00001c8e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1c8e:	80 91 dd 01 	lds	r24, 0x01DD
    1c92:	87 ff       	sbrs	r24, 7
    1c94:	11 c0       	rjmp	.+34     	; 0x1cb8 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c96:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
    1c9a:	82 fd       	sbrc	r24, 2
    1c9c:	05 c0       	rjmp	.+10     	; 0x1ca8 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1c9e:	80 91 dc 01 	lds	r24, 0x01DC
    1ca2:	81 11       	cpse	r24, r1
    1ca4:	f8 cf       	rjmp	.-16     	; 0x1c96 <Endpoint_ClearStatusStage+0x8>
    1ca6:	11 c0       	rjmp	.+34     	; 0x1cca <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1ca8:	80 91 e8 00 	lds	r24, 0x00E8
    1cac:	8b 77       	andi	r24, 0x7B	; 123
    1cae:	0b c0       	rjmp	.+22     	; 0x1cc6 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1cb0:	80 91 dc 01 	lds	r24, 0x01DC
    1cb4:	88 23       	and	r24, r24
    1cb6:	49 f0       	breq	.+18     	; 0x1cca <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1cb8:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1cbc:	80 ff       	sbrs	r24, 0
    1cbe:	f8 cf       	rjmp	.-16     	; 0x1cb0 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1cc0:	80 91 e8 00 	lds	r24, 0x00E8
    1cc4:	8e 77       	andi	r24, 0x7E	; 126
    1cc6:	80 93 e8 00 	sts	0x00E8, r24
    1cca:	08 95       	ret

00001ccc <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1ccc:	20 91 e4 00 	lds	r18, 0x00E4
    1cd0:	30 91 e5 00 	lds	r19, 0x00E5
    1cd4:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1cd6:	40 91 ec 00 	lds	r20, 0x00EC
    1cda:	84 2f       	mov	r24, r20
    1cdc:	81 70       	andi	r24, 0x01	; 1
    1cde:	40 ff       	sbrs	r20, 0
    1ce0:	22 c0       	rjmp	.+68     	; 0x1d26 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ce2:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1ce6:	80 fd       	sbrc	r24, 0
    1ce8:	1c c0       	rjmp	.+56     	; 0x1d22 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1cea:	80 91 dc 01 	lds	r24, 0x01DC

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1cee:	88 23       	and	r24, r24
    1cf0:	91 f0       	breq	.+36     	; 0x1d16 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1cf2:	85 30       	cpi	r24, 0x05	; 5
    1cf4:	91 f0       	breq	.+36     	; 0x1d1a <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1cf6:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1cfa:	85 fd       	sbrc	r24, 5
    1cfc:	10 c0       	rjmp	.+32     	; 0x1d1e <Endpoint_WaitUntilReady+0x52>
    1cfe:	40 91 e4 00 	lds	r20, 0x00E4
    1d02:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1d06:	42 17       	cp	r20, r18
    1d08:	53 07       	cpc	r21, r19
    1d0a:	29 f3       	breq	.-54     	; 0x1cd6 <Endpoint_WaitUntilReady+0xa>
    1d0c:	9a 01       	movw	r18, r20
    1d0e:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1d10:	11 f7       	brne	.-60     	; 0x1cd6 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1d12:	84 e0       	ldi	r24, 0x04	; 4
    1d14:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1d16:	82 e0       	ldi	r24, 0x02	; 2
    1d18:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1d1a:	83 e0       	ldi	r24, 0x03	; 3
    1d1c:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1d26:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1d2a:	42 ff       	sbrs	r20, 2
    1d2c:	de cf       	rjmp	.-68     	; 0x1cea <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1d2e:	08 95       	ret

00001d30 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1d30:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1d34:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1d38:	e0 ee       	ldi	r30, 0xE0	; 224
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	81 60       	ori	r24, 0x01	; 1
    1d40:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1d42:	e8 ed       	ldi	r30, 0xD8	; 216
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	8f 77       	andi	r24, 0x7F	; 127
    1d4a:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d4c:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1d4e:	a7 ed       	ldi	r26, 0xD7	; 215
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	8c 91       	ld	r24, X
    1d54:	8e 7f       	andi	r24, 0xFE	; 254
    1d56:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1d58:	80 81       	ld	r24, Z
    1d5a:	8f 7e       	andi	r24, 0xEF	; 239
    1d5c:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1d5e:	10 92 db 01 	sts	0x01DB, r1
    1d62:	08 95       	ret

00001d64 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1d64:	0f 93       	push	r16
    1d66:	1f 93       	push	r17
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1d6c:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1d70:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1d74:	c8 ed       	ldi	r28, 0xD8	; 216
    1d76:	d0 e0       	ldi	r29, 0x00	; 0
    1d78:	88 81       	ld	r24, Y
    1d7a:	8f 77       	andi	r24, 0x7F	; 127
    1d7c:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1d7e:	88 81       	ld	r24, Y
    1d80:	80 68       	ori	r24, 0x80	; 128
    1d82:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1d84:	88 81       	ld	r24, Y
    1d86:	8f 7d       	andi	r24, 0xDF	; 223
    1d88:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    1d8a:	e7 ed       	ldi	r30, 0xD7	; 215
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	80 68       	ori	r24, 0x80	; 128
    1d92:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d94:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1d96:	10 92 dc 01 	sts	0x01DC, r1
	USB_Device_ConfigurationNumber  = 0;
    1d9a:	10 92 d8 01 	sts	0x01D8, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1d9e:	10 92 da 01 	sts	0x01DA, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1da2:	10 92 d9 01 	sts	0x01D9, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1da6:	00 ee       	ldi	r16, 0xE0	; 224
    1da8:	10 e0       	ldi	r17, 0x00	; 0
    1daa:	f8 01       	movw	r30, r16
    1dac:	80 81       	ld	r24, Z
    1dae:	8b 7f       	andi	r24, 0xFB	; 251
    1db0:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1db2:	88 81       	ld	r24, Y
    1db4:	81 60       	ori	r24, 0x01	; 1
    1db6:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1db8:	42 e0       	ldi	r20, 0x02	; 2
    1dba:	60 e0       	ldi	r22, 0x00	; 0
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1dc2:	e1 ee       	ldi	r30, 0xE1	; 225
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	8e 7f       	andi	r24, 0xFE	; 254
    1dca:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1dcc:	e2 ee       	ldi	r30, 0xE2	; 226
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	81 60       	ori	r24, 0x01	; 1
    1dd4:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1dd6:	80 81       	ld	r24, Z
    1dd8:	88 60       	ori	r24, 0x08	; 8
    1dda:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1ddc:	f8 01       	movw	r30, r16
    1dde:	80 81       	ld	r24, Z
    1de0:	8e 7f       	andi	r24, 0xFE	; 254
    1de2:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1de4:	88 81       	ld	r24, Y
    1de6:	80 61       	ori	r24, 0x10	; 16
    1de8:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	1f 91       	pop	r17
    1df0:	0f 91       	pop	r16
    1df2:	08 95       	ret

00001df4 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1df4:	e8 ed       	ldi	r30, 0xD8	; 216
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	8f 7e       	andi	r24, 0xEF	; 239
    1dfc:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1dfe:	e7 ed       	ldi	r30, 0xD7	; 215
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	81 60       	ori	r24, 0x01	; 1
    1e06:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	80 93 db 01 	sts	0x01DB, r24

	USB_ResetInterface();
    1e0e:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <USB_ResetInterface>

00001e12 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1e12:	e8 ed       	ldi	r30, 0xD8	; 216
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	8c 7f       	andi	r24, 0xFC	; 252
    1e1a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1e1c:	10 92 e2 00 	sts	0x00E2, r1
    1e20:	08 95       	ret

00001e22 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1e22:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1e26:	10 92 e1 00 	sts	0x00E1, r1
    1e2a:	08 95       	ret

00001e2c <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1e2c:	1f 92       	push	r1
    1e2e:	0f 92       	push	r0
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	0f 92       	push	r0
    1e34:	11 24       	eor	r1, r1
    1e36:	0b b6       	in	r0, 0x3b	; 59
    1e38:	0f 92       	push	r0
    1e3a:	2f 93       	push	r18
    1e3c:	3f 93       	push	r19
    1e3e:	4f 93       	push	r20
    1e40:	5f 93       	push	r21
    1e42:	6f 93       	push	r22
    1e44:	7f 93       	push	r23
    1e46:	8f 93       	push	r24
    1e48:	9f 93       	push	r25
    1e4a:	af 93       	push	r26
    1e4c:	bf 93       	push	r27
    1e4e:	ef 93       	push	r30
    1e50:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1e52:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1e56:	82 ff       	sbrs	r24, 2
    1e58:	0b c0       	rjmp	.+22     	; 0x1e70 <__vector_10+0x44>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1e5a:	80 91 e2 00 	lds	r24, 0x00E2
    1e5e:	82 ff       	sbrs	r24, 2
    1e60:	07 c0       	rjmp	.+14     	; 0x1e70 <__vector_10+0x44>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1e62:	80 91 e1 00 	lds	r24, 0x00E1
    1e66:	8b 7f       	andi	r24, 0xFB	; 251
    1e68:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1e6c:	0e 94 25 0b 	call	0x164a	; 0x164a <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1e70:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1e74:	80 ff       	sbrs	r24, 0
    1e76:	1f c0       	rjmp	.+62     	; 0x1eb6 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1e78:	80 91 d8 00 	lds	r24, 0x00D8
    1e7c:	80 ff       	sbrs	r24, 0
    1e7e:	1b c0       	rjmp	.+54     	; 0x1eb6 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1e80:	80 91 da 00 	lds	r24, 0x00DA
    1e84:	8e 7f       	andi	r24, 0xFE	; 254
    1e86:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1e8a:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1e8e:	80 ff       	sbrs	r24, 0
    1e90:	0d c0       	rjmp	.+26     	; 0x1eac <__vector_10+0x80>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1e92:	84 e1       	ldi	r24, 0x14	; 20
    1e94:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1e96:	86 e1       	ldi	r24, 0x16	; 22
    1e98:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1e9a:	09 b4       	in	r0, 0x29	; 41
    1e9c:	00 fe       	sbrs	r0, 0
    1e9e:	fd cf       	rjmp	.-6      	; 0x1e9a <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	80 93 dc 01 	sts	0x01DC, r24
			EVENT_USB_Device_Connect();
    1ea6:	0e 94 08 0b 	call	0x1610	; 0x1610 <EVENT_USB_Device_Connect>
    1eaa:	05 c0       	rjmp	.+10     	; 0x1eb6 <__vector_10+0x8a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1eac:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1eae:	10 92 dc 01 	sts	0x01DC, r1
			EVENT_USB_Device_Disconnect();
    1eb2:	0e 94 1a 0b 	call	0x1634	; 0x1634 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1eb6:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1eba:	80 ff       	sbrs	r24, 0
    1ebc:	19 c0       	rjmp	.+50     	; 0x1ef0 <__vector_10+0xc4>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1ebe:	80 91 e2 00 	lds	r24, 0x00E2
    1ec2:	80 ff       	sbrs	r24, 0
    1ec4:	15 c0       	rjmp	.+42     	; 0x1ef0 <__vector_10+0xc4>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1ec6:	80 91 e2 00 	lds	r24, 0x00E2
    1eca:	8e 7f       	andi	r24, 0xFE	; 254
    1ecc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1ed0:	80 91 e2 00 	lds	r24, 0x00E2
    1ed4:	80 61       	ori	r24, 0x10	; 16
    1ed6:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1eda:	80 91 d8 00 	lds	r24, 0x00D8
    1ede:	80 62       	ori	r24, 0x20	; 32
    1ee0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1ee4:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1ee6:	85 e0       	ldi	r24, 0x05	; 5
    1ee8:	80 93 dc 01 	sts	0x01DC, r24
		EVENT_USB_Device_Suspend();
    1eec:	0e 94 34 0c 	call	0x1868	; 0x1868 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1ef0:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1ef4:	84 ff       	sbrs	r24, 4
    1ef6:	30 c0       	rjmp	.+96     	; 0x1f58 <__vector_10+0x12c>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1ef8:	80 91 e2 00 	lds	r24, 0x00E2
    1efc:	84 ff       	sbrs	r24, 4
    1efe:	2c c0       	rjmp	.+88     	; 0x1f58 <__vector_10+0x12c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1f00:	84 e1       	ldi	r24, 0x14	; 20
    1f02:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1f04:	86 e1       	ldi	r24, 0x16	; 22
    1f06:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1f08:	09 b4       	in	r0, 0x29	; 41
    1f0a:	00 fe       	sbrs	r0, 0
    1f0c:	fd cf       	rjmp	.-6      	; 0x1f08 <__vector_10+0xdc>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1f0e:	80 91 d8 00 	lds	r24, 0x00D8
    1f12:	8f 7d       	andi	r24, 0xDF	; 223
    1f14:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1f18:	80 91 e1 00 	lds	r24, 0x00E1
    1f1c:	8f 7e       	andi	r24, 0xEF	; 239
    1f1e:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1f22:	80 91 e2 00 	lds	r24, 0x00E2
    1f26:	8f 7e       	andi	r24, 0xEF	; 239
    1f28:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1f2c:	80 91 e2 00 	lds	r24, 0x00E2
    1f30:	81 60       	ori	r24, 0x01	; 1
    1f32:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1f36:	80 91 d8 01 	lds	r24, 0x01D8
    1f3a:	88 23       	and	r24, r24
    1f3c:	11 f0       	breq	.+4      	; 0x1f42 <__vector_10+0x116>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1f3e:	84 e0       	ldi	r24, 0x04	; 4
    1f40:	07 c0       	rjmp	.+14     	; 0x1f50 <__vector_10+0x124>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1f42:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1f46:	87 fd       	sbrc	r24, 7
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <__vector_10+0x122>
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	01 c0       	rjmp	.+2      	; 0x1f50 <__vector_10+0x124>
    1f4e:	83 e0       	ldi	r24, 0x03	; 3
    1f50:	80 93 dc 01 	sts	0x01DC, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1f54:	0e 94 93 0c 	call	0x1926	; 0x1926 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1f58:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1f5c:	83 ff       	sbrs	r24, 3
    1f5e:	29 c0       	rjmp	.+82     	; 0x1fb2 <__vector_10+0x186>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1f60:	80 91 e2 00 	lds	r24, 0x00E2
    1f64:	83 ff       	sbrs	r24, 3
    1f66:	25 c0       	rjmp	.+74     	; 0x1fb2 <__vector_10+0x186>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1f68:	80 91 e1 00 	lds	r24, 0x00E1
    1f6c:	87 7f       	andi	r24, 0xF7	; 247
    1f6e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1f72:	82 e0       	ldi	r24, 0x02	; 2
    1f74:	80 93 dc 01 	sts	0x01DC, r24
		USB_Device_ConfigurationNumber = 0;
    1f78:	10 92 d8 01 	sts	0x01D8, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1f7c:	80 91 e1 00 	lds	r24, 0x00E1
    1f80:	8e 7f       	andi	r24, 0xFE	; 254
    1f82:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1f86:	80 91 e2 00 	lds	r24, 0x00E2
    1f8a:	8e 7f       	andi	r24, 0xFE	; 254
    1f8c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1f90:	80 91 e2 00 	lds	r24, 0x00E2
    1f94:	80 61       	ori	r24, 0x10	; 16
    1f96:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1f9a:	42 e0       	ldi	r20, 0x02	; 2
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1fa4:	80 91 f0 00 	lds	r24, 0x00F0
    1fa8:	88 60       	ori	r24, 0x08	; 8
    1faa:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1fae:	0e 94 21 0b 	call	0x1642	; 0x1642 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1fb2:	ff 91       	pop	r31
    1fb4:	ef 91       	pop	r30
    1fb6:	bf 91       	pop	r27
    1fb8:	af 91       	pop	r26
    1fba:	9f 91       	pop	r25
    1fbc:	8f 91       	pop	r24
    1fbe:	7f 91       	pop	r23
    1fc0:	6f 91       	pop	r22
    1fc2:	5f 91       	pop	r21
    1fc4:	4f 91       	pop	r20
    1fc6:	3f 91       	pop	r19
    1fc8:	2f 91       	pop	r18
    1fca:	0f 90       	pop	r0
    1fcc:	0b be       	out	0x3b, r0	; 59
    1fce:	0f 90       	pop	r0
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	0f 90       	pop	r0
    1fd4:	1f 90       	pop	r1
    1fd6:	18 95       	reti

00001fd8 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1fd8:	1f 92       	push	r1
    1fda:	0f 92       	push	r0
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	0f 92       	push	r0
    1fe0:	11 24       	eor	r1, r1
    1fe2:	0b b6       	in	r0, 0x3b	; 59
    1fe4:	0f 92       	push	r0
    1fe6:	2f 93       	push	r18
    1fe8:	3f 93       	push	r19
    1fea:	4f 93       	push	r20
    1fec:	5f 93       	push	r21
    1fee:	6f 93       	push	r22
    1ff0:	7f 93       	push	r23
    1ff2:	8f 93       	push	r24
    1ff4:	9f 93       	push	r25
    1ff6:	af 93       	push	r26
    1ff8:	bf 93       	push	r27
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	ef 93       	push	r30
    2000:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2002:	c0 91 e9 00 	lds	r28, 0x00E9
    2006:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2008:	80 91 ec 00 	lds	r24, 0x00EC
    200c:	d8 2f       	mov	r29, r24
    200e:	d1 70       	andi	r29, 0x01	; 1
    2010:	80 fd       	sbrc	r24, 0
    2012:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2014:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    2018:	80 91 f0 00 	lds	r24, 0x00F0
    201c:	87 7f       	andi	r24, 0xF7	; 247
    201e:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    2022:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    2024:	0e 94 34 10 	call	0x2068	; 0x2068 <USB_Device_ProcessControlRequest>
    2028:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    202c:	80 91 f0 00 	lds	r24, 0x00F0
    2030:	88 60       	ori	r24, 0x08	; 8
    2032:	80 93 f0 00 	sts	0x00F0, r24
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2036:	cd 2b       	or	r28, r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2038:	cf 70       	andi	r28, 0x0F	; 15
    203a:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    203e:	ff 91       	pop	r31
    2040:	ef 91       	pop	r30
    2042:	df 91       	pop	r29
    2044:	cf 91       	pop	r28
    2046:	bf 91       	pop	r27
    2048:	af 91       	pop	r26
    204a:	9f 91       	pop	r25
    204c:	8f 91       	pop	r24
    204e:	7f 91       	pop	r23
    2050:	6f 91       	pop	r22
    2052:	5f 91       	pop	r21
    2054:	4f 91       	pop	r20
    2056:	3f 91       	pop	r19
    2058:	2f 91       	pop	r18
    205a:	0f 90       	pop	r0
    205c:	0b be       	out	0x3b, r0	; 59
    205e:	0f 90       	pop	r0
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	0f 90       	pop	r0
    2064:	1f 90       	pop	r1
    2066:	18 95       	reti

00002068 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    2068:	1f 93       	push	r17
    206a:	cf 93       	push	r28
    206c:	df 93       	push	r29
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	aa 97       	sbiw	r28, 0x2a	; 42
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	de bf       	out	0x3e, r29	; 62
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	cd bf       	out	0x3d, r28	; 61
    207e:	ed ed       	ldi	r30, 0xDD	; 221
    2080:	f1 e0       	ldi	r31, 0x01	; 1
    2082:	88 e0       	ldi	r24, 0x08	; 8
    2084:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2086:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    208a:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    208c:	8e 13       	cpse	r24, r30
    208e:	fb cf       	rjmp	.-10     	; 0x2086 <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    2090:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2094:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    2098:	83 ff       	sbrs	r24, 3
    209a:	1f c1       	rjmp	.+574    	; 0x22da <__stack+0x1db>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    209c:	80 91 dd 01 	lds	r24, 0x01DD

		switch (USB_ControlRequest.bRequest)
    20a0:	90 91 de 01 	lds	r25, 0x01DE
    20a4:	49 2f       	mov	r20, r25
    20a6:	50 e0       	ldi	r21, 0x00	; 0
    20a8:	4a 30       	cpi	r20, 0x0A	; 10
    20aa:	51 05       	cpc	r21, r1
    20ac:	08 f0       	brcs	.+2      	; 0x20b0 <USB_Device_ProcessControlRequest+0x48>
    20ae:	15 c1       	rjmp	.+554    	; 0x22da <__stack+0x1db>
    20b0:	fa 01       	movw	r30, r20
    20b2:	ec 5a       	subi	r30, 0xAC	; 172
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	0c 94 30 2b 	jmp	0x5660	; 0x5660 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    20ba:	80 38       	cpi	r24, 0x80	; 128
    20bc:	81 f0       	breq	.+32     	; 0x20de <USB_Device_ProcessControlRequest+0x76>
    20be:	82 38       	cpi	r24, 0x82	; 130
    20c0:	09 f0       	breq	.+2      	; 0x20c4 <USB_Device_ProcessControlRequest+0x5c>
    20c2:	0b c1       	rjmp	.+534    	; 0x22da <__stack+0x1db>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20c4:	80 91 e1 01 	lds	r24, 0x01E1
    20c8:	8f 70       	andi	r24, 0x0F	; 15
    20ca:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    20ce:	80 91 eb 00 	lds	r24, 0x00EB
    20d2:	85 fb       	bst	r24, 5
    20d4:	88 27       	eor	r24, r24
    20d6:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20d8:	10 92 e9 00 	sts	0x00E9, r1
    20dc:	06 c0       	rjmp	.+12     	; 0x20ea <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    20de:	80 91 d9 01 	lds	r24, 0x01D9
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    20e2:	90 91 da 01 	lds	r25, 0x01DA
    20e6:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    20e8:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20ea:	90 91 e8 00 	lds	r25, 0x00E8
    20ee:	97 7f       	andi	r25, 0xF7	; 247
    20f0:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    20f4:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    20f8:	10 92 f1 00 	sts	0x00F1, r1
    20fc:	c8 c0       	rjmp	.+400    	; 0x228e <__stack+0x18f>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    20fe:	28 2f       	mov	r18, r24
    2100:	2d 7f       	andi	r18, 0xFD	; 253
    2102:	09 f0       	breq	.+2      	; 0x2106 <__stack+0x7>
    2104:	ea c0       	rjmp	.+468    	; 0x22da <__stack+0x1db>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    2106:	88 23       	and	r24, r24
    2108:	19 f0       	breq	.+6      	; 0x2110 <__stack+0x11>
    210a:	82 30       	cpi	r24, 0x02	; 2
    210c:	61 f0       	breq	.+24     	; 0x2126 <__stack+0x27>
    210e:	e5 c0       	rjmp	.+458    	; 0x22da <__stack+0x1db>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    2110:	80 91 df 01 	lds	r24, 0x01DF
    2114:	81 30       	cpi	r24, 0x01	; 1
    2116:	09 f0       	breq	.+2      	; 0x211a <__stack+0x1b>
    2118:	e0 c0       	rjmp	.+448    	; 0x22da <__stack+0x1db>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    211a:	93 30       	cpi	r25, 0x03	; 3
    211c:	09 f0       	breq	.+2      	; 0x2120 <__stack+0x21>
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	80 93 da 01 	sts	0x01DA, r24
    2124:	2b c0       	rjmp	.+86     	; 0x217c <__stack+0x7d>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2126:	80 91 df 01 	lds	r24, 0x01DF
    212a:	81 11       	cpse	r24, r1
    212c:	27 c0       	rjmp	.+78     	; 0x217c <__stack+0x7d>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    212e:	80 91 e1 01 	lds	r24, 0x01E1
    2132:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    2134:	09 f4       	brne	.+2      	; 0x2138 <__stack+0x39>
    2136:	d1 c0       	rjmp	.+418    	; 0x22da <__stack+0x1db>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2138:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    213c:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2140:	20 ff       	sbrs	r18, 0
    2142:	1c c0       	rjmp	.+56     	; 0x217c <__stack+0x7d>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2144:	93 30       	cpi	r25, 0x03	; 3
    2146:	21 f4       	brne	.+8      	; 0x2150 <__stack+0x51>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2148:	80 91 eb 00 	lds	r24, 0x00EB
    214c:	80 62       	ori	r24, 0x20	; 32
    214e:	14 c0       	rjmp	.+40     	; 0x2178 <__stack+0x79>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2150:	90 91 eb 00 	lds	r25, 0x00EB
    2154:	90 61       	ori	r25, 0x10	; 16
    2156:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    215a:	21 e0       	ldi	r18, 0x01	; 1
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	a9 01       	movw	r20, r18
    2160:	02 c0       	rjmp	.+4      	; 0x2166 <__stack+0x67>
    2162:	44 0f       	add	r20, r20
    2164:	55 1f       	adc	r21, r21
    2166:	8a 95       	dec	r24
    2168:	e2 f7       	brpl	.-8      	; 0x2162 <__stack+0x63>
    216a:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
    216e:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2172:	80 91 eb 00 	lds	r24, 0x00EB
    2176:	88 60       	ori	r24, 0x08	; 8
    2178:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    217c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2180:	80 91 e8 00 	lds	r24, 0x00E8
    2184:	87 7f       	andi	r24, 0xF7	; 247
    2186:	86 c0       	rjmp	.+268    	; 0x2294 <__stack+0x195>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2188:	81 11       	cpse	r24, r1
    218a:	a7 c0       	rjmp	.+334    	; 0x22da <__stack+0x1db>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    218c:	10 91 df 01 	lds	r17, 0x01DF
    2190:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2192:	80 91 e3 00 	lds	r24, 0x00E3
    2196:	80 78       	andi	r24, 0x80	; 128
    2198:	81 2b       	or	r24, r17
    219a:	80 93 e3 00 	sts	0x00E3, r24
    219e:	80 91 e8 00 	lds	r24, 0x00E8
    21a2:	87 7f       	andi	r24, 0xF7	; 247
    21a4:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    21a8:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    21ac:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    21b0:	80 ff       	sbrs	r24, 0
    21b2:	fc cf       	rjmp	.-8      	; 0x21ac <__stack+0xad>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    21b4:	80 91 e3 00 	lds	r24, 0x00E3
    21b8:	80 68       	ori	r24, 0x80	; 128
    21ba:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    21be:	11 11       	cpse	r17, r1
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <__stack+0xc7>
    21c2:	82 e0       	ldi	r24, 0x02	; 2
    21c4:	01 c0       	rjmp	.+2      	; 0x21c8 <__stack+0xc9>
    21c6:	83 e0       	ldi	r24, 0x03	; 3
    21c8:	80 93 dc 01 	sts	0x01DC, r24
    21cc:	86 c0       	rjmp	.+268    	; 0x22da <__stack+0x1db>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    21ce:	80 58       	subi	r24, 0x80	; 128
    21d0:	82 30       	cpi	r24, 0x02	; 2
    21d2:	08 f0       	brcs	.+2      	; 0x21d6 <__stack+0xd7>
    21d4:	82 c0       	rjmp	.+260    	; 0x22da <__stack+0x1db>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    21d6:	80 91 df 01 	lds	r24, 0x01DF
    21da:	90 91 e0 01 	lds	r25, 0x01E0
    21de:	8c 3d       	cpi	r24, 0xDC	; 220
    21e0:	53 e0       	ldi	r21, 0x03	; 3
    21e2:	95 07       	cpc	r25, r21
    21e4:	79 f5       	brne	.+94     	; 0x2244 <__stack+0x145>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    21e6:	83 e0       	ldi	r24, 0x03	; 3
    21e8:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    21ea:	8a e2       	ldi	r24, 0x2A	; 42
    21ec:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    21ee:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    21f0:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    21f2:	de 01       	movw	r26, r28
    21f4:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    21f6:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    21f8:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    21fa:	51 e2       	ldi	r21, 0x21	; 33
    21fc:	e3 2f       	mov	r30, r19
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	50 93 57 00 	sts	0x0057, r21
    2204:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    2206:	20 ff       	sbrs	r18, 0
    2208:	03 c0       	rjmp	.+6      	; 0x2210 <__stack+0x111>
					{
						SerialByte >>= 4;
    220a:	e2 95       	swap	r30
    220c:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    220e:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2210:	ef 70       	andi	r30, 0x0F	; 15
    2212:	8e 2f       	mov	r24, r30
    2214:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2216:	ea 30       	cpi	r30, 0x0A	; 10
    2218:	10 f0       	brcs	.+4      	; 0x221e <__stack+0x11f>
    221a:	c7 96       	adiw	r24, 0x37	; 55
    221c:	01 c0       	rjmp	.+2      	; 0x2220 <__stack+0x121>
    221e:	c0 96       	adiw	r24, 0x30	; 48
    2220:	8d 93       	st	X+, r24
    2222:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2224:	2f 5f       	subi	r18, 0xFF	; 255
    2226:	24 31       	cpi	r18, 0x14	; 20
    2228:	49 f7       	brne	.-46     	; 0x21fc <__stack+0xfd>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    222a:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    222c:	80 91 e8 00 	lds	r24, 0x00E8
    2230:	87 7f       	andi	r24, 0xF7	; 247
    2232:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2236:	6a e2       	ldi	r22, 0x2A	; 42
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	ce 01       	movw	r24, r28
    223c:	01 96       	adiw	r24, 0x01	; 1
    223e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <Endpoint_Write_Control_Stream_LE>
    2242:	14 c0       	rjmp	.+40     	; 0x226c <__stack+0x16d>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2244:	ae 01       	movw	r20, r28
    2246:	4f 5f       	subi	r20, 0xFF	; 255
    2248:	5f 4f       	sbci	r21, 0xFF	; 255
    224a:	60 91 e1 01 	lds	r22, 0x01E1
    224e:	0e 94 99 0c 	call	0x1932	; 0x1932 <CALLBACK_USB_GetDescriptor>
    2252:	bc 01       	movw	r22, r24
    2254:	89 2b       	or	r24, r25
    2256:	09 f4       	brne	.+2      	; 0x225a <__stack+0x15b>
    2258:	40 c0       	rjmp	.+128    	; 0x22da <__stack+0x1db>
    225a:	90 91 e8 00 	lds	r25, 0x00E8
    225e:	97 7f       	andi	r25, 0xF7	; 247
    2260:	90 93 e8 00 	sts	0x00E8, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	9a 81       	ldd	r25, Y+2	; 0x02
    2268:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    226c:	80 91 e8 00 	lds	r24, 0x00E8
    2270:	8b 77       	andi	r24, 0x7B	; 123
    2272:	80 93 e8 00 	sts	0x00E8, r24
    2276:	31 c0       	rjmp	.+98     	; 0x22da <__stack+0x1db>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2278:	80 38       	cpi	r24, 0x80	; 128
    227a:	79 f5       	brne	.+94     	; 0x22da <__stack+0x1db>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    227c:	80 91 e8 00 	lds	r24, 0x00E8
    2280:	87 7f       	andi	r24, 0xF7	; 247
    2282:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2286:	80 91 d8 01 	lds	r24, 0x01D8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    228a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    228e:	80 91 e8 00 	lds	r24, 0x00E8
    2292:	8e 77       	andi	r24, 0x7E	; 126
    2294:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2298:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <Endpoint_ClearStatusStage>
    229c:	1e c0       	rjmp	.+60     	; 0x22da <__stack+0x1db>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    229e:	81 11       	cpse	r24, r1
    22a0:	1c c0       	rjmp	.+56     	; 0x22da <__stack+0x1db>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    22a2:	90 91 df 01 	lds	r25, 0x01DF
    22a6:	92 30       	cpi	r25, 0x02	; 2
    22a8:	c0 f4       	brcc	.+48     	; 0x22da <__stack+0x1db>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22aa:	80 91 e8 00 	lds	r24, 0x00E8
    22ae:	87 7f       	andi	r24, 0xF7	; 247
    22b0:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    22b4:	90 93 d8 01 	sts	0x01D8, r25

	Endpoint_ClearStatusStage();
    22b8:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    22bc:	80 91 d8 01 	lds	r24, 0x01D8
    22c0:	81 11       	cpse	r24, r1
    22c2:	06 c0       	rjmp	.+12     	; 0x22d0 <__stack+0x1d1>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    22c4:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    22c8:	87 fd       	sbrc	r24, 7
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <__stack+0x1d1>
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	01 c0       	rjmp	.+2      	; 0x22d2 <__stack+0x1d3>
    22d0:	84 e0       	ldi	r24, 0x04	; 4
    22d2:	80 93 dc 01 	sts	0x01DC, r24

	EVENT_USB_Device_ConfigurationChanged();
    22d6:	0e 94 66 0b 	call	0x16cc	; 0x16cc <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    22da:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    22de:	83 ff       	sbrs	r24, 3
    22e0:	0a c0       	rjmp	.+20     	; 0x22f6 <__stack+0x1f7>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22e2:	80 91 e8 00 	lds	r24, 0x00E8
    22e6:	87 7f       	andi	r24, 0xF7	; 247
    22e8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    22ec:	80 91 eb 00 	lds	r24, 0x00EB
    22f0:	80 62       	ori	r24, 0x20	; 32
    22f2:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    22f6:	aa 96       	adiw	r28, 0x2a	; 42
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	de bf       	out	0x3e, r29	; 62
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	1f 91       	pop	r17
    2308:	08 95       	ret

0000230a <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    230a:	90 93 68 01 	sts	0x0168, r25
    230e:	80 93 67 01 	sts	0x0167, r24
    2312:	08 95       	ret

00002314 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    2314:	e0 91 67 01 	lds	r30, 0x0167
    2318:	f0 91 68 01 	lds	r31, 0x0168
    231c:	30 97       	sbiw	r30, 0x00	; 0
    231e:	21 f0       	breq	.+8      	; 0x2328 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    2320:	01 90       	ld	r0, Z+
    2322:	f0 81       	ld	r31, Z
    2324:	e0 2d       	mov	r30, r0
    2326:	09 94       	ijmp
}
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	08 95       	ret

0000232c <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    232c:	ef 92       	push	r14
    232e:	ff 92       	push	r15
    2330:	0f 93       	push	r16
    2332:	1f 93       	push	r17
    2334:	cf 93       	push	r28
    2336:	df 93       	push	r29
    if (!driver) return;
    2338:	e0 91 67 01 	lds	r30, 0x0167
    233c:	f0 91 68 01 	lds	r31, 0x0168
    2340:	30 97       	sbiw	r30, 0x00	; 0
    2342:	b1 f1       	breq	.+108    	; 0x23b0 <host_keyboard_send+0x84>
    2344:	8c 01       	movw	r16, r24
    (*driver->send_keyboard)(report);
    2346:	02 80       	ldd	r0, Z+2	; 0x02
    2348:	f3 81       	ldd	r31, Z+3	; 0x03
    234a:	e0 2d       	mov	r30, r0
    234c:	09 95       	icall

    if (debug_keyboard) {
    234e:	80 91 c7 01 	lds	r24, 0x01C7
    2352:	82 ff       	sbrs	r24, 2
    2354:	2d c0       	rjmp	.+90     	; 0x23b0 <host_keyboard_send+0x84>
        dprint("keyboard_report: ");
    2356:	80 ff       	sbrs	r24, 0
    2358:	04 c0       	rjmp	.+8      	; 0x2362 <host_keyboard_send+0x36>
    235a:	8d ea       	ldi	r24, 0xAD	; 173
    235c:	95 e0       	ldi	r25, 0x05	; 5
    235e:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    2362:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2364:	10 e1       	ldi	r17, 0x10	; 16
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2366:	87 ea       	ldi	r24, 0xA7	; 167
    2368:	e8 2e       	mov	r14, r24
    236a:	85 e0       	ldi	r24, 0x05	; 5
    236c:	f8 2e       	mov	r15, r24
    236e:	80 91 c7 01 	lds	r24, 0x01C7
    2372:	80 ff       	sbrs	r24, 0
    2374:	0b c0       	rjmp	.+22     	; 0x238c <host_keyboard_send+0x60>
    2376:	88 81       	ld	r24, Y
    2378:	1f 92       	push	r1
    237a:	8f 93       	push	r24
    237c:	ff 92       	push	r15
    237e:	ef 92       	push	r14
    2380:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	11 50       	subi	r17, 0x01	; 1
    238e:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    2390:	11 11       	cpse	r17, r1
    2392:	ed cf       	rjmp	.-38     	; 0x236e <host_keyboard_send+0x42>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2394:	80 91 c7 01 	lds	r24, 0x01C7
    2398:	80 ff       	sbrs	r24, 0
    239a:	0a c0       	rjmp	.+20     	; 0x23b0 <host_keyboard_send+0x84>
    239c:	85 ea       	ldi	r24, 0xA5	; 165
    239e:	95 e0       	ldi	r25, 0x05	; 5
    }
}
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	1f 91       	pop	r17
    23a6:	0f 91       	pop	r16
    23a8:	ff 90       	pop	r15
    23aa:	ef 90       	pop	r14
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    23ac:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <xputs>
    }
}
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	1f 91       	pop	r17
    23b6:	0f 91       	pop	r16
    23b8:	ff 90       	pop	r15
    23ba:	ef 90       	pop	r14
    23bc:	08 95       	ret

000023be <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    23be:	e0 91 67 01 	lds	r30, 0x0167
    23c2:	f0 91 68 01 	lds	r31, 0x0168
    23c6:	30 97       	sbiw	r30, 0x00	; 0
    23c8:	21 f0       	breq	.+8      	; 0x23d2 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    23ca:	04 80       	ldd	r0, Z+4	; 0x04
    23cc:	f5 81       	ldd	r31, Z+5	; 0x05
    23ce:	e0 2d       	mov	r30, r0
    23d0:	09 94       	ijmp
    23d2:	08 95       	ret

000023d4 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    23d4:	20 91 65 01 	lds	r18, 0x0165
    23d8:	30 91 66 01 	lds	r19, 0x0166
    23dc:	82 17       	cp	r24, r18
    23de:	93 07       	cpc	r25, r19
    23e0:	71 f0       	breq	.+28     	; 0x23fe <host_system_send+0x2a>
    last_system_report = report;
    23e2:	90 93 66 01 	sts	0x0166, r25
    23e6:	80 93 65 01 	sts	0x0165, r24

    if (!driver) return;
    23ea:	e0 91 67 01 	lds	r30, 0x0167
    23ee:	f0 91 68 01 	lds	r31, 0x0168
    23f2:	30 97       	sbiw	r30, 0x00	; 0
    23f4:	21 f0       	breq	.+8      	; 0x23fe <host_system_send+0x2a>
    (*driver->send_system)(report);
    23f6:	06 80       	ldd	r0, Z+6	; 0x06
    23f8:	f7 81       	ldd	r31, Z+7	; 0x07
    23fa:	e0 2d       	mov	r30, r0
    23fc:	09 94       	ijmp
    23fe:	08 95       	ret

00002400 <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    2400:	20 91 63 01 	lds	r18, 0x0163
    2404:	30 91 64 01 	lds	r19, 0x0164
    2408:	82 17       	cp	r24, r18
    240a:	93 07       	cpc	r25, r19
    240c:	71 f0       	breq	.+28     	; 0x242a <host_consumer_send+0x2a>
    last_consumer_report = report;
    240e:	90 93 64 01 	sts	0x0164, r25
    2412:	80 93 63 01 	sts	0x0163, r24

    if (!driver) return;
    2416:	e0 91 67 01 	lds	r30, 0x0167
    241a:	f0 91 68 01 	lds	r31, 0x0168
    241e:	30 97       	sbiw	r30, 0x00	; 0
    2420:	21 f0       	breq	.+8      	; 0x242a <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    2422:	00 84       	ldd	r0, Z+8	; 0x08
    2424:	f1 85       	ldd	r31, Z+9	; 0x09
    2426:	e0 2d       	mov	r30, r0
    2428:	09 94       	ijmp
    242a:	08 95       	ret

0000242c <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    242c:	08 95       	ret

0000242e <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    242e:	0c 94 16 12 	jmp	0x242c	; 0x242c <matrix_setup>

00002432 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    2432:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <timer_init>
    matrix_init();
    2436:	0e 94 37 08 	call	0x106e	; 0x106e <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    243a:	0c 94 80 20 	jmp	0x4100	; 0x4100 <bootmagic>

0000243e <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    243e:	4f 92       	push	r4
    2440:	5f 92       	push	r5
    2442:	7f 92       	push	r7
    2444:	8f 92       	push	r8
    2446:	9f 92       	push	r9
    2448:	af 92       	push	r10
    244a:	bf 92       	push	r11
    244c:	cf 92       	push	r12
    244e:	df 92       	push	r13
    2450:	ef 92       	push	r14
    2452:	ff 92       	push	r15
    2454:	0f 93       	push	r16
    2456:	1f 93       	push	r17
    2458:	cf 93       	push	r28
    245a:	df 93       	push	r29
    245c:	00 d0       	rcall	.+0      	; 0x245e <keyboard_task+0x20>
    245e:	00 d0       	rcall	.+0      	; 0x2460 <keyboard_task+0x22>
    2460:	1f 92       	push	r1
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2466:	0e 94 57 08 	call	0x10ae	; 0x10ae <matrix_scan>
    246a:	9a e6       	ldi	r25, 0x6A	; 106
    246c:	c9 2e       	mov	r12, r25
    246e:	91 e0       	ldi	r25, 0x01	; 1
    2470:	d9 2e       	mov	r13, r25
    2472:	00 e0       	ldi	r16, 0x00	; 0
    2474:	10 e0       	ldi	r17, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2476:	aa 24       	eor	r10, r10
    2478:	a3 94       	inc	r10
    247a:	b1 2c       	mov	r11, r1
    247c:	70 2e       	mov	r7, r16
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    247e:	80 2f       	mov	r24, r16
    2480:	0e 94 74 09 	call	0x12e8	; 0x12e8 <matrix_get_row>
    2484:	4c 01       	movw	r8, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    2486:	f6 01       	movw	r30, r12
    2488:	41 90       	ld	r4, Z+
    248a:	51 90       	ld	r5, Z+
    248c:	6f 01       	movw	r12, r30
    248e:	48 26       	eor	r4, r24
    2490:	59 26       	eor	r5, r25
        if (matrix_change) {
    2492:	41 14       	cp	r4, r1
    2494:	51 04       	cpc	r5, r1
    2496:	b1 f4       	brne	.+44     	; 0x24c4 <keyboard_task+0x86>
    2498:	0f 5f       	subi	r16, 0xFF	; 255
    249a:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    249c:	05 30       	cpi	r16, 0x05	; 5
    249e:	11 05       	cpc	r17, r1
    24a0:	69 f7       	brne	.-38     	; 0x247c <keyboard_task+0x3e>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    24a2:	8f ef       	ldi	r24, 0xFF	; 255
    24a4:	89 83       	std	Y+1, r24	; 0x01
    24a6:	8a 83       	std	Y+2, r24	; 0x02
    24a8:	1b 82       	std	Y+3, r1	; 0x03
    24aa:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <timer_read>
    24ae:	81 60       	ori	r24, 0x01	; 1
    24b0:	78 2f       	mov	r23, r24
    24b2:	9d 83       	std	Y+5, r25	; 0x05
    24b4:	8c 83       	std	Y+4, r24	; 0x04
    24b6:	49 81       	ldd	r20, Y+1	; 0x01
    24b8:	5a 81       	ldd	r21, Y+2	; 0x02
    24ba:	6b 81       	ldd	r22, Y+3	; 0x03
    24bc:	8d 81       	ldd	r24, Y+5	; 0x05
    24be:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <action_exec>
    24c2:	41 c0       	rjmp	.+130    	; 0x2546 <keyboard_task+0x108>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    24c4:	80 91 c7 01 	lds	r24, 0x01C7
    24c8:	81 fd       	sbrc	r24, 1
    24ca:	0e 94 7d 09 	call	0x12fa	; 0x12fa <matrix_print>
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    24d2:	75 01       	movw	r14, r10
    24d4:	02 2e       	mov	r0, r18
    24d6:	02 c0       	rjmp	.+4      	; 0x24dc <keyboard_task+0x9e>
    24d8:	ee 0c       	add	r14, r14
    24da:	ff 1c       	adc	r15, r15
    24dc:	0a 94       	dec	r0
    24de:	e2 f7       	brpl	.-8      	; 0x24d8 <keyboard_task+0x9a>
    24e0:	c7 01       	movw	r24, r14
    24e2:	84 21       	and	r24, r4
    24e4:	95 21       	and	r25, r5
    24e6:	89 2b       	or	r24, r25
    24e8:	41 f1       	breq	.+80     	; 0x253a <keyboard_task+0xfc>
                    keyevent_t e = (keyevent_t){
    24ea:	29 83       	std	Y+1, r18	; 0x01
    24ec:	7a 82       	std	Y+2, r7	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    24ee:	8e 20       	and	r8, r14
    24f0:	9f 20       	and	r9, r15
    24f2:	91 e0       	ldi	r25, 0x01	; 1
    24f4:	89 28       	or	r8, r9
    24f6:	09 f4       	brne	.+2      	; 0x24fa <keyboard_task+0xbc>
    24f8:	90 e0       	ldi	r25, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    24fa:	9b 83       	std	Y+3, r25	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    24fc:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <timer_read>
    2500:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    2502:	78 2f       	mov	r23, r24
    2504:	9d 83       	std	Y+5, r25	; 0x05
    2506:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    2508:	49 81       	ldd	r20, Y+1	; 0x01
    250a:	5a 81       	ldd	r21, Y+2	; 0x02
    250c:	6b 81       	ldd	r22, Y+3	; 0x03
    250e:	8d 81       	ldd	r24, Y+5	; 0x05
    2510:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <action_exec>
                    hook_matrix_change(e);
    2514:	49 81       	ldd	r20, Y+1	; 0x01
    2516:	5a 81       	ldd	r21, Y+2	; 0x02
    2518:	6b 81       	ldd	r22, Y+3	; 0x03
    251a:	7c 81       	ldd	r23, Y+4	; 0x04
    251c:	8d 81       	ldd	r24, Y+5	; 0x05
    251e:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    2522:	00 0f       	add	r16, r16
    2524:	11 1f       	adc	r17, r17
    2526:	f8 01       	movw	r30, r16
    2528:	e6 59       	subi	r30, 0x96	; 150
    252a:	fe 4f       	sbci	r31, 0xFE	; 254
    252c:	80 81       	ld	r24, Z
    252e:	91 81       	ldd	r25, Z+1	; 0x01
    2530:	e8 26       	eor	r14, r24
    2532:	f9 26       	eor	r15, r25
    2534:	f1 82       	std	Z+1, r15	; 0x01
    2536:	e0 82       	st	Z, r14
    2538:	06 c0       	rjmp	.+12     	; 0x2546 <keyboard_task+0x108>
    253a:	2f 5f       	subi	r18, 0xFF	; 255
    253c:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    253e:	2e 30       	cpi	r18, 0x0E	; 14
    2540:	31 05       	cpc	r19, r1
    2542:	39 f6       	brne	.-114    	; 0x24d2 <keyboard_task+0x94>
    2544:	a9 cf       	rjmp	.-174    	; 0x2498 <keyboard_task+0x5a>
    // call with pseudo tick event when no real key event.
    action_exec(TICK);

MATRIX_LOOP_END:

    hook_keyboard_loop();
    2546:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    254a:	0e 94 0a 24 	call	0x4814	; 0x4814 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    254e:	10 91 69 01 	lds	r17, 0x0169
    2552:	0e 94 8a 11 	call	0x2314	; 0x2314 <host_keyboard_leds>
    2556:	18 17       	cp	r17, r24
    2558:	71 f1       	breq	.+92     	; 0x25b6 <keyboard_task+0x178>
        led_status = host_keyboard_leds();
    255a:	0e 94 8a 11 	call	0x2314	; 0x2314 <host_keyboard_leds>
    255e:	80 93 69 01 	sts	0x0169, r24
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    2562:	90 91 c7 01 	lds	r25, 0x01C7
    2566:	92 ff       	sbrs	r25, 2
    2568:	0e c0       	rjmp	.+28     	; 0x2586 <keyboard_task+0x148>
    256a:	90 ff       	sbrs	r25, 0
    256c:	0c c0       	rjmp	.+24     	; 0x2586 <keyboard_task+0x148>
    256e:	1f 92       	push	r1
    2570:	8f 93       	push	r24
    2572:	8f eb       	ldi	r24, 0xBF	; 191
    2574:	95 e0       	ldi	r25, 0x05	; 5
    2576:	9f 93       	push	r25
    2578:	8f 93       	push	r24
    257a:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    2586:	80 91 69 01 	lds	r24, 0x0169
    }
}
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	0f 90       	pop	r0
    2594:	df 91       	pop	r29
    2596:	cf 91       	pop	r28
    2598:	1f 91       	pop	r17
    259a:	0f 91       	pop	r16
    259c:	ff 90       	pop	r15
    259e:	ef 90       	pop	r14
    25a0:	df 90       	pop	r13
    25a2:	cf 90       	pop	r12
    25a4:	bf 90       	pop	r11
    25a6:	af 90       	pop	r10
    25a8:	9f 90       	pop	r9
    25aa:	8f 90       	pop	r8
    25ac:	7f 90       	pop	r7
    25ae:	5f 90       	pop	r5
    25b0:	4f 90       	pop	r4

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    25b2:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <hook_keyboard_leds_change>
    }
}
    25b6:	0f 90       	pop	r0
    25b8:	0f 90       	pop	r0
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	df 91       	pop	r29
    25c2:	cf 91       	pop	r28
    25c4:	1f 91       	pop	r17
    25c6:	0f 91       	pop	r16
    25c8:	ff 90       	pop	r15
    25ca:	ef 90       	pop	r14
    25cc:	df 90       	pop	r13
    25ce:	cf 90       	pop	r12
    25d0:	bf 90       	pop	r11
    25d2:	af 90       	pop	r10
    25d4:	9f 90       	pop	r9
    25d6:	8f 90       	pop	r8
    25d8:	7f 90       	pop	r7
    25da:	5f 90       	pop	r5
    25dc:	4f 90       	pop	r4
    25de:	08 95       	ret

000025e0 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    25e0:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <led_set>

000025e4 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	2b 97       	sbiw	r28, 0x0b	; 11
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	f8 94       	cli
    25f2:	de bf       	out	0x3e, r29	; 62
    25f4:	0f be       	out	0x3f, r0	; 63
    25f6:	cd bf       	out	0x3d, r28	; 61
    25f8:	94 2f       	mov	r25, r20
    25fa:	4f 83       	std	Y+7, r20	; 0x07
    25fc:	25 2f       	mov	r18, r21
    25fe:	58 87       	std	Y+8, r21	; 0x08
    2600:	69 87       	std	Y+9, r22	; 0x09
    2602:	7a 87       	std	Y+10, r23	; 0x0a
    2604:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2606:	4a 85       	ldd	r20, Y+10	; 0x0a
    2608:	5b 85       	ldd	r21, Y+11	; 0x0b
    260a:	45 2b       	or	r20, r21
    260c:	21 f0       	breq	.+8      	; 0x2616 <action_exec+0x32>
    260e:	2f 3f       	cpi	r18, 0xFF	; 255
    2610:	09 f5       	brne	.+66     	; 0x2654 <action_exec+0x70>
    2612:	9f 3f       	cpi	r25, 0xFF	; 255
    2614:	f9 f4       	brne	.+62     	; 0x2654 <action_exec+0x70>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    }

    keyrecord_t record = { .event = event };
    2616:	de 01       	movw	r26, r28
    2618:	11 96       	adiw	r26, 0x01	; 1
    261a:	86 e0       	ldi	r24, 0x06	; 6
    261c:	fd 01       	movw	r30, r26
    261e:	11 92       	st	Z+, r1
    2620:	8a 95       	dec	r24
    2622:	e9 f7       	brne	.-6      	; 0x261e <action_exec+0x3a>
    2624:	85 e0       	ldi	r24, 0x05	; 5
    2626:	fe 01       	movw	r30, r28
    2628:	37 96       	adiw	r30, 0x07	; 7
    262a:	01 90       	ld	r0, Z+
    262c:	0d 92       	st	X+, r0
    262e:	8a 95       	dec	r24
    2630:	e1 f7       	brne	.-8      	; 0x262a <action_exec+0x46>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    2632:	49 81       	ldd	r20, Y+1	; 0x01
    2634:	5a 81       	ldd	r21, Y+2	; 0x02
    2636:	6b 81       	ldd	r22, Y+3	; 0x03
    2638:	7c 81       	ldd	r23, Y+4	; 0x04
    263a:	8d 81       	ldd	r24, Y+5	; 0x05
    263c:	9e 81       	ldd	r25, Y+6	; 0x06
    263e:	0e 94 16 1a 	call	0x342c	; 0x342c <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    2642:	2b 96       	adiw	r28, 0x0b	; 11
    2644:	0f b6       	in	r0, 0x3f	; 63
    2646:	f8 94       	cli
    2648:	de bf       	out	0x3e, r29	; 62
    264a:	0f be       	out	0x3f, r0	; 63
    264c:	cd bf       	out	0x3d, r28	; 61
    264e:	df 91       	pop	r29
    2650:	cf 91       	pop	r28
    2652:	08 95       	ret
void action_exec(keyevent_t event)
{
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    2654:	4f 81       	ldd	r20, Y+7	; 0x07
    2656:	58 85       	ldd	r21, Y+8	; 0x08
    2658:	69 85       	ldd	r22, Y+9	; 0x09
    265a:	7a 85       	ldd	r23, Y+10	; 0x0a
    265c:	8b 85       	ldd	r24, Y+11	; 0x0b
    265e:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <hook_matrix_change>
    2662:	d9 cf       	rjmp	.-78     	; 0x2616 <action_exec+0x32>

00002664 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2664:	cf 93       	push	r28
    if (code == KC_NO) {
    2666:	88 23       	and	r24, r24
    2668:	09 f4       	brne	.+2      	; 0x266c <register_code+0x8>
    266a:	cd c0       	rjmp	.+410    	; 0x2806 <register_code+0x1a2>
    266c:	c8 2f       	mov	r28, r24
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    266e:	82 38       	cpi	r24, 0x82	; 130
    2670:	59 f4       	brne	.+22     	; 0x2688 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    2672:	0e 94 8a 11 	call	0x2314	; 0x2314 <host_keyboard_leds>
    2676:	81 fd       	sbrc	r24, 1
    2678:	c6 c0       	rjmp	.+396    	; 0x2806 <register_code+0x1a2>
#endif
        add_key(KC_CAPSLOCK);
    267a:	89 e3       	ldi	r24, 0x39	; 57
    267c:	0e 94 a1 1c 	call	0x3942	; 0x3942 <add_key>
        send_keyboard_report();
    2680:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2684:	89 e3       	ldi	r24, 0x39	; 57
    2686:	0c c0       	rjmp	.+24     	; 0x26a0 <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2688:	83 38       	cpi	r24, 0x83	; 131
    268a:	79 f4       	brne	.+30     	; 0x26aa <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    268c:	0e 94 8a 11 	call	0x2314	; 0x2314 <host_keyboard_leds>
    2690:	80 fd       	sbrc	r24, 0
    2692:	b9 c0       	rjmp	.+370    	; 0x2806 <register_code+0x1a2>
#endif
        add_key(KC_NUMLOCK);
    2694:	83 e5       	ldi	r24, 0x53	; 83
    2696:	0e 94 a1 1c 	call	0x3942	; 0x3942 <add_key>
        send_keyboard_report();
    269a:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <send_keyboard_report>
        del_key(KC_NUMLOCK);
    269e:	83 e5       	ldi	r24, 0x53	; 83
    26a0:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    26a4:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    26a6:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    26aa:	84 38       	cpi	r24, 0x84	; 132
    26ac:	59 f4       	brne	.+22     	; 0x26c4 <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    26ae:	0e 94 8a 11 	call	0x2314	; 0x2314 <host_keyboard_leds>
    26b2:	82 fd       	sbrc	r24, 2
    26b4:	a8 c0       	rjmp	.+336    	; 0x2806 <register_code+0x1a2>
#endif
        add_key(KC_SCROLLLOCK);
    26b6:	87 e4       	ldi	r24, 0x47	; 71
    26b8:	0e 94 a1 1c 	call	0x3942	; 0x3942 <add_key>
        send_keyboard_report();
    26bc:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    26c0:	87 e4       	ldi	r24, 0x47	; 71
    26c2:	ee cf       	rjmp	.-36     	; 0x26a0 <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    26c4:	8c ef       	ldi	r24, 0xFC	; 252
    26c6:	8c 0f       	add	r24, r28
    26c8:	81 3a       	cpi	r24, 0xA1	; 161
    26ca:	48 f4       	brcc	.+18     	; 0x26de <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    26cc:	8c 2f       	mov	r24, r28
    26ce:	0e 94 8a 28 	call	0x5114	; 0x5114 <command_proc>
    26d2:	81 11       	cpse	r24, r1
    26d4:	98 c0       	rjmp	.+304    	; 0x2806 <register_code+0x1a2>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    26d6:	8c 2f       	mov	r24, r28
    26d8:	0e 94 a1 1c 	call	0x3942	; 0x3942 <add_key>
    26dc:	e3 cf       	rjmp	.-58     	; 0x26a4 <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    26de:	80 e2       	ldi	r24, 0x20	; 32
    26e0:	8c 0f       	add	r24, r28
    26e2:	88 30       	cpi	r24, 0x08	; 8
    26e4:	48 f4       	brcc	.+18     	; 0x26f8 <register_code+0x94>
        add_mods(MOD_BIT(code));
    26e6:	c7 70       	andi	r28, 0x07	; 7
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	01 c0       	rjmp	.+2      	; 0x26ee <register_code+0x8a>
    26ec:	88 0f       	add	r24, r24
    26ee:	ca 95       	dec	r28
    26f0:	ea f7       	brpl	.-6      	; 0x26ec <register_code+0x88>
    26f2:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <add_mods>
    26f6:	d6 cf       	rjmp	.-84     	; 0x26a4 <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    26f8:	8b e5       	ldi	r24, 0x5B	; 91
    26fa:	8c 0f       	add	r24, r28
    26fc:	83 30       	cpi	r24, 0x03	; 3
    26fe:	78 f4       	brcc	.+30     	; 0x271e <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    2700:	c5 3a       	cpi	r28, 0xA5	; 165
    2702:	29 f0       	breq	.+10     	; 0x270e <register_code+0xaa>
    2704:	c6 3a       	cpi	r28, 0xA6	; 166
    2706:	31 f0       	breq	.+12     	; 0x2714 <register_code+0xb0>
    2708:	83 e8       	ldi	r24, 0x83	; 131
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	05 c0       	rjmp	.+10     	; 0x2718 <register_code+0xb4>
    270e:	81 e8       	ldi	r24, 0x81	; 129
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	02 c0       	rjmp	.+4      	; 0x2718 <register_code+0xb4>
    2714:	82 e8       	ldi	r24, 0x82	; 130
    2716:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2718:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    271a:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    271e:	88 e5       	ldi	r24, 0x58	; 88
    2720:	8c 0f       	add	r24, r28
    2722:	85 31       	cpi	r24, 0x15	; 21
    2724:	08 f0       	brcs	.+2      	; 0x2728 <register_code+0xc4>
    2726:	6f c0       	rjmp	.+222    	; 0x2806 <register_code+0x1a2>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2728:	c8 3a       	cpi	r28, 0xA8	; 168
    272a:	61 f1       	breq	.+88     	; 0x2784 <register_code+0x120>
    272c:	c9 3a       	cpi	r28, 0xA9	; 169
    272e:	69 f1       	breq	.+90     	; 0x278a <register_code+0x126>
    2730:	ca 3a       	cpi	r28, 0xAA	; 170
    2732:	71 f1       	breq	.+92     	; 0x2790 <register_code+0x12c>
    2734:	cb 3a       	cpi	r28, 0xAB	; 171
    2736:	79 f1       	breq	.+94     	; 0x2796 <register_code+0x132>
    2738:	cc 3a       	cpi	r28, 0xAC	; 172
    273a:	81 f1       	breq	.+96     	; 0x279c <register_code+0x138>
    273c:	cd 3a       	cpi	r28, 0xAD	; 173
    273e:	89 f1       	breq	.+98     	; 0x27a2 <register_code+0x13e>
    2740:	ce 3a       	cpi	r28, 0xAE	; 174
    2742:	91 f1       	breq	.+100    	; 0x27a8 <register_code+0x144>
    2744:	cf 3a       	cpi	r28, 0xAF	; 175
    2746:	99 f1       	breq	.+102    	; 0x27ae <register_code+0x14a>
    2748:	c1 3b       	cpi	r28, 0xB1	; 177
    274a:	a1 f1       	breq	.+104    	; 0x27b4 <register_code+0x150>
    274c:	c0 3b       	cpi	r28, 0xB0	; 176
    274e:	a9 f1       	breq	.+106    	; 0x27ba <register_code+0x156>
    2750:	c2 3b       	cpi	r28, 0xB2	; 178
    2752:	b1 f1       	breq	.+108    	; 0x27c0 <register_code+0x15c>
    2754:	c3 3b       	cpi	r28, 0xB3	; 179
    2756:	b9 f1       	breq	.+110    	; 0x27c6 <register_code+0x162>
    2758:	c4 3b       	cpi	r28, 0xB4	; 180
    275a:	c1 f1       	breq	.+112    	; 0x27cc <register_code+0x168>
    275c:	c5 3b       	cpi	r28, 0xB5	; 181
    275e:	c9 f1       	breq	.+114    	; 0x27d2 <register_code+0x16e>
    2760:	c6 3b       	cpi	r28, 0xB6	; 182
    2762:	d1 f1       	breq	.+116    	; 0x27d8 <register_code+0x174>
    2764:	c7 3b       	cpi	r28, 0xB7	; 183
    2766:	d9 f1       	breq	.+118    	; 0x27de <register_code+0x17a>
    2768:	c8 3b       	cpi	r28, 0xB8	; 184
    276a:	e1 f1       	breq	.+120    	; 0x27e4 <register_code+0x180>
    276c:	c9 3b       	cpi	r28, 0xB9	; 185
    276e:	e9 f1       	breq	.+122    	; 0x27ea <register_code+0x186>
    2770:	ca 3b       	cpi	r28, 0xBA	; 186
    2772:	f1 f1       	breq	.+124    	; 0x27f0 <register_code+0x18c>
    2774:	cb 3b       	cpi	r28, 0xBB	; 187
    2776:	f9 f1       	breq	.+126    	; 0x27f6 <register_code+0x192>
    2778:	cc 3b       	cpi	r28, 0xBC	; 188
    277a:	09 f4       	brne	.+2      	; 0x277e <register_code+0x11a>
    277c:	3f c0       	rjmp	.+126    	; 0x27fc <register_code+0x198>
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	3e c0       	rjmp	.+124    	; 0x2800 <register_code+0x19c>
    2784:	82 ee       	ldi	r24, 0xE2	; 226
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	3b c0       	rjmp	.+118    	; 0x2800 <register_code+0x19c>
    278a:	89 ee       	ldi	r24, 0xE9	; 233
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	38 c0       	rjmp	.+112    	; 0x2800 <register_code+0x19c>
    2790:	8a ee       	ldi	r24, 0xEA	; 234
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	35 c0       	rjmp	.+106    	; 0x2800 <register_code+0x19c>
    2796:	85 eb       	ldi	r24, 0xB5	; 181
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	32 c0       	rjmp	.+100    	; 0x2800 <register_code+0x19c>
    279c:	86 eb       	ldi	r24, 0xB6	; 182
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	2f c0       	rjmp	.+94     	; 0x2800 <register_code+0x19c>
    27a2:	83 eb       	ldi	r24, 0xB3	; 179
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	2c c0       	rjmp	.+88     	; 0x2800 <register_code+0x19c>
    27a8:	84 eb       	ldi	r24, 0xB4	; 180
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	29 c0       	rjmp	.+82     	; 0x2800 <register_code+0x19c>
    27ae:	87 eb       	ldi	r24, 0xB7	; 183
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	26 c0       	rjmp	.+76     	; 0x2800 <register_code+0x19c>
    27b4:	8c ec       	ldi	r24, 0xCC	; 204
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	23 c0       	rjmp	.+70     	; 0x2800 <register_code+0x19c>
    27ba:	8d ec       	ldi	r24, 0xCD	; 205
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	20 c0       	rjmp	.+64     	; 0x2800 <register_code+0x19c>
    27c0:	83 e8       	ldi	r24, 0x83	; 131
    27c2:	91 e0       	ldi	r25, 0x01	; 1
    27c4:	1d c0       	rjmp	.+58     	; 0x2800 <register_code+0x19c>
    27c6:	8a e8       	ldi	r24, 0x8A	; 138
    27c8:	91 e0       	ldi	r25, 0x01	; 1
    27ca:	1a c0       	rjmp	.+52     	; 0x2800 <register_code+0x19c>
    27cc:	82 e9       	ldi	r24, 0x92	; 146
    27ce:	91 e0       	ldi	r25, 0x01	; 1
    27d0:	17 c0       	rjmp	.+46     	; 0x2800 <register_code+0x19c>
    27d2:	84 e9       	ldi	r24, 0x94	; 148
    27d4:	91 e0       	ldi	r25, 0x01	; 1
    27d6:	14 c0       	rjmp	.+40     	; 0x2800 <register_code+0x19c>
    27d8:	81 e2       	ldi	r24, 0x21	; 33
    27da:	92 e0       	ldi	r25, 0x02	; 2
    27dc:	11 c0       	rjmp	.+34     	; 0x2800 <register_code+0x19c>
    27de:	83 e2       	ldi	r24, 0x23	; 35
    27e0:	92 e0       	ldi	r25, 0x02	; 2
    27e2:	0e c0       	rjmp	.+28     	; 0x2800 <register_code+0x19c>
    27e4:	84 e2       	ldi	r24, 0x24	; 36
    27e6:	92 e0       	ldi	r25, 0x02	; 2
    27e8:	0b c0       	rjmp	.+22     	; 0x2800 <register_code+0x19c>
    27ea:	85 e2       	ldi	r24, 0x25	; 37
    27ec:	92 e0       	ldi	r25, 0x02	; 2
    27ee:	08 c0       	rjmp	.+16     	; 0x2800 <register_code+0x19c>
    27f0:	86 e2       	ldi	r24, 0x26	; 38
    27f2:	92 e0       	ldi	r25, 0x02	; 2
    27f4:	05 c0       	rjmp	.+10     	; 0x2800 <register_code+0x19c>
    27f6:	87 e2       	ldi	r24, 0x27	; 39
    27f8:	92 e0       	ldi	r25, 0x02	; 2
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <register_code+0x19c>
    27fc:	8a e2       	ldi	r24, 0x2A	; 42
    27fe:	92 e0       	ldi	r25, 0x02	; 2
    }
}
    2800:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    2802:	0c 94 00 12 	jmp	0x2400	; 0x2400 <host_consumer_send>
    }
}
    2806:	cf 91       	pop	r28
    2808:	08 95       	ret

0000280a <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    280a:	88 23       	and	r24, r24
    280c:	09 f4       	brne	.+2      	; 0x2810 <unregister_code+0x6>
    280e:	4b c0       	rjmp	.+150    	; 0x28a6 <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2810:	82 38       	cpi	r24, 0x82	; 130
    2812:	59 f4       	brne	.+22     	; 0x282a <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    2814:	0e 94 8a 11 	call	0x2314	; 0x2314 <host_keyboard_leds>
    2818:	81 ff       	sbrs	r24, 1
    281a:	45 c0       	rjmp	.+138    	; 0x28a6 <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    281c:	89 e3       	ldi	r24, 0x39	; 57
    281e:	0e 94 a1 1c 	call	0x3942	; 0x3942 <add_key>
        send_keyboard_report();
    2822:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2826:	89 e3       	ldi	r24, 0x39	; 57
    2828:	0c c0       	rjmp	.+24     	; 0x2842 <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    282a:	83 38       	cpi	r24, 0x83	; 131
    282c:	71 f4       	brne	.+28     	; 0x284a <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    282e:	0e 94 8a 11 	call	0x2314	; 0x2314 <host_keyboard_leds>
    2832:	80 ff       	sbrs	r24, 0
    2834:	38 c0       	rjmp	.+112    	; 0x28a6 <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    2836:	83 e5       	ldi	r24, 0x53	; 83
    2838:	0e 94 a1 1c 	call	0x3942	; 0x3942 <add_key>
        send_keyboard_report();
    283c:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2840:	83 e5       	ldi	r24, 0x53	; 83
    2842:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <del_key>
        send_keyboard_report();
    2846:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    284a:	84 38       	cpi	r24, 0x84	; 132
    284c:	59 f4       	brne	.+22     	; 0x2864 <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    284e:	0e 94 8a 11 	call	0x2314	; 0x2314 <host_keyboard_leds>
    2852:	82 ff       	sbrs	r24, 2
    2854:	28 c0       	rjmp	.+80     	; 0x28a6 <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    2856:	87 e4       	ldi	r24, 0x47	; 71
    2858:	0e 94 a1 1c 	call	0x3942	; 0x3942 <add_key>
        send_keyboard_report();
    285c:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    2860:	87 e4       	ldi	r24, 0x47	; 71
    2862:	ef cf       	rjmp	.-34     	; 0x2842 <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2864:	9c ef       	ldi	r25, 0xFC	; 252
    2866:	98 0f       	add	r25, r24
    2868:	91 3a       	cpi	r25, 0xA1	; 161
    286a:	58 f3       	brcs	.-42     	; 0x2842 <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    286c:	90 e2       	ldi	r25, 0x20	; 32
    286e:	98 0f       	add	r25, r24
    2870:	98 30       	cpi	r25, 0x08	; 8
    2872:	50 f4       	brcc	.+20     	; 0x2888 <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    2874:	87 70       	andi	r24, 0x07	; 7
    2876:	91 e0       	ldi	r25, 0x01	; 1
    2878:	01 c0       	rjmp	.+2      	; 0x287c <unregister_code+0x72>
    287a:	99 0f       	add	r25, r25
    287c:	8a 95       	dec	r24
    287e:	ea f7       	brpl	.-6      	; 0x287a <unregister_code+0x70>
    2880:	89 2f       	mov	r24, r25
    2882:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <del_mods>
    2886:	df cf       	rjmp	.-66     	; 0x2846 <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2888:	9b e5       	ldi	r25, 0x5B	; 91
    288a:	98 0f       	add	r25, r24
    288c:	93 30       	cpi	r25, 0x03	; 3
    288e:	20 f4       	brcc	.+8      	; 0x2898 <unregister_code+0x8e>
        host_system_send(0);
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2898:	88 5a       	subi	r24, 0xA8	; 168
    289a:	85 31       	cpi	r24, 0x15	; 21
    289c:	20 f4       	brcc	.+8      	; 0x28a6 <unregister_code+0x9c>
        host_consumer_send(0);
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	0c 94 00 12 	jmp	0x2400	; 0x2400 <host_consumer_send>
    28a6:	08 95       	ret

000028a8 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    28a8:	88 23       	and	r24, r24
    28aa:	21 f0       	breq	.+8      	; 0x28b4 <register_mods+0xc>
        add_mods(mods);
    28ac:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <add_mods>
        send_keyboard_report();
    28b0:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <send_keyboard_report>
    28b4:	08 95       	ret

000028b6 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    28b6:	88 23       	and	r24, r24
    28b8:	21 f0       	breq	.+8      	; 0x28c2 <unregister_mods+0xc>
        del_mods(mods);
    28ba:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <del_mods>
        send_keyboard_report();
    28be:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <send_keyboard_report>
    28c2:	08 95       	ret

000028c4 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    28c4:	cf 92       	push	r12
    28c6:	df 92       	push	r13
    28c8:	ef 92       	push	r14
    28ca:	ff 92       	push	r15
    28cc:	0f 93       	push	r16
    28ce:	1f 93       	push	r17
    28d0:	cf 93       	push	r28
    28d2:	df 93       	push	r29
    28d4:	00 d0       	rcall	.+0      	; 0x28d6 <process_action+0x12>
    28d6:	00 d0       	rcall	.+0      	; 0x28d8 <process_action+0x14>
    28d8:	00 d0       	rcall	.+0      	; 0x28da <process_action+0x16>
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    keyevent_t event = record->event;
    28de:	25 e0       	ldi	r18, 0x05	; 5
    28e0:	fc 01       	movw	r30, r24
    28e2:	de 01       	movw	r26, r28
    28e4:	11 96       	adiw	r26, 0x01	; 1
    28e6:	01 90       	ld	r0, Z+
    28e8:	0d 92       	st	X+, r0
    28ea:	2a 95       	dec	r18
    28ec:	e1 f7       	brne	.-8      	; 0x28e6 <process_action+0x22>
    28ee:	fc 01       	movw	r30, r24
    28f0:	40 81       	ld	r20, Z
    28f2:	31 81       	ldd	r19, Z+1	; 0x01
    28f4:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    28f6:	25 81       	ldd	r18, Z+5	; 0x05
    28f8:	22 95       	swap	r18
    28fa:	2f 70       	andi	r18, 0x0F	; 15
    28fc:	63 81       	ldd	r22, Z+3	; 0x03
    28fe:	74 81       	ldd	r23, Z+4	; 0x04
    2900:	67 2b       	or	r22, r23
    2902:	09 f4       	brne	.+2      	; 0x2906 <process_action+0x42>
    2904:	d8 c2       	rjmp	.+1456   	; 0x2eb6 <process_action+0x5f2>
    2906:	3f 3f       	cpi	r19, 0xFF	; 255
    2908:	19 f4       	brne	.+6      	; 0x2910 <process_action+0x4c>
#endif

    if (IS_NOEVENT(event)) { return; }
    290a:	4f 3f       	cpi	r20, 0xFF	; 255
    290c:	09 f4       	brne	.+2      	; 0x2910 <process_action+0x4c>
    290e:	d3 c2       	rjmp	.+1446   	; 0x2eb6 <process_action+0x5f2>
    2910:	6c 01       	movw	r12, r24

    action_t action = layer_switch_get_action(event.key);
    2912:	49 83       	std	Y+1, r20	; 0x01
    2914:	3a 83       	std	Y+2, r19	; 0x02
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	9a 81       	ldd	r25, Y+2	; 0x02
    291a:	2e 83       	std	Y+6, r18	; 0x06
    291c:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <layer_switch_get_action>
    2920:	18 2f       	mov	r17, r24
    2922:	09 2f       	mov	r16, r25
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2924:	0e 94 5f 1c 	call	0x38be	; 0x38be <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2928:	0e 94 6f 1b 	call	0x36de	; 0x36de <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    292c:	e0 2f       	mov	r30, r16
    292e:	e2 95       	swap	r30
    2930:	ef 70       	andi	r30, 0x0F	; 15
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	e2 5a       	subi	r30, 0xA2	; 162
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	2e 81       	ldd	r18, Y+6	; 0x06
    293a:	0c 94 30 2b 	jmp	0x5660	; 0x5660 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    293e:	80 2f       	mov	r24, r16
    2940:	80 7f       	andi	r24, 0xF0	; 240
    2942:	90 2f       	mov	r25, r16
    2944:	9f 70       	andi	r25, 0x0F	; 15
    2946:	09 2f       	mov	r16, r25
    2948:	88 23       	and	r24, r24
    294a:	11 f0       	breq	.+4      	; 0x2950 <process_action+0x8c>
    294c:	02 95       	swap	r16
    294e:	00 7f       	andi	r16, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    2950:	ff 20       	and	r15, r15
    2952:	49 f0       	breq	.+18     	; 0x2966 <process_action+0xa2>
                    if (mods) {
    2954:	00 23       	and	r16, r16
    2956:	09 f4       	brne	.+2      	; 0x295a <process_action+0x96>
    2958:	5f c2       	rjmp	.+1214   	; 0x2e18 <process_action+0x554>
                        add_weak_mods(mods);
    295a:	80 2f       	mov	r24, r16
    295c:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <add_weak_mods>
                        send_keyboard_report();
    2960:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <send_keyboard_report>
    2964:	59 c2       	rjmp	.+1202   	; 0x2e18 <process_action+0x554>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2966:	81 2f       	mov	r24, r17
    2968:	0e 94 05 14 	call	0x280a	; 0x280a <unregister_code>
                    if (mods) {
    296c:	00 23       	and	r16, r16
    296e:	09 f4       	brne	.+2      	; 0x2972 <process_action+0xae>
    2970:	a2 c2       	rjmp	.+1348   	; 0x2eb6 <process_action+0x5f2>
                        del_weak_mods(mods);
    2972:	80 2f       	mov	r24, r16
    2974:	0e 94 65 1d 	call	0x3aca	; 0x3aca <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    2978:	26 96       	adiw	r28, 0x06	; 6
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	f8 94       	cli
    297e:	de bf       	out	0x3e, r29	; 62
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	cd bf       	out	0x3d, r28	; 61
    2984:	df 91       	pop	r29
    2986:	cf 91       	pop	r28
    2988:	1f 91       	pop	r17
    298a:	0f 91       	pop	r16
    298c:	ff 90       	pop	r15
    298e:	ef 90       	pop	r14
    2990:	df 90       	pop	r13
    2992:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    2994:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2998:	80 2f       	mov	r24, r16
    299a:	80 7f       	andi	r24, 0xF0	; 240
    299c:	90 2f       	mov	r25, r16
    299e:	9f 70       	andi	r25, 0x0F	; 15
    29a0:	09 2f       	mov	r16, r25
    29a2:	80 32       	cpi	r24, 0x20	; 32
    29a4:	11 f0       	breq	.+4      	; 0x29aa <process_action+0xe6>
    29a6:	02 95       	swap	r16
    29a8:	00 7f       	andi	r16, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    29aa:	11 23       	and	r17, r17
    29ac:	19 f0       	breq	.+6      	; 0x29b4 <process_action+0xf0>
    29ae:	11 30       	cpi	r17, 0x01	; 1
    29b0:	01 f1       	breq	.+64     	; 0x29f2 <process_action+0x12e>
    29b2:	29 c0       	rjmp	.+82     	; 0x2a06 <process_action+0x142>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    29b4:	ff 20       	and	r15, r15
    29b6:	a9 f0       	breq	.+42     	; 0x29e2 <process_action+0x11e>
                            if (tap_count == 0) {
                                register_mods(mods);
    29b8:	80 2f       	mov	r24, r16
                switch (action.layer_tap.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    29ba:	22 23       	and	r18, r18
    29bc:	49 f1       	breq	.+82     	; 0x2a10 <process_action+0x14c>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    29be:	21 30       	cpi	r18, 0x01	; 1
    29c0:	39 f5       	brne	.+78     	; 0x2a10 <process_action+0x14c>
            break;
#endif
        default:
            break;
    }
}
    29c2:	26 96       	adiw	r28, 0x06	; 6
    29c4:	0f b6       	in	r0, 0x3f	; 63
    29c6:	f8 94       	cli
    29c8:	de bf       	out	0x3e, r29	; 62
    29ca:	0f be       	out	0x3f, r0	; 63
    29cc:	cd bf       	out	0x3d, r28	; 61
    29ce:	df 91       	pop	r29
    29d0:	cf 91       	pop	r28
    29d2:	1f 91       	pop	r17
    29d4:	0f 91       	pop	r16
    29d6:	ff 90       	pop	r15
    29d8:	ef 90       	pop	r14
    29da:	df 90       	pop	r13
    29dc:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    29de:	0c 94 6f 1d 	jmp	0x3ade	; 0x3ade <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    29e2:	22 23       	and	r18, r18
    29e4:	19 f0       	breq	.+6      	; 0x29ec <process_action+0x128>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    29e6:	21 30       	cpi	r18, 0x01	; 1
    29e8:	09 f4       	brne	.+2      	; 0x29ec <process_action+0x128>
    29ea:	65 c2       	rjmp	.+1226   	; 0x2eb6 <process_action+0x5f2>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    29ec:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <clear_oneshot_mods>
    29f0:	2c c0       	rjmp	.+88     	; 0x2a4a <process_action+0x186>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    29f2:	ff 20       	and	r15, r15
    29f4:	e9 f0       	breq	.+58     	; 0x2a30 <process_action+0x16c>
                            if (tap_count <= TAPPING_TOGGLE) {
    29f6:	26 30       	cpi	r18, 0x06	; 6
    29f8:	08 f0       	brcs	.+2      	; 0x29fc <process_action+0x138>
    29fa:	5d c2       	rjmp	.+1210   	; 0x2eb6 <process_action+0x5f2>
                                if (mods & get_mods()) {
    29fc:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <get_mods>
    2a00:	80 23       	and	r24, r16
    2a02:	29 f0       	breq	.+10     	; 0x2a0e <process_action+0x14a>
    2a04:	22 c0       	rjmp	.+68     	; 0x2a4a <process_action+0x186>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2a06:	ff 20       	and	r15, r15
    2a08:	f1 f0       	breq	.+60     	; 0x2a46 <process_action+0x182>
                            if (tap_count > 0) {
    2a0a:	21 11       	cpse	r18, r1
    2a0c:	15 c0       	rjmp	.+42     	; 0x2a38 <process_action+0x174>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    2a0e:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2a10:	26 96       	adiw	r28, 0x06	; 6
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	f8 94       	cli
    2a16:	de bf       	out	0x3e, r29	; 62
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	cd bf       	out	0x3d, r28	; 61
    2a1c:	df 91       	pop	r29
    2a1e:	cf 91       	pop	r28
    2a20:	1f 91       	pop	r17
    2a22:	0f 91       	pop	r16
    2a24:	ff 90       	pop	r15
    2a26:	ef 90       	pop	r14
    2a28:	df 90       	pop	r13
    2a2a:	cf 90       	pop	r12
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    2a2c:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2a30:	25 30       	cpi	r18, 0x05	; 5
    2a32:	08 f0       	brcs	.+2      	; 0x2a36 <process_action+0x172>
    2a34:	40 c2       	rjmp	.+1152   	; 0x2eb6 <process_action+0x5f2>
    2a36:	09 c0       	rjmp	.+18     	; 0x2a4a <process_action+0x186>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    2a38:	f6 01       	movw	r30, r12
    2a3a:	85 81       	ldd	r24, Z+5	; 0x05
    2a3c:	80 ff       	sbrs	r24, 0
    2a3e:	ec c1       	rjmp	.+984    	; 0x2e18 <process_action+0x554>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2a40:	8f 70       	andi	r24, 0x0F	; 15
    2a42:	85 83       	std	Z+5, r24	; 0x05
    2a44:	e4 cf       	rjmp	.-56     	; 0x2a0e <process_action+0x14a>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2a46:	21 11       	cpse	r18, r1
    2a48:	fb c1       	rjmp	.+1014   	; 0x2e40 <process_action+0x57c>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    2a4a:	80 2f       	mov	r24, r16
    2a4c:	69 c1       	rjmp	.+722    	; 0x2d20 <process_action+0x45c>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2a4e:	20 2f       	mov	r18, r16
    2a50:	26 95       	lsr	r18
    2a52:	26 95       	lsr	r18
    2a54:	23 70       	andi	r18, 0x03	; 3
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	21 15       	cp	r18, r1
    2a5a:	31 05       	cpc	r19, r1
    2a5c:	21 f0       	breq	.+8      	; 0x2a66 <process_action+0x1a2>
    2a5e:	21 30       	cpi	r18, 0x01	; 1
    2a60:	31 05       	cpc	r19, r1
    2a62:	c9 f0       	breq	.+50     	; 0x2a96 <process_action+0x1d2>
    2a64:	28 c2       	rjmp	.+1104   	; 0x2eb6 <process_action+0x5f2>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2a66:	ff 20       	and	r15, r15
    2a68:	21 f0       	breq	.+8      	; 0x2a72 <process_action+0x1ae>
                        host_system_send(action.usage.code);
    2a6a:	81 2f       	mov	r24, r17
    2a6c:	90 2f       	mov	r25, r16
    2a6e:	93 70       	andi	r25, 0x03	; 3
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <process_action+0x1b2>
                    } else {
                        host_system_send(0);
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2a76:	26 96       	adiw	r28, 0x06	; 6
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
    2a82:	df 91       	pop	r29
    2a84:	cf 91       	pop	r28
    2a86:	1f 91       	pop	r17
    2a88:	0f 91       	pop	r16
    2a8a:	ff 90       	pop	r15
    2a8c:	ef 90       	pop	r14
    2a8e:	df 90       	pop	r13
    2a90:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    2a92:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2a96:	ff 20       	and	r15, r15
    2a98:	21 f0       	breq	.+8      	; 0x2aa2 <process_action+0x1de>
                        host_consumer_send(action.usage.code);
    2a9a:	81 2f       	mov	r24, r17
    2a9c:	90 2f       	mov	r25, r16
    2a9e:	93 70       	andi	r25, 0x03	; 3
    2aa0:	02 c0       	rjmp	.+4      	; 0x2aa6 <process_action+0x1e2>
                    } else {
                        host_consumer_send(0);
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2aa6:	26 96       	adiw	r28, 0x06	; 6
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	cd bf       	out	0x3d, r28	; 61
    2ab2:	df 91       	pop	r29
    2ab4:	cf 91       	pop	r28
    2ab6:	1f 91       	pop	r17
    2ab8:	0f 91       	pop	r16
    2aba:	ff 90       	pop	r15
    2abc:	ef 90       	pop	r14
    2abe:	df 90       	pop	r13
    2ac0:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    2ac2:	0c 94 00 12 	jmp	0x2400	; 0x2400 <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    2ac6:	81 2f       	mov	r24, r17
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2ac8:	ff 20       	and	r15, r15
    2aca:	19 f0       	breq	.+6      	; 0x2ad2 <process_action+0x20e>
                mousekey_on(action.key.code);
    2acc:	0e 94 90 22 	call	0x4520	; 0x4520 <mousekey_on>
    2ad0:	02 c0       	rjmp	.+4      	; 0x2ad6 <process_action+0x212>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2ad2:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    2ad6:	26 96       	adiw	r28, 0x06	; 6
    2ad8:	0f b6       	in	r0, 0x3f	; 63
    2ada:	f8 94       	cli
    2adc:	de bf       	out	0x3e, r29	; 62
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	cd bf       	out	0x3d, r28	; 61
    2ae2:	df 91       	pop	r29
    2ae4:	cf 91       	pop	r28
    2ae6:	1f 91       	pop	r17
    2ae8:	0f 91       	pop	r16
    2aea:	ff 90       	pop	r15
    2aec:	ef 90       	pop	r14
    2aee:	df 90       	pop	r13
    2af0:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    2af2:	0c 94 7d 23 	jmp	0x46fa	; 0x46fa <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2af6:	80 2f       	mov	r24, r16
    2af8:	83 70       	andi	r24, 0x03	; 3
    2afa:	09 f0       	breq	.+2      	; 0x2afe <process_action+0x23a>
    2afc:	78 c0       	rjmp	.+240    	; 0x2bee <process_action+0x32a>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2afe:	f1 10       	cpse	r15, r1
    2b00:	da c1       	rjmp	.+948    	; 0x2eb6 <process_action+0x5f2>
                    uint8_t shift = action.layer_bitop.part*4;
    2b02:	81 2f       	mov	r24, r17
    2b04:	82 95       	swap	r24
    2b06:	86 95       	lsr	r24
    2b08:	87 70       	andi	r24, 0x07	; 7
    2b0a:	88 0f       	add	r24, r24
    2b0c:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2b0e:	91 2f       	mov	r25, r17
    2b10:	9f 70       	andi	r25, 0x0F	; 15
    2b12:	c9 2e       	mov	r12, r25
    2b14:	d1 2c       	mov	r13, r1
    2b16:	e1 2c       	mov	r14, r1
    2b18:	f1 2c       	mov	r15, r1
    2b1a:	08 2e       	mov	r0, r24
    2b1c:	04 c0       	rjmp	.+8      	; 0x2b26 <process_action+0x262>
    2b1e:	cc 0c       	add	r12, r12
    2b20:	dd 1c       	adc	r13, r13
    2b22:	ee 1c       	adc	r14, r14
    2b24:	ff 1c       	adc	r15, r15
    2b26:	0a 94       	dec	r0
    2b28:	d2 f7       	brpl	.-12     	; 0x2b1e <process_action+0x25a>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2b2a:	14 ff       	sbrs	r17, 4
    2b2c:	12 c0       	rjmp	.+36     	; 0x2b52 <process_action+0x28e>
    2b2e:	4f e0       	ldi	r20, 0x0F	; 15
    2b30:	50 e0       	ldi	r21, 0x00	; 0
    2b32:	60 e0       	ldi	r22, 0x00	; 0
    2b34:	70 e0       	ldi	r23, 0x00	; 0
    2b36:	04 c0       	rjmp	.+8      	; 0x2b40 <process_action+0x27c>
    2b38:	44 0f       	add	r20, r20
    2b3a:	55 1f       	adc	r21, r21
    2b3c:	66 1f       	adc	r22, r22
    2b3e:	77 1f       	adc	r23, r23
    2b40:	8a 95       	dec	r24
    2b42:	d2 f7       	brpl	.-12     	; 0x2b38 <process_action+0x274>
    2b44:	cb 01       	movw	r24, r22
    2b46:	ba 01       	movw	r22, r20
    2b48:	60 95       	com	r22
    2b4a:	70 95       	com	r23
    2b4c:	80 95       	com	r24
    2b4e:	90 95       	com	r25
    2b50:	03 c0       	rjmp	.+6      	; 0x2b58 <process_action+0x294>
    2b52:	60 e0       	ldi	r22, 0x00	; 0
    2b54:	70 e0       	ldi	r23, 0x00	; 0
    2b56:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2b58:	20 2f       	mov	r18, r16
    2b5a:	26 95       	lsr	r18
    2b5c:	26 95       	lsr	r18
    2b5e:	23 70       	andi	r18, 0x03	; 3
    2b60:	42 2f       	mov	r20, r18
    2b62:	50 e0       	ldi	r21, 0x00	; 0
    2b64:	42 30       	cpi	r20, 0x02	; 2
    2b66:	51 05       	cpc	r21, r1
    2b68:	d1 f0       	breq	.+52     	; 0x2b9e <process_action+0x2da>
    2b6a:	43 30       	cpi	r20, 0x03	; 3
    2b6c:	51 05       	cpc	r21, r1
    2b6e:	59 f1       	breq	.+86     	; 0x2bc6 <process_action+0x302>
    2b70:	6c 29       	or	r22, r12
    2b72:	7d 29       	or	r23, r13
    2b74:	8e 29       	or	r24, r14
    2b76:	9f 29       	or	r25, r15
    2b78:	41 30       	cpi	r20, 0x01	; 1
    2b7a:	51 05       	cpc	r21, r1
    2b7c:	41 f1       	breq	.+80     	; 0x2bce <process_action+0x30a>
            break;
#endif
        default:
            break;
    }
}
    2b7e:	26 96       	adiw	r28, 0x06	; 6
    2b80:	0f b6       	in	r0, 0x3f	; 63
    2b82:	f8 94       	cli
    2b84:	de bf       	out	0x3e, r29	; 62
    2b86:	0f be       	out	0x3f, r0	; 63
    2b88:	cd bf       	out	0x3d, r28	; 61
    2b8a:	df 91       	pop	r29
    2b8c:	cf 91       	pop	r28
    2b8e:	1f 91       	pop	r17
    2b90:	0f 91       	pop	r16
    2b92:	ff 90       	pop	r15
    2b94:	ef 90       	pop	r14
    2b96:	df 90       	pop	r13
    2b98:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2b9a:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2b9e:	6c 29       	or	r22, r12
    2ba0:	7d 29       	or	r23, r13
    2ba2:	8e 29       	or	r24, r14
    2ba4:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2ba6:	26 96       	adiw	r28, 0x06	; 6
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	f8 94       	cli
    2bac:	de bf       	out	0x3e, r29	; 62
    2bae:	0f be       	out	0x3f, r0	; 63
    2bb0:	cd bf       	out	0x3d, r28	; 61
    2bb2:	df 91       	pop	r29
    2bb4:	cf 91       	pop	r28
    2bb6:	1f 91       	pop	r17
    2bb8:	0f 91       	pop	r16
    2bba:	ff 90       	pop	r15
    2bbc:	ef 90       	pop	r14
    2bbe:	df 90       	pop	r13
    2bc0:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2bc2:	0c 94 96 1b 	jmp	0x372c	; 0x372c <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2bc6:	0e 94 84 1b 	call	0x3708	; 0x3708 <default_layer_and>
    2bca:	c7 01       	movw	r24, r14
    2bcc:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2bce:	26 96       	adiw	r28, 0x06	; 6
    2bd0:	0f b6       	in	r0, 0x3f	; 63
    2bd2:	f8 94       	cli
    2bd4:	de bf       	out	0x3e, r29	; 62
    2bd6:	0f be       	out	0x3f, r0	; 63
    2bd8:	cd bf       	out	0x3d, r28	; 61
    2bda:	df 91       	pop	r29
    2bdc:	cf 91       	pop	r28
    2bde:	1f 91       	pop	r17
    2be0:	0f 91       	pop	r16
    2be2:	ff 90       	pop	r15
    2be4:	ef 90       	pop	r14
    2be6:	df 90       	pop	r13
    2be8:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2bea:	0c 94 72 1b 	jmp	0x36e4	; 0x36e4 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2bee:	ff 20       	and	r15, r15
    2bf0:	19 f0       	breq	.+6      	; 0x2bf8 <process_action+0x334>
    2bf2:	80 2f       	mov	r24, r16
    2bf4:	81 70       	andi	r24, 0x01	; 1
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <process_action+0x336>
    2bf8:	86 95       	lsr	r24
    2bfa:	88 23       	and	r24, r24
    2bfc:	09 f4       	brne	.+2      	; 0x2c00 <process_action+0x33c>
    2bfe:	5b c1       	rjmp	.+694    	; 0x2eb6 <process_action+0x5f2>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2c00:	81 2f       	mov	r24, r17
    2c02:	82 95       	swap	r24
    2c04:	86 95       	lsr	r24
    2c06:	87 70       	andi	r24, 0x07	; 7
    2c08:	88 0f       	add	r24, r24
    2c0a:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2c0c:	91 2f       	mov	r25, r17
    2c0e:	9f 70       	andi	r25, 0x0F	; 15
    2c10:	c9 2e       	mov	r12, r25
    2c12:	d1 2c       	mov	r13, r1
    2c14:	e1 2c       	mov	r14, r1
    2c16:	f1 2c       	mov	r15, r1
    2c18:	08 2e       	mov	r0, r24
    2c1a:	04 c0       	rjmp	.+8      	; 0x2c24 <process_action+0x360>
    2c1c:	cc 0c       	add	r12, r12
    2c1e:	dd 1c       	adc	r13, r13
    2c20:	ee 1c       	adc	r14, r14
    2c22:	ff 1c       	adc	r15, r15
    2c24:	0a 94       	dec	r0
    2c26:	d2 f7       	brpl	.-12     	; 0x2c1c <process_action+0x358>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2c28:	14 ff       	sbrs	r17, 4
    2c2a:	12 c0       	rjmp	.+36     	; 0x2c50 <process_action+0x38c>
    2c2c:	4f e0       	ldi	r20, 0x0F	; 15
    2c2e:	50 e0       	ldi	r21, 0x00	; 0
    2c30:	60 e0       	ldi	r22, 0x00	; 0
    2c32:	70 e0       	ldi	r23, 0x00	; 0
    2c34:	04 c0       	rjmp	.+8      	; 0x2c3e <process_action+0x37a>
    2c36:	44 0f       	add	r20, r20
    2c38:	55 1f       	adc	r21, r21
    2c3a:	66 1f       	adc	r22, r22
    2c3c:	77 1f       	adc	r23, r23
    2c3e:	8a 95       	dec	r24
    2c40:	d2 f7       	brpl	.-12     	; 0x2c36 <process_action+0x372>
    2c42:	cb 01       	movw	r24, r22
    2c44:	ba 01       	movw	r22, r20
    2c46:	60 95       	com	r22
    2c48:	70 95       	com	r23
    2c4a:	80 95       	com	r24
    2c4c:	90 95       	com	r25
    2c4e:	03 c0       	rjmp	.+6      	; 0x2c56 <process_action+0x392>
    2c50:	60 e0       	ldi	r22, 0x00	; 0
    2c52:	70 e0       	ldi	r23, 0x00	; 0
    2c54:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2c56:	20 2f       	mov	r18, r16
    2c58:	26 95       	lsr	r18
    2c5a:	26 95       	lsr	r18
    2c5c:	23 70       	andi	r18, 0x03	; 3
    2c5e:	42 2f       	mov	r20, r18
    2c60:	50 e0       	ldi	r21, 0x00	; 0
    2c62:	42 30       	cpi	r20, 0x02	; 2
    2c64:	51 05       	cpc	r21, r1
    2c66:	d1 f0       	breq	.+52     	; 0x2c9c <process_action+0x3d8>
    2c68:	43 30       	cpi	r20, 0x03	; 3
    2c6a:	51 05       	cpc	r21, r1
    2c6c:	59 f1       	breq	.+86     	; 0x2cc4 <process_action+0x400>
    2c6e:	6c 29       	or	r22, r12
    2c70:	7d 29       	or	r23, r13
    2c72:	8e 29       	or	r24, r14
    2c74:	9f 29       	or	r25, r15
    2c76:	41 30       	cpi	r20, 0x01	; 1
    2c78:	51 05       	cpc	r21, r1
    2c7a:	41 f1       	breq	.+80     	; 0x2ccc <process_action+0x408>
            break;
#endif
        default:
            break;
    }
}
    2c7c:	26 96       	adiw	r28, 0x06	; 6
    2c7e:	0f b6       	in	r0, 0x3f	; 63
    2c80:	f8 94       	cli
    2c82:	de bf       	out	0x3e, r29	; 62
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	cd bf       	out	0x3d, r28	; 61
    2c88:	df 91       	pop	r29
    2c8a:	cf 91       	pop	r28
    2c8c:	1f 91       	pop	r17
    2c8e:	0f 91       	pop	r16
    2c90:	ff 90       	pop	r15
    2c92:	ef 90       	pop	r14
    2c94:	df 90       	pop	r13
    2c96:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2c98:	0c 94 3b 1c 	jmp	0x3876	; 0x3876 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2c9c:	6c 29       	or	r22, r12
    2c9e:	7d 29       	or	r23, r13
    2ca0:	8e 29       	or	r24, r14
    2ca2:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2ca4:	26 96       	adiw	r28, 0x06	; 6
    2ca6:	0f b6       	in	r0, 0x3f	; 63
    2ca8:	f8 94       	cli
    2caa:	de bf       	out	0x3e, r29	; 62
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	cd bf       	out	0x3d, r28	; 61
    2cb0:	df 91       	pop	r29
    2cb2:	cf 91       	pop	r28
    2cb4:	1f 91       	pop	r17
    2cb6:	0f 91       	pop	r16
    2cb8:	ff 90       	pop	r15
    2cba:	ef 90       	pop	r14
    2cbc:	df 90       	pop	r13
    2cbe:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2cc0:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2cc4:	0e 94 3b 1c 	call	0x3876	; 0x3876 <layer_and>
    2cc8:	c7 01       	movw	r24, r14
    2cca:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2ccc:	26 96       	adiw	r28, 0x06	; 6
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	cd bf       	out	0x3d, r28	; 61
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	1f 91       	pop	r17
    2cde:	0f 91       	pop	r16
    2ce0:	ff 90       	pop	r15
    2ce2:	ef 90       	pop	r14
    2ce4:	df 90       	pop	r13
    2ce6:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2ce8:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2cec:	10 3f       	cpi	r17, 0xF0	; 240
    2cee:	41 f1       	breq	.+80     	; 0x2d40 <process_action+0x47c>
    2cf0:	18 f4       	brcc	.+6      	; 0x2cf8 <process_action+0x434>
    2cf2:	10 3e       	cpi	r17, 0xE0	; 224
    2cf4:	48 f4       	brcc	.+18     	; 0x2d08 <process_action+0x444>
    2cf6:	8b c0       	rjmp	.+278    	; 0x2e0e <process_action+0x54a>
    2cf8:	12 3f       	cpi	r17, 0xF2	; 242
    2cfa:	09 f4       	brne	.+2      	; 0x2cfe <process_action+0x43a>
    2cfc:	50 c0       	rjmp	.+160    	; 0x2d9e <process_action+0x4da>
    2cfe:	d8 f1       	brcs	.+118    	; 0x2d76 <process_action+0x4b2>
    2d00:	13 3f       	cpi	r17, 0xF3	; 243
    2d02:	09 f4       	brne	.+2      	; 0x2d06 <process_action+0x442>
    2d04:	60 c0       	rjmp	.+192    	; 0x2dc6 <process_action+0x502>
    2d06:	83 c0       	rjmp	.+262    	; 0x2e0e <process_action+0x54a>
    2d08:	1f 70       	andi	r17, 0x0F	; 15
    2d0a:	80 2f       	mov	r24, r16
    2d0c:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2d0e:	ff 20       	and	r15, r15
    2d10:	21 f0       	breq	.+8      	; 0x2d1a <process_action+0x456>
                        layer_on(action.layer_tap.val);
    2d12:	0e 94 c2 1b 	call	0x3784	; 0x3784 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2d16:	81 2f       	mov	r24, r17
    2d18:	7b ce       	rjmp	.-778    	; 0x2a10 <process_action+0x14c>
                    } else {
                        layer_off(action.layer_tap.val);
    2d1a:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2d1e:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2d20:	26 96       	adiw	r28, 0x06	; 6
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	de bf       	out	0x3e, r29	; 62
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	cd bf       	out	0x3d, r28	; 61
    2d2c:	df 91       	pop	r29
    2d2e:	cf 91       	pop	r28
    2d30:	1f 91       	pop	r17
    2d32:	0f 91       	pop	r16
    2d34:	ff 90       	pop	r15
    2d36:	ef 90       	pop	r14
    2d38:	df 90       	pop	r13
    2d3a:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    2d3c:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2d40:	ff 20       	and	r15, r15
    2d42:	a9 f0       	breq	.+42     	; 0x2d6e <process_action+0x4aa>
                        if (tap_count < TAPPING_TOGGLE) {
    2d44:	25 30       	cpi	r18, 0x05	; 5
    2d46:	08 f0       	brcs	.+2      	; 0x2d4a <process_action+0x486>
    2d48:	b6 c0       	rjmp	.+364    	; 0x2eb6 <process_action+0x5f2>
                            layer_invert(action.layer_tap.val);
    2d4a:	80 2f       	mov	r24, r16
    2d4c:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2d4e:	26 96       	adiw	r28, 0x06	; 6
    2d50:	0f b6       	in	r0, 0x3f	; 63
    2d52:	f8 94       	cli
    2d54:	de bf       	out	0x3e, r29	; 62
    2d56:	0f be       	out	0x3f, r0	; 63
    2d58:	cd bf       	out	0x3d, r28	; 61
    2d5a:	df 91       	pop	r29
    2d5c:	cf 91       	pop	r28
    2d5e:	1f 91       	pop	r17
    2d60:	0f 91       	pop	r16
    2d62:	ff 90       	pop	r15
    2d64:	ef 90       	pop	r14
    2d66:	df 90       	pop	r13
    2d68:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2d6a:	0c 94 08 1c 	jmp	0x3810	; 0x3810 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2d6e:	26 30       	cpi	r18, 0x06	; 6
    2d70:	08 f0       	brcs	.+2      	; 0x2d74 <process_action+0x4b0>
    2d72:	a1 c0       	rjmp	.+322    	; 0x2eb6 <process_action+0x5f2>
    2d74:	ea cf       	rjmp	.-44     	; 0x2d4a <process_action+0x486>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2d76:	ff 20       	and	r15, r15
    2d78:	a1 f0       	breq	.+40     	; 0x2da2 <process_action+0x4de>
    2d7a:	80 2f       	mov	r24, r16
    2d7c:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2d7e:	26 96       	adiw	r28, 0x06	; 6
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	f8 94       	cli
    2d84:	de bf       	out	0x3e, r29	; 62
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	cd bf       	out	0x3d, r28	; 61
    2d8a:	df 91       	pop	r29
    2d8c:	cf 91       	pop	r28
    2d8e:	1f 91       	pop	r17
    2d90:	0f 91       	pop	r16
    2d92:	ff 90       	pop	r15
    2d94:	ef 90       	pop	r14
    2d96:	df 90       	pop	r13
    2d98:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2d9a:	0c 94 c2 1b 	jmp	0x3784	; 0x3784 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2d9e:	ff 20       	and	r15, r15
    2da0:	61 f3       	breq	.-40     	; 0x2d7a <process_action+0x4b6>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2da2:	80 2f       	mov	r24, r16
    2da4:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2da6:	26 96       	adiw	r28, 0x06	; 6
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	f8 94       	cli
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	0f be       	out	0x3f, r0	; 63
    2db0:	cd bf       	out	0x3d, r28	; 61
    2db2:	df 91       	pop	r29
    2db4:	cf 91       	pop	r28
    2db6:	1f 91       	pop	r17
    2db8:	0f 91       	pop	r16
    2dba:	ff 90       	pop	r15
    2dbc:	ef 90       	pop	r14
    2dbe:	df 90       	pop	r13
    2dc0:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2dc2:	0c 94 e3 1b 	jmp	0x37c6	; 0x37c6 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2dc6:	ff 20       	and	r15, r15
    2dc8:	91 f0       	breq	.+36     	; 0x2dee <process_action+0x52a>
    2dca:	80 2f       	mov	r24, r16
    2dcc:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2dce:	26 96       	adiw	r28, 0x06	; 6
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	f8 94       	cli
    2dd4:	de bf       	out	0x3e, r29	; 62
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	df 91       	pop	r29
    2ddc:	cf 91       	pop	r28
    2dde:	1f 91       	pop	r17
    2de0:	0f 91       	pop	r16
    2de2:	ff 90       	pop	r15
    2de4:	ef 90       	pop	r14
    2de6:	df 90       	pop	r13
    2de8:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2dea:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2dee:	26 96       	adiw	r28, 0x06	; 6
    2df0:	0f b6       	in	r0, 0x3f	; 63
    2df2:	f8 94       	cli
    2df4:	de bf       	out	0x3e, r29	; 62
    2df6:	0f be       	out	0x3f, r0	; 63
    2df8:	cd bf       	out	0x3d, r28	; 61
    2dfa:	df 91       	pop	r29
    2dfc:	cf 91       	pop	r28
    2dfe:	1f 91       	pop	r17
    2e00:	0f 91       	pop	r16
    2e02:	ff 90       	pop	r15
    2e04:	ef 90       	pop	r14
    2e06:	df 90       	pop	r13
    2e08:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2e0a:	0c 94 a8 1b 	jmp	0x3750	; 0x3750 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2e0e:	ff 20       	and	r15, r15
    2e10:	a1 f0       	breq	.+40     	; 0x2e3a <process_action+0x576>
                        if (tap_count > 0) {
    2e12:	22 23       	and	r18, r18
    2e14:	09 f4       	brne	.+2      	; 0x2e18 <process_action+0x554>
    2e16:	b1 cf       	rjmp	.-158    	; 0x2d7a <process_action+0x4b6>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2e18:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2e1a:	26 96       	adiw	r28, 0x06	; 6
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	de bf       	out	0x3e, r29	; 62
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	cd bf       	out	0x3d, r28	; 61
    2e26:	df 91       	pop	r29
    2e28:	cf 91       	pop	r28
    2e2a:	1f 91       	pop	r17
    2e2c:	0f 91       	pop	r16
    2e2e:	ff 90       	pop	r15
    2e30:	ef 90       	pop	r14
    2e32:	df 90       	pop	r13
    2e34:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2e36:	0c 94 32 13 	jmp	0x2664	; 0x2664 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2e3a:	22 23       	and	r18, r18
    2e3c:	09 f4       	brne	.+2      	; 0x2e40 <process_action+0x57c>
    2e3e:	b1 cf       	rjmp	.-158    	; 0x2da2 <process_action+0x4de>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2e40:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2e42:	26 96       	adiw	r28, 0x06	; 6
    2e44:	0f b6       	in	r0, 0x3f	; 63
    2e46:	f8 94       	cli
    2e48:	de bf       	out	0x3e, r29	; 62
    2e4a:	0f be       	out	0x3f, r0	; 63
    2e4c:	cd bf       	out	0x3d, r28	; 61
    2e4e:	df 91       	pop	r29
    2e50:	cf 91       	pop	r28
    2e52:	1f 91       	pop	r17
    2e54:	0f 91       	pop	r16
    2e56:	ff 90       	pop	r15
    2e58:	ef 90       	pop	r14
    2e5a:	df 90       	pop	r13
    2e5c:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2e5e:	0c 94 05 14 	jmp	0x280a	; 0x280a <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2e62:	40 2f       	mov	r20, r16
    2e64:	4f 70       	andi	r20, 0x0F	; 15
    2e66:	61 2f       	mov	r22, r17
    2e68:	c6 01       	movw	r24, r12
    2e6a:	0e 94 c9 07 	call	0xf92	; 0xf92 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2e6e:	26 96       	adiw	r28, 0x06	; 6
    2e70:	0f b6       	in	r0, 0x3f	; 63
    2e72:	f8 94       	cli
    2e74:	de bf       	out	0x3e, r29	; 62
    2e76:	0f be       	out	0x3f, r0	; 63
    2e78:	cd bf       	out	0x3d, r28	; 61
    2e7a:	df 91       	pop	r29
    2e7c:	cf 91       	pop	r28
    2e7e:	1f 91       	pop	r17
    2e80:	0f 91       	pop	r16
    2e82:	ff 90       	pop	r15
    2e84:	ef 90       	pop	r14
    2e86:	df 90       	pop	r13
    2e88:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2e8a:	0c 94 ba 1a 	jmp	0x3574	; 0x3574 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2e8e:	40 2f       	mov	r20, r16
    2e90:	4f 70       	andi	r20, 0x0F	; 15
    2e92:	61 2f       	mov	r22, r17
    2e94:	c6 01       	movw	r24, r12
            break;
#endif
        default:
            break;
    }
}
    2e96:	26 96       	adiw	r28, 0x06	; 6
    2e98:	0f b6       	in	r0, 0x3f	; 63
    2e9a:	f8 94       	cli
    2e9c:	de bf       	out	0x3e, r29	; 62
    2e9e:	0f be       	out	0x3f, r0	; 63
    2ea0:	cd bf       	out	0x3d, r28	; 61
    2ea2:	df 91       	pop	r29
    2ea4:	cf 91       	pop	r28
    2ea6:	1f 91       	pop	r17
    2ea8:	0f 91       	pop	r16
    2eaa:	ff 90       	pop	r15
    2eac:	ef 90       	pop	r14
    2eae:	df 90       	pop	r13
    2eb0:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2eb2:	0c 94 25 20 	jmp	0x404a	; 0x404a <action_function>
            break;
#endif
        default:
            break;
    }
}
    2eb6:	26 96       	adiw	r28, 0x06	; 6
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	f8 94       	cli
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	0f be       	out	0x3f, r0	; 63
    2ec0:	cd bf       	out	0x3d, r28	; 61
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	1f 91       	pop	r17
    2ec8:	0f 91       	pop	r16
    2eca:	ff 90       	pop	r15
    2ecc:	ef 90       	pop	r14
    2ece:	df 90       	pop	r13
    2ed0:	cf 90       	pop	r12
    2ed2:	08 95       	ret

00002ed4 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2ed4:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <clear_weak_mods>
    clear_keys();
    2ed8:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <clear_keys>
    send_keyboard_report();
    2edc:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2ee0:	0e 94 af 24 	call	0x495e	; 0x495e <mousekey_clear>
    mousekey_send();
    2ee4:	0e 94 7d 23 	call	0x46fa	; 0x46fa <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <host_system_send>
    host_consumer_send(0);
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	0c 94 00 12 	jmp	0x2400	; 0x2400 <host_consumer_send>

00002ef8 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2ef8:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <clear_mods>
    clear_keyboard_but_mods();
    2efc:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <clear_keyboard_but_mods>

00002f00 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2f00:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <layer_switch_get_action>

    switch (action.kind.id) {
    2f04:	29 2f       	mov	r18, r25
    2f06:	22 95       	swap	r18
    2f08:	2f 70       	andi	r18, 0x0F	; 15
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	2c 30       	cpi	r18, 0x0C	; 12
    2f0e:	31 05       	cpc	r19, r1
    2f10:	4c f4       	brge	.+18     	; 0x2f24 <is_tap_key+0x24>
    2f12:	2a 30       	cpi	r18, 0x0A	; 10
    2f14:	31 05       	cpc	r19, r1
    2f16:	6c f4       	brge	.+26     	; 0x2f32 <is_tap_key+0x32>
    2f18:	22 50       	subi	r18, 0x02	; 2
    2f1a:	31 09       	sbc	r19, r1
    2f1c:	22 30       	cpi	r18, 0x02	; 2
    2f1e:	31 05       	cpc	r19, r1
    2f20:	88 f4       	brcc	.+34     	; 0x2f44 <is_tap_key+0x44>
    2f22:	07 c0       	rjmp	.+14     	; 0x2f32 <is_tap_key+0x32>
    2f24:	2c 30       	cpi	r18, 0x0C	; 12
    2f26:	31 05       	cpc	r19, r1
    2f28:	49 f0       	breq	.+18     	; 0x2f3c <is_tap_key+0x3c>
    2f2a:	2f 30       	cpi	r18, 0x0F	; 15
    2f2c:	31 05       	cpc	r19, r1
    2f2e:	31 f0       	breq	.+12     	; 0x2f3c <is_tap_key+0x3c>
    2f30:	09 c0       	rjmp	.+18     	; 0x2f44 <is_tap_key+0x44>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2f32:	80 3e       	cpi	r24, 0xE0	; 224
    2f34:	48 f0       	brcs	.+18     	; 0x2f48 <is_tap_key+0x48>
    2f36:	80 3f       	cpi	r24, 0xF0	; 240
    2f38:	29 f4       	brne	.+10     	; 0x2f44 <is_tap_key+0x44>
    2f3a:	06 c0       	rjmp	.+12     	; 0x2f48 <is_tap_key+0x48>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2f3c:	93 fb       	bst	r25, 3
    2f3e:	88 27       	eor	r24, r24
    2f40:	80 f9       	bld	r24, 0
    2f42:	08 95       	ret
            return false;
    }
    return false;
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	08 95       	ret
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    2f48:	81 e0       	ldi	r24, 0x01	; 1
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2f4a:	08 95       	ret

00002f4c <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2f4c:	cf 93       	push	r28
    2f4e:	df 93       	push	r29
    2f50:	00 d0       	rcall	.+0      	; 0x2f52 <debug_event+0x6>
    2f52:	00 d0       	rcall	.+0      	; 0x2f54 <debug_event+0x8>
    2f54:	1f 92       	push	r1
    2f56:	cd b7       	in	r28, 0x3d	; 61
    2f58:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2f5a:	0f 90       	pop	r0
    2f5c:	0f 90       	pop	r0
    2f5e:	0f 90       	pop	r0
    2f60:	0f 90       	pop	r0
    2f62:	0f 90       	pop	r0
    2f64:	df 91       	pop	r29
    2f66:	cf 91       	pop	r28
    2f68:	08 95       	ret

00002f6a <debug_record>:

void debug_record(keyrecord_t record)
{
    2f6a:	cf 93       	push	r28
    2f6c:	df 93       	push	r29
    2f6e:	00 d0       	rcall	.+0      	; 0x2f70 <debug_record+0x6>
    2f70:	00 d0       	rcall	.+0      	; 0x2f72 <debug_record+0x8>
    2f72:	00 d0       	rcall	.+0      	; 0x2f74 <debug_record+0xa>
    2f74:	cd b7       	in	r28, 0x3d	; 61
    2f76:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2f78:	26 96       	adiw	r28, 0x06	; 6
    2f7a:	0f b6       	in	r0, 0x3f	; 63
    2f7c:	f8 94       	cli
    2f7e:	de bf       	out	0x3e, r29	; 62
    2f80:	0f be       	out	0x3f, r0	; 63
    2f82:	cd bf       	out	0x3d, r28	; 61
    2f84:	df 91       	pop	r29
    2f86:	cf 91       	pop	r28
    2f88:	08 95       	ret

00002f8a <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2f8a:	1f 93       	push	r17
    2f8c:	cf 93       	push	r28
    2f8e:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f90:	c0 91 74 01 	lds	r28, 0x0174
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2f94:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f96:	80 91 75 01 	lds	r24, 0x0175
    2f9a:	c8 17       	cp	r28, r24
    2f9c:	99 f0       	breq	.+38     	; 0x2fc4 <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2f9e:	d0 e0       	ldi	r29, 0x00	; 0
    2fa0:	1c 9f       	mul	r17, r28
    2fa2:	f0 01       	movw	r30, r0
    2fa4:	1d 9f       	mul	r17, r29
    2fa6:	f0 0d       	add	r31, r0
    2fa8:	11 24       	eor	r1, r1
    2faa:	ea 58       	subi	r30, 0x8A	; 138
    2fac:	fe 4f       	sbci	r31, 0xFE	; 254
    2fae:	40 81       	ld	r20, Z
    2fb0:	51 81       	ldd	r21, Z+1	; 0x01
    2fb2:	62 81       	ldd	r22, Z+2	; 0x02
    2fb4:	73 81       	ldd	r23, Z+3	; 0x03
    2fb6:	84 81       	ldd	r24, Z+4	; 0x04
    2fb8:	95 81       	ldd	r25, Z+5	; 0x05
    2fba:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fbe:	21 96       	adiw	r28, 0x01	; 1
    2fc0:	c7 70       	andi	r28, 0x07	; 7
    2fc2:	e9 cf       	rjmp	.-46     	; 0x2f96 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2fc4:	df 91       	pop	r29
    2fc6:	cf 91       	pop	r28
    2fc8:	1f 91       	pop	r17
    2fca:	08 95       	ret

00002fcc <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2fcc:	40 91 a6 01 	lds	r20, 0x01A6
    2fd0:	50 91 a7 01 	lds	r21, 0x01A7
    2fd4:	60 91 a8 01 	lds	r22, 0x01A8
    2fd8:	70 91 a9 01 	lds	r23, 0x01A9
    2fdc:	80 91 aa 01 	lds	r24, 0x01AA
    2fe0:	90 91 ab 01 	lds	r25, 0x01AB
    2fe4:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <debug_record>

00002fe8 <waiting_buffer_scan_tap>:

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2fe8:	80 91 ab 01 	lds	r24, 0x01AB
    2fec:	82 95       	swap	r24
    2fee:	8f 70       	andi	r24, 0x0F	; 15
    2ff0:	09 f0       	breq	.+2      	; 0x2ff4 <waiting_buffer_scan_tap+0xc>
    2ff2:	54 c0       	rjmp	.+168    	; 0x309c <waiting_buffer_scan_tap+0xb4>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2ff4:	80 91 a8 01 	lds	r24, 0x01A8
    2ff8:	88 23       	and	r24, r24
    2ffa:	09 f4       	brne	.+2      	; 0x2ffe <waiting_buffer_scan_tap+0x16>
    2ffc:	4f c0       	rjmp	.+158    	; 0x309c <waiting_buffer_scan_tap+0xb4>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ffe:	80 91 74 01 	lds	r24, 0x0174
    3002:	a0 91 75 01 	lds	r26, 0x0175
    3006:	60 91 a6 01 	lds	r22, 0x01A6
    300a:	70 91 a7 01 	lds	r23, 0x01A7
    300e:	40 91 a9 01 	lds	r20, 0x01A9
    3012:	50 91 aa 01 	lds	r21, 0x01AA
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3016:	b6 e0       	ldi	r27, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3018:	8a 17       	cp	r24, r26
    301a:	09 f4       	brne	.+2      	; 0x301e <waiting_buffer_scan_tap+0x36>
    301c:	3f c0       	rjmp	.+126    	; 0x309c <waiting_buffer_scan_tap+0xb4>
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	41 15       	cp	r20, r1
    3022:	51 05       	cpc	r21, r1
    3024:	c1 f1       	breq	.+112    	; 0x3096 <waiting_buffer_scan_tap+0xae>
    3026:	7f 3f       	cpi	r23, 0xFF	; 255
    3028:	11 f4       	brne	.+4      	; 0x302e <waiting_buffer_scan_tap+0x46>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    302a:	6f 3f       	cpi	r22, 0xFF	; 255
    302c:	a1 f1       	breq	.+104    	; 0x3096 <waiting_buffer_scan_tap+0xae>
    302e:	b8 9f       	mul	r27, r24
    3030:	f0 01       	movw	r30, r0
    3032:	b9 9f       	mul	r27, r25
    3034:	f0 0d       	add	r31, r0
    3036:	11 24       	eor	r1, r1
    3038:	ea 58       	subi	r30, 0x8A	; 138
    303a:	fe 4f       	sbci	r31, 0xFE	; 254
    303c:	21 81       	ldd	r18, Z+1	; 0x01
    303e:	72 13       	cpse	r23, r18
    3040:	2a c0       	rjmp	.+84     	; 0x3096 <waiting_buffer_scan_tap+0xae>
    3042:	20 81       	ld	r18, Z
    3044:	62 13       	cpse	r22, r18
    3046:	27 c0       	rjmp	.+78     	; 0x3096 <waiting_buffer_scan_tap+0xae>
    3048:	22 81       	ldd	r18, Z+2	; 0x02
    304a:	21 11       	cpse	r18, r1
    304c:	24 c0       	rjmp	.+72     	; 0x3096 <waiting_buffer_scan_tap+0xae>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    304e:	23 81       	ldd	r18, Z+3	; 0x03
    3050:	34 81       	ldd	r19, Z+4	; 0x04
    3052:	24 17       	cp	r18, r20
    3054:	35 07       	cpc	r19, r21
    3056:	10 f4       	brcc	.+4      	; 0x305c <waiting_buffer_scan_tap+0x74>
    3058:	21 50       	subi	r18, 0x01	; 1
    305a:	31 09       	sbc	r19, r1
    305c:	24 1b       	sub	r18, r20
    305e:	35 0b       	sbc	r19, r21
    3060:	28 3c       	cpi	r18, 0xC8	; 200
    3062:	31 05       	cpc	r19, r1
    3064:	c0 f4       	brcc	.+48     	; 0x3096 <waiting_buffer_scan_tap+0xae>
            tapping_key.tap.count = 1;
    3066:	20 91 ab 01 	lds	r18, 0x01AB
    306a:	2f 70       	andi	r18, 0x0F	; 15
    306c:	20 61       	ori	r18, 0x10	; 16
    306e:	20 93 ab 01 	sts	0x01AB, r18
            waiting_buffer[i].tap.count = 1;
    3072:	26 e0       	ldi	r18, 0x06	; 6
    3074:	28 9f       	mul	r18, r24
    3076:	f0 01       	movw	r30, r0
    3078:	29 9f       	mul	r18, r25
    307a:	f0 0d       	add	r31, r0
    307c:	11 24       	eor	r1, r1
    307e:	e5 58       	subi	r30, 0x85	; 133
    3080:	fe 4f       	sbci	r31, 0xFE	; 254
    3082:	80 81       	ld	r24, Z
    3084:	8f 70       	andi	r24, 0x0F	; 15
    3086:	80 61       	ori	r24, 0x10	; 16
    3088:	80 83       	st	Z, r24
            process_action(&tapping_key);
    308a:	86 ea       	ldi	r24, 0xA6	; 166
    308c:	91 e0       	ldi	r25, 0x01	; 1
    308e:	0e 94 62 14 	call	0x28c4	; 0x28c4 <process_action>

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    3092:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3096:	01 96       	adiw	r24, 0x01	; 1
    3098:	87 70       	andi	r24, 0x07	; 7
    309a:	be cf       	rjmp	.-132    	; 0x3018 <waiting_buffer_scan_tap+0x30>
    309c:	08 95       	ret

0000309e <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    309e:	cf 92       	push	r12
    30a0:	df 92       	push	r13
    30a2:	ef 92       	push	r14
    30a4:	ff 92       	push	r15
    30a6:	0f 93       	push	r16
    30a8:	1f 93       	push	r17
    30aa:	cf 93       	push	r28
    30ac:	df 93       	push	r29
    30ae:	cd b7       	in	r28, 0x3d	; 61
    30b0:	de b7       	in	r29, 0x3e	; 62
    30b2:	62 97       	sbiw	r28, 0x12	; 18
    30b4:	0f b6       	in	r0, 0x3f	; 63
    30b6:	f8 94       	cli
    30b8:	de bf       	out	0x3e, r29	; 62
    30ba:	0f be       	out	0x3f, r0	; 63
    30bc:	cd bf       	out	0x3d, r28	; 61
    30be:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    30c0:	85 e0       	ldi	r24, 0x05	; 5
    30c2:	f8 01       	movw	r30, r16
    30c4:	de 01       	movw	r26, r28
    30c6:	1d 96       	adiw	r26, 0x0d	; 13
    30c8:	01 90       	ld	r0, Z+
    30ca:	0d 92       	st	X+, r0
    30cc:	8a 95       	dec	r24
    30ce:	e1 f7       	brne	.-8      	; 0x30c8 <process_tapping+0x2a>
    30d0:	d8 01       	movw	r26, r16
    30d2:	4c 91       	ld	r20, X
    30d4:	11 96       	adiw	r26, 0x01	; 1
    30d6:	5c 91       	ld	r21, X
    30d8:	11 97       	sbiw	r26, 0x01	; 1
    30da:	12 96       	adiw	r26, 0x02	; 2
    30dc:	6c 91       	ld	r22, X
    30de:	12 97       	sbiw	r26, 0x02	; 2
    30e0:	13 96       	adiw	r26, 0x03	; 3
    30e2:	cd 90       	ld	r12, X+
    30e4:	dc 90       	ld	r13, X
    30e6:	14 97       	sbiw	r26, 0x04	; 4
    30e8:	30 91 a6 01 	lds	r19, 0x01A6
    30ec:	70 91 a7 01 	lds	r23, 0x01A7
    30f0:	80 91 a9 01 	lds	r24, 0x01A9
    30f4:	90 91 aa 01 	lds	r25, 0x01AA
    30f8:	00 97       	sbiw	r24, 0x00	; 0
    30fa:	09 f4       	brne	.+2      	; 0x30fe <process_tapping+0x60>
    30fc:	6b c1       	rjmp	.+726    	; 0x33d4 <process_tapping+0x336>
    30fe:	7f 3f       	cpi	r23, 0xFF	; 255
    3100:	19 f4       	brne	.+6      	; 0x3108 <process_tapping+0x6a>

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    3102:	3f 3f       	cpi	r19, 0xFF	; 255
    3104:	09 f4       	brne	.+2      	; 0x3108 <process_tapping+0x6a>
    3106:	66 c1       	rjmp	.+716    	; 0x33d4 <process_tapping+0x336>
    3108:	e0 90 a8 01 	lds	r14, 0x01A8
    310c:	ee 20       	and	r14, r14
    310e:	09 f4       	brne	.+2      	; 0x3112 <process_tapping+0x74>
    3110:	c0 c0       	rjmp	.+384    	; 0x3292 <process_tapping+0x1f4>
    3112:	20 91 ab 01 	lds	r18, 0x01AB
        if (WITHIN_TAPPING_TERM(event)) {
    3116:	c8 16       	cp	r12, r24
    3118:	d9 06       	cpc	r13, r25
    311a:	28 f0       	brcs	.+10     	; 0x3126 <process_tapping+0x88>
    311c:	f6 01       	movw	r30, r12
    311e:	e8 1b       	sub	r30, r24
    3120:	f9 0b       	sbc	r31, r25
    3122:	cf 01       	movw	r24, r30
    3124:	04 c0       	rjmp	.+8      	; 0x312e <process_tapping+0x90>
    3126:	80 95       	com	r24
    3128:	90 95       	com	r25
    312a:	8c 0d       	add	r24, r12
    312c:	9d 1d       	adc	r25, r13
    312e:	ff 24       	eor	r15, r15
    3130:	f3 94       	inc	r15
    3132:	88 3c       	cpi	r24, 0xC8	; 200
    3134:	91 05       	cpc	r25, r1
    3136:	78 f0       	brcs	.+30     	; 0x3156 <process_tapping+0xb8>
    3138:	f1 2c       	mov	r15, r1
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    313a:	20 7f       	andi	r18, 0xF0	; 240
    313c:	09 f0       	breq	.+2      	; 0x3140 <process_tapping+0xa2>
    313e:	c6 c0       	rjmp	.+396    	; 0x32cc <process_tapping+0x22e>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    3140:	7c 2d       	mov	r23, r12
    3142:	d9 8a       	std	Y+17, r13	; 0x11
    3144:	c8 8a       	std	Y+16, r12	; 0x10
    3146:	89 89       	ldd	r24, Y+17	; 0x11
    3148:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <debug_event>
                process_action(&tapping_key);
    314c:	86 ea       	ldi	r24, 0xA6	; 166
    314e:	91 e0       	ldi	r25, 0x01	; 1
    3150:	0e 94 62 14 	call	0x28c4	; 0x28c4 <process_action>
    3154:	b1 c0       	rjmp	.+354    	; 0x32b8 <process_tapping+0x21a>
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
    3156:	82 2f       	mov	r24, r18
    3158:	80 7f       	andi	r24, 0xF0	; 240
    315a:	09 f0       	breq	.+2      	; 0x315e <process_tapping+0xc0>
    315c:	46 c0       	rjmp	.+140    	; 0x31ea <process_tapping+0x14c>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    315e:	75 13       	cpse	r23, r21
    3160:	14 c0       	rjmp	.+40     	; 0x318a <process_tapping+0xec>
    3162:	34 13       	cpse	r19, r20
    3164:	12 c0       	rjmp	.+36     	; 0x318a <process_tapping+0xec>
    3166:	61 11       	cpse	r22, r1
    3168:	10 c0       	rjmp	.+32     	; 0x318a <process_tapping+0xec>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    316a:	2f 70       	andi	r18, 0x0F	; 15
    316c:	20 61       	ori	r18, 0x10	; 16
    316e:	20 93 ab 01 	sts	0x01AB, r18
                    debug_tapping_key();
    3172:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <debug_tapping_key>
                    process_action(&tapping_key);
    3176:	86 ea       	ldi	r24, 0xA6	; 166
    3178:	91 e0       	ldi	r25, 0x01	; 1
    317a:	0e 94 62 14 	call	0x28c4	; 0x28c4 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    317e:	80 91 ab 01 	lds	r24, 0x01AB
    3182:	d8 01       	movw	r26, r16
    3184:	15 96       	adiw	r26, 0x05	; 5
    3186:	8c 93       	st	X, r24
    3188:	2e c0       	rjmp	.+92     	; 0x31e6 <process_tapping+0x148>
    318a:	cd 28       	or	r12, r13
    318c:	19 f1       	breq	.+70     	; 0x31d4 <process_tapping+0x136>
    318e:	5f 3f       	cpi	r21, 0xFF	; 255
    3190:	11 f4       	brne	.+4      	; 0x3196 <process_tapping+0xf8>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    3192:	4f 3f       	cpi	r20, 0xFF	; 255
    3194:	f9 f0       	breq	.+62     	; 0x31d4 <process_tapping+0x136>
    3196:	f6 2e       	mov	r15, r22
    3198:	61 11       	cpse	r22, r1
    319a:	1c c0       	rjmp	.+56     	; 0x31d4 <process_tapping+0x136>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    319c:	80 91 74 01 	lds	r24, 0x0174
    31a0:	20 91 75 01 	lds	r18, 0x0175
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    31a4:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    31a6:	82 17       	cp	r24, r18
    31a8:	09 f4       	brne	.+2      	; 0x31ac <process_tapping+0x10e>
    31aa:	5a c0       	rjmp	.+180    	; 0x3260 <process_tapping+0x1c2>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	38 9f       	mul	r19, r24
    31b0:	f0 01       	movw	r30, r0
    31b2:	39 9f       	mul	r19, r25
    31b4:	f0 0d       	add	r31, r0
    31b6:	11 24       	eor	r1, r1
    31b8:	ea 58       	subi	r30, 0x8A	; 138
    31ba:	fe 4f       	sbci	r31, 0xFE	; 254
    31bc:	71 81       	ldd	r23, Z+1	; 0x01
    31be:	57 13       	cpse	r21, r23
    31c0:	06 c0       	rjmp	.+12     	; 0x31ce <process_tapping+0x130>
    31c2:	70 81       	ld	r23, Z
    31c4:	47 13       	cpse	r20, r23
    31c6:	03 c0       	rjmp	.+6      	; 0x31ce <process_tapping+0x130>
    31c8:	72 81       	ldd	r23, Z+2	; 0x02
    31ca:	71 11       	cpse	r23, r1
    31cc:	03 c0       	rjmp	.+6      	; 0x31d4 <process_tapping+0x136>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    31ce:	01 96       	adiw	r24, 0x01	; 1
    31d0:	87 70       	andi	r24, 0x07	; 7
    31d2:	e9 cf       	rjmp	.-46     	; 0x31a6 <process_tapping+0x108>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    31d4:	f6 2e       	mov	r15, r22
    31d6:	66 23       	and	r22, r22
    31d8:	09 f4       	brne	.+2      	; 0x31dc <process_tapping+0x13e>
    31da:	18 c1       	rjmp	.+560    	; 0x340c <process_tapping+0x36e>
                        tapping_key.tap.interrupted = true;
    31dc:	80 91 ab 01 	lds	r24, 0x01AB
    31e0:	81 60       	ori	r24, 0x01	; 1
    31e2:	80 93 ab 01 	sts	0x01AB, r24
                    }
                    // enqueue 
                    return false;
    31e6:	f1 2c       	mov	r15, r1
    31e8:	11 c1       	rjmp	.+546    	; 0x340c <process_tapping+0x36e>
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    31ea:	75 13       	cpse	r23, r21
    31ec:	08 c0       	rjmp	.+16     	; 0x31fe <process_tapping+0x160>
    31ee:	34 13       	cpse	r19, r20
    31f0:	06 c0       	rjmp	.+12     	; 0x31fe <process_tapping+0x160>
    31f2:	61 11       	cpse	r22, r1
    31f4:	04 c0       	rjmp	.+8      	; 0x31fe <process_tapping+0x160>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    31f6:	80 91 ab 01 	lds	r24, 0x01AB
    31fa:	d8 01       	movw	r26, r16
    31fc:	c3 c0       	rjmp	.+390    	; 0x3384 <process_tapping+0x2e6>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    31fe:	4d 87       	std	Y+13, r20	; 0x0d
    3200:	5e 87       	std	Y+14, r21	; 0x0e
    3202:	8d 85       	ldd	r24, Y+13	; 0x0d
    3204:	9e 85       	ldd	r25, Y+14	; 0x0e
    3206:	6a 8b       	std	Y+18, r22	; 0x12
    3208:	0e 94 80 17 	call	0x2f00	; 0x2f00 <is_tap_key>
    320c:	6a 89       	ldd	r22, Y+18	; 0x12
    320e:	88 23       	and	r24, r24
    3210:	e1 f1       	breq	.+120    	; 0x328a <process_tapping+0x1ec>
    3212:	66 23       	and	r22, r22
    3214:	d1 f1       	breq	.+116    	; 0x328a <process_tapping+0x1ec>
                    if (tapping_key.tap.count > 1) {
    3216:	20 91 ab 01 	lds	r18, 0x01AB
    321a:	82 2f       	mov	r24, r18
    321c:	82 95       	swap	r24
    321e:	8f 70       	andi	r24, 0x0F	; 15
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	02 97       	sbiw	r24, 0x02	; 2
    3224:	74 f0       	brlt	.+28     	; 0x3242 <process_tapping+0x1a4>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3226:	80 91 a6 01 	lds	r24, 0x01A6
    322a:	90 91 a7 01 	lds	r25, 0x01A7
    322e:	98 87       	std	Y+8, r25	; 0x08
    3230:	8f 83       	std	Y+7, r24	; 0x07
    3232:	19 86       	std	Y+9, r1	; 0x09
    3234:	db 86       	std	Y+11, r13	; 0x0b
    3236:	ca 86       	std	Y+10, r12	; 0x0a
    3238:	2c 87       	std	Y+12, r18	; 0x0c
    323a:	ce 01       	movw	r24, r28
    323c:	07 96       	adiw	r24, 0x07	; 7
    323e:	0e 94 62 14 	call	0x28c4	; 0x28c4 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    3242:	86 e0       	ldi	r24, 0x06	; 6
    3244:	f8 01       	movw	r30, r16
    3246:	a6 ea       	ldi	r26, 0xA6	; 166
    3248:	b1 e0       	ldi	r27, 0x01	; 1
    324a:	01 90       	ld	r0, Z+
    324c:	0d 92       	st	X+, r0
    324e:	8a 95       	dec	r24
    3250:	e1 f7       	brne	.-8      	; 0x324a <process_tapping+0x1ac>
                    waiting_buffer_scan_tap();
    3252:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    3256:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <debug_tapping_key>
                    return true;
    325a:	ff 24       	eor	r15, r15
    325c:	f3 94       	inc	r15
    325e:	d6 c0       	rjmp	.+428    	; 0x340c <process_tapping+0x36e>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    3260:	4d 87       	std	Y+13, r20	; 0x0d
    3262:	5e 87       	std	Y+14, r21	; 0x0e
    3264:	8d 85       	ldd	r24, Y+13	; 0x0d
    3266:	9e 85       	ldd	r25, Y+14	; 0x0e
    3268:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <layer_switch_get_action>
                    switch (action.kind.id) {
    326c:	29 2f       	mov	r18, r25
    326e:	22 95       	swap	r18
    3270:	2f 70       	andi	r18, 0x0F	; 15
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	22 30       	cpi	r18, 0x02	; 2
    3276:	31 05       	cpc	r19, r1
    3278:	0c f0       	brlt	.+2      	; 0x327c <process_tapping+0x1de>
    327a:	bc c0       	rjmp	.+376    	; 0x33f4 <process_tapping+0x356>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    327c:	9f 70       	andi	r25, 0x0F	; 15
    327e:	09 f0       	breq	.+2      	; 0x3282 <process_tapping+0x1e4>
    3280:	b6 c0       	rjmp	.+364    	; 0x33ee <process_tapping+0x350>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
                            if (IS_MOD(action.key.code)) return false;
    3282:	80 5e       	subi	r24, 0xE0	; 224
    3284:	88 30       	cpi	r24, 0x08	; 8
    3286:	08 f4       	brcc	.+2      	; 0x328a <process_tapping+0x1ec>
    3288:	c1 c0       	rjmp	.+386    	; 0x340c <process_tapping+0x36e>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    328a:	c8 01       	movw	r24, r16
    328c:	0e 94 62 14 	call	0x28c4	; 0x28c4 <process_action>
    3290:	e4 cf       	rjmp	.-56     	; 0x325a <process_tapping+0x1bc>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3292:	c8 16       	cp	r12, r24
    3294:	d9 06       	cpc	r13, r25
    3296:	08 f4       	brcc	.+2      	; 0x329a <process_tapping+0x1fc>
    3298:	53 c0       	rjmp	.+166    	; 0x3340 <process_tapping+0x2a2>
    329a:	f6 01       	movw	r30, r12
    329c:	e8 1b       	sub	r30, r24
    329e:	f9 0b       	sbc	r31, r25
    32a0:	cf 01       	movw	r24, r30
    32a2:	88 3c       	cpi	r24, 0xC8	; 200
    32a4:	91 05       	cpc	r25, r1
    32a6:	08 f4       	brcc	.+2      	; 0x32aa <process_tapping+0x20c>
    32a8:	50 c0       	rjmp	.+160    	; 0x334a <process_tapping+0x2ac>
    32aa:	f1 2c       	mov	r15, r1
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    32ac:	7c 2d       	mov	r23, r12
    32ae:	d9 8a       	std	Y+17, r13	; 0x11
    32b0:	c8 8a       	std	Y+16, r12	; 0x10
    32b2:	89 89       	ldd	r24, Y+17	; 0x11
    32b4:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <debug_event>
        else {
            if (tapping_key.tap.count == 0) {
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
    32b8:	e6 ea       	ldi	r30, 0xA6	; 166
    32ba:	f1 e0       	ldi	r31, 0x01	; 1
    32bc:	86 e0       	ldi	r24, 0x06	; 6
    32be:	df 01       	movw	r26, r30
    32c0:	1d 92       	st	X+, r1
    32c2:	8a 95       	dec	r24
    32c4:	e9 f7       	brne	.-6      	; 0x32c0 <process_tapping+0x222>
                debug_tapping_key();
    32c6:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <debug_tapping_key>
                return false;
    32ca:	a0 c0       	rjmp	.+320    	; 0x340c <process_tapping+0x36e>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    32cc:	75 13       	cpse	r23, r21
    32ce:	14 c0       	rjmp	.+40     	; 0x32f8 <process_tapping+0x25a>
    32d0:	34 13       	cpse	r19, r20
    32d2:	12 c0       	rjmp	.+36     	; 0x32f8 <process_tapping+0x25a>
    32d4:	61 11       	cpse	r22, r1
    32d6:	10 c0       	rjmp	.+32     	; 0x32f8 <process_tapping+0x25a>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    32d8:	80 91 ab 01 	lds	r24, 0x01AB
    32dc:	f8 01       	movw	r30, r16
    32de:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    32e0:	c8 01       	movw	r24, r16
    32e2:	0e 94 62 14 	call	0x28c4	; 0x28c4 <process_action>
                    tapping_key = (keyrecord_t){};
    32e6:	86 e0       	ldi	r24, 0x06	; 6
    32e8:	e6 ea       	ldi	r30, 0xA6	; 166
    32ea:	f1 e0       	ldi	r31, 0x01	; 1
    32ec:	df 01       	movw	r26, r30
    32ee:	1d 92       	st	X+, r1
    32f0:	8a 95       	dec	r24
    32f2:	e9 f7       	brne	.-6      	; 0x32ee <process_tapping+0x250>
                    return true;
    32f4:	fe 2c       	mov	r15, r14
    32f6:	8a c0       	rjmp	.+276    	; 0x340c <process_tapping+0x36e>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    32f8:	4d 87       	std	Y+13, r20	; 0x0d
    32fa:	5e 87       	std	Y+14, r21	; 0x0e
    32fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    32fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3300:	6a 8b       	std	Y+18, r22	; 0x12
    3302:	0e 94 80 17 	call	0x2f00	; 0x2f00 <is_tap_key>
    3306:	6a 89       	ldd	r22, Y+18	; 0x12
    3308:	88 23       	and	r24, r24
    330a:	09 f4       	brne	.+2      	; 0x330e <process_tapping+0x270>
    330c:	be cf       	rjmp	.-132    	; 0x328a <process_tapping+0x1ec>
    330e:	66 23       	and	r22, r22
    3310:	09 f4       	brne	.+2      	; 0x3314 <process_tapping+0x276>
    3312:	bb cf       	rjmp	.-138    	; 0x328a <process_tapping+0x1ec>
                    if (tapping_key.tap.count > 1) {
    3314:	20 91 ab 01 	lds	r18, 0x01AB
    3318:	82 2f       	mov	r24, r18
    331a:	82 95       	swap	r24
    331c:	8f 70       	andi	r24, 0x0F	; 15
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	02 97       	sbiw	r24, 0x02	; 2
    3322:	0c f4       	brge	.+2      	; 0x3326 <process_tapping+0x288>
    3324:	8e cf       	rjmp	.-228    	; 0x3242 <process_tapping+0x1a4>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3326:	80 91 a6 01 	lds	r24, 0x01A6
    332a:	90 91 a7 01 	lds	r25, 0x01A7
    332e:	9a 83       	std	Y+2, r25	; 0x02
    3330:	89 83       	std	Y+1, r24	; 0x01
    3332:	1b 82       	std	Y+3, r1	; 0x03
    3334:	dd 82       	std	Y+5, r13	; 0x05
    3336:	cc 82       	std	Y+4, r12	; 0x04
    3338:	2e 83       	std	Y+6, r18	; 0x06
    333a:	ce 01       	movw	r24, r28
    333c:	01 96       	adiw	r24, 0x01	; 1
    333e:	7f cf       	rjmp	.-258    	; 0x323e <process_tapping+0x1a0>
    3340:	80 95       	com	r24
    3342:	90 95       	com	r25
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3344:	8c 0d       	add	r24, r12
    3346:	9d 1d       	adc	r25, r13
    3348:	ac cf       	rjmp	.-168    	; 0x32a2 <process_tapping+0x204>
            if (event.pressed) {
    334a:	f6 2e       	mov	r15, r22
    334c:	66 23       	and	r22, r22
    334e:	09 f4       	brne	.+2      	; 0x3352 <process_tapping+0x2b4>
    3350:	9c cf       	rjmp	.-200    	; 0x328a <process_tapping+0x1ec>
                if (IS_TAPPING_KEY(event.key)) {
    3352:	75 13       	cpse	r23, r21
    3354:	2e c0       	rjmp	.+92     	; 0x33b2 <process_tapping+0x314>
    3356:	34 13       	cpse	r19, r20
    3358:	2c c0       	rjmp	.+88     	; 0x33b2 <process_tapping+0x314>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    335a:	20 91 ab 01 	lds	r18, 0x01AB
    335e:	20 fd       	sbrc	r18, 0
    3360:	1f c0       	rjmp	.+62     	; 0x33a0 <process_tapping+0x302>
    3362:	82 2f       	mov	r24, r18
    3364:	82 95       	swap	r24
    3366:	8f 70       	andi	r24, 0x0F	; 15
    3368:	d9 f0       	breq	.+54     	; 0x33a0 <process_tapping+0x302>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    336a:	d8 01       	movw	r26, r16
    336c:	15 96       	adiw	r26, 0x05	; 5
    336e:	2c 93       	st	X, r18
    3370:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    3372:	8f 30       	cpi	r24, 0x0F	; 15
    3374:	49 f0       	breq	.+18     	; 0x3388 <process_tapping+0x2ea>
    3376:	8f 5f       	subi	r24, 0xFF	; 255
    3378:	98 2f       	mov	r25, r24
    337a:	92 95       	swap	r25
    337c:	90 7f       	andi	r25, 0xF0	; 240
    337e:	82 2f       	mov	r24, r18
    3380:	8f 70       	andi	r24, 0x0F	; 15
    3382:	89 2b       	or	r24, r25
    3384:	15 96       	adiw	r26, 0x05	; 5
    3386:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    3388:	c8 01       	movw	r24, r16
    338a:	0e 94 62 14 	call	0x28c4	; 0x28c4 <process_action>
                        tapping_key = *keyp;
    338e:	86 e0       	ldi	r24, 0x06	; 6
    3390:	f8 01       	movw	r30, r16
    3392:	a6 ea       	ldi	r26, 0xA6	; 166
    3394:	b1 e0       	ldi	r27, 0x01	; 1
    3396:	01 90       	ld	r0, Z+
    3398:	0d 92       	st	X+, r0
    339a:	8a 95       	dec	r24
    339c:	e1 f7       	brne	.-8      	; 0x3396 <process_tapping+0x2f8>
    339e:	93 cf       	rjmp	.-218    	; 0x32c6 <process_tapping+0x228>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    33a0:	86 e0       	ldi	r24, 0x06	; 6
    33a2:	f8 01       	movw	r30, r16
    33a4:	a6 ea       	ldi	r26, 0xA6	; 166
    33a6:	b1 e0       	ldi	r27, 0x01	; 1
    33a8:	01 90       	ld	r0, Z+
    33aa:	0d 92       	st	X+, r0
    33ac:	8a 95       	dec	r24
    33ae:	e1 f7       	brne	.-8      	; 0x33a8 <process_tapping+0x30a>
                        return true;
    33b0:	2d c0       	rjmp	.+90     	; 0x340c <process_tapping+0x36e>
                    }
                } else if (is_tap_key(event.key)) {
    33b2:	4d 87       	std	Y+13, r20	; 0x0d
    33b4:	5e 87       	std	Y+14, r21	; 0x0e
    33b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ba:	0e 94 80 17 	call	0x2f00	; 0x2f00 <is_tap_key>
    33be:	81 11       	cpse	r24, r1
    33c0:	40 cf       	rjmp	.-384    	; 0x3242 <process_tapping+0x1a4>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    33c2:	80 91 ab 01 	lds	r24, 0x01AB
    33c6:	81 60       	ori	r24, 0x01	; 1
    33c8:	80 93 ab 01 	sts	0x01AB, r24
                    process_action(keyp);
    33cc:	c8 01       	movw	r24, r16
    33ce:	0e 94 62 14 	call	0x28c4	; 0x28c4 <process_action>
                    return true;
    33d2:	1c c0       	rjmp	.+56     	; 0x340c <process_tapping+0x36e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    33d4:	66 23       	and	r22, r22
    33d6:	09 f4       	brne	.+2      	; 0x33da <process_tapping+0x33c>
    33d8:	58 cf       	rjmp	.-336    	; 0x328a <process_tapping+0x1ec>
    33da:	4d 87       	std	Y+13, r20	; 0x0d
    33dc:	5e 87       	std	Y+14, r21	; 0x0e
    33de:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33e2:	0e 94 80 17 	call	0x2f00	; 0x2f00 <is_tap_key>
    33e6:	88 23       	and	r24, r24
    33e8:	09 f4       	brne	.+2      	; 0x33ec <process_tapping+0x34e>
    33ea:	4f cf       	rjmp	.-354    	; 0x328a <process_tapping+0x1ec>
    33ec:	2a cf       	rjmp	.-428    	; 0x3242 <process_tapping+0x1a4>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    33ee:	81 11       	cpse	r24, r1
    33f0:	48 cf       	rjmp	.-368    	; 0x3282 <process_tapping+0x1e4>
    33f2:	0c c0       	rjmp	.+24     	; 0x340c <process_tapping+0x36e>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    33f4:	24 30       	cpi	r18, 0x04	; 4
    33f6:	31 05       	cpc	r19, r1
    33f8:	0c f0       	brlt	.+2      	; 0x33fc <process_tapping+0x35e>
    33fa:	47 cf       	rjmp	.-370    	; 0x328a <process_tapping+0x1ec>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    33fc:	9f 70       	andi	r25, 0x0F	; 15
    33fe:	09 f4       	brne	.+2      	; 0x3402 <process_tapping+0x364>
    3400:	40 cf       	rjmp	.-384    	; 0x3282 <process_tapping+0x1e4>
    3402:	f8 01       	movw	r30, r16
    3404:	95 81       	ldd	r25, Z+5	; 0x05
    3406:	90 7f       	andi	r25, 0xF0	; 240
    3408:	09 f0       	breq	.+2      	; 0x340c <process_tapping+0x36e>
    340a:	3b cf       	rjmp	.-394    	; 0x3282 <process_tapping+0x1e4>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    340c:	8f 2d       	mov	r24, r15
    340e:	62 96       	adiw	r28, 0x12	; 18
    3410:	0f b6       	in	r0, 0x3f	; 63
    3412:	f8 94       	cli
    3414:	de bf       	out	0x3e, r29	; 62
    3416:	0f be       	out	0x3f, r0	; 63
    3418:	cd bf       	out	0x3d, r28	; 61
    341a:	df 91       	pop	r29
    341c:	cf 91       	pop	r28
    341e:	1f 91       	pop	r17
    3420:	0f 91       	pop	r16
    3422:	ff 90       	pop	r15
    3424:	ef 90       	pop	r14
    3426:	df 90       	pop	r13
    3428:	cf 90       	pop	r12
    342a:	08 95       	ret

0000342c <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    342c:	1f 93       	push	r17
    342e:	cf 93       	push	r28
    3430:	df 93       	push	r29
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	2c 97       	sbiw	r28, 0x0c	; 12
    3438:	0f b6       	in	r0, 0x3f	; 63
    343a:	f8 94       	cli
    343c:	de bf       	out	0x3e, r29	; 62
    343e:	0f be       	out	0x3f, r0	; 63
    3440:	cd bf       	out	0x3d, r28	; 61
    3442:	4f 83       	std	Y+7, r20	; 0x07
    3444:	58 87       	std	Y+8, r21	; 0x08
    3446:	69 87       	std	Y+9, r22	; 0x09
    3448:	7a 87       	std	Y+10, r23	; 0x0a
    344a:	8b 87       	std	Y+11, r24	; 0x0b
    344c:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    344e:	ce 01       	movw	r24, r28
    3450:	07 96       	adiw	r24, 0x07	; 7
    3452:	0e 94 4f 18 	call	0x309e	; 0x309e <process_tapping>
    3456:	88 23       	and	r24, r24
    3458:	69 f0       	breq	.+26     	; 0x3474 <action_tapping_process+0x48>
    345a:	8f 81       	ldd	r24, Y+7	; 0x07
    345c:	98 85       	ldd	r25, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    345e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3460:	3b 85       	ldd	r19, Y+11	; 0x0b
    3462:	23 2b       	or	r18, r19
    3464:	f1 f1       	breq	.+124    	; 0x34e2 <action_tapping_process+0xb6>
    3466:	9f 3f       	cpi	r25, 0xFF	; 255
    3468:	09 f0       	breq	.+2      	; 0x346c <action_tapping_process+0x40>
    346a:	63 c0       	rjmp	.+198    	; 0x3532 <action_tapping_process+0x106>
    346c:	8f 3f       	cpi	r24, 0xFF	; 255
    346e:	09 f0       	breq	.+2      	; 0x3472 <action_tapping_process+0x46>
    3470:	60 c0       	rjmp	.+192    	; 0x3532 <action_tapping_process+0x106>
    3472:	37 c0       	rjmp	.+110    	; 0x34e2 <action_tapping_process+0xb6>
    3474:	86 e0       	ldi	r24, 0x06	; 6
    3476:	fe 01       	movw	r30, r28
    3478:	37 96       	adiw	r30, 0x07	; 7
    347a:	de 01       	movw	r26, r28
    347c:	11 96       	adiw	r26, 0x01	; 1
    347e:	01 90       	ld	r0, Z+
    3480:	0d 92       	st	X+, r0
    3482:	8a 95       	dec	r24
    3484:	e1 f7       	brne	.-8      	; 0x347e <action_tapping_process+0x52>
    3486:	6f 81       	ldd	r22, Y+7	; 0x07
    3488:	78 85       	ldd	r23, Y+8	; 0x08
    348a:	ea 85       	ldd	r30, Y+10	; 0x0a
    348c:	fb 85       	ldd	r31, Y+11	; 0x0b
    348e:	30 97       	sbiw	r30, 0x00	; 0
    3490:	41 f1       	breq	.+80     	; 0x34e2 <action_tapping_process+0xb6>
    3492:	7f 3f       	cpi	r23, 0xFF	; 255
    3494:	11 f4       	brne	.+4      	; 0x349a <action_tapping_process+0x6e>
    3496:	6f 3f       	cpi	r22, 0xFF	; 255
    3498:	21 f1       	breq	.+72     	; 0x34e2 <action_tapping_process+0xb6>
{
    if (IS_NOEVENT(record.event)) {
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    349a:	20 91 75 01 	lds	r18, 0x0175
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	c9 01       	movw	r24, r18
    34a2:	01 96       	adiw	r24, 0x01	; 1
    34a4:	87 70       	andi	r24, 0x07	; 7
    34a6:	99 27       	eor	r25, r25
    34a8:	40 91 74 01 	lds	r20, 0x0174
    34ac:	50 e0       	ldi	r21, 0x00	; 0
    34ae:	84 17       	cp	r24, r20
    34b0:	95 07       	cpc	r25, r21
    34b2:	09 f4       	brne	.+2      	; 0x34b6 <action_tapping_process+0x8a>
    34b4:	47 c0       	rjmp	.+142    	; 0x3544 <action_tapping_process+0x118>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    34b6:	69 83       	std	Y+1, r22	; 0x01
    34b8:	7a 83       	std	Y+2, r23	; 0x02
    34ba:	fd 83       	std	Y+5, r31	; 0x05
    34bc:	ec 83       	std	Y+4, r30	; 0x04
    34be:	96 e0       	ldi	r25, 0x06	; 6
    34c0:	92 9f       	mul	r25, r18
    34c2:	d0 01       	movw	r26, r0
    34c4:	93 9f       	mul	r25, r19
    34c6:	b0 0d       	add	r27, r0
    34c8:	11 24       	eor	r1, r1
    34ca:	aa 58       	subi	r26, 0x8A	; 138
    34cc:	be 4f       	sbci	r27, 0xFE	; 254
    34ce:	fe 01       	movw	r30, r28
    34d0:	31 96       	adiw	r30, 0x01	; 1
    34d2:	01 90       	ld	r0, Z+
    34d4:	0d 92       	st	X+, r0
    34d6:	9a 95       	dec	r25
    34d8:	e1 f7       	brne	.-8      	; 0x34d2 <action_tapping_process+0xa6>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    34da:	80 93 75 01 	sts	0x0175, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    34de:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    34e2:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    34e4:	80 91 74 01 	lds	r24, 0x0174
    34e8:	90 91 75 01 	lds	r25, 0x0175
    34ec:	89 17       	cp	r24, r25
    34ee:	c1 f1       	breq	.+112    	; 0x3560 <action_tapping_process+0x134>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    34f0:	18 9f       	mul	r17, r24
    34f2:	c0 01       	movw	r24, r0
    34f4:	11 24       	eor	r1, r1
    34f6:	8a 58       	subi	r24, 0x8A	; 138
    34f8:	9e 4f       	sbci	r25, 0xFE	; 254
    34fa:	0e 94 4f 18 	call	0x309e	; 0x309e <process_tapping>
    34fe:	88 23       	and	r24, r24
    3500:	79 f1       	breq	.+94     	; 0x3560 <action_tapping_process+0x134>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3502:	e0 91 74 01 	lds	r30, 0x0174
    3506:	1e 9f       	mul	r17, r30
    3508:	f0 01       	movw	r30, r0
    350a:	11 24       	eor	r1, r1
    350c:	ea 58       	subi	r30, 0x8A	; 138
    350e:	fe 4f       	sbci	r31, 0xFE	; 254
    3510:	40 81       	ld	r20, Z
    3512:	51 81       	ldd	r21, Z+1	; 0x01
    3514:	62 81       	ldd	r22, Z+2	; 0x02
    3516:	73 81       	ldd	r23, Z+3	; 0x03
    3518:	84 81       	ldd	r24, Z+4	; 0x04
    351a:	95 81       	ldd	r25, Z+5	; 0x05
    351c:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3520:	80 91 74 01 	lds	r24, 0x0174
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	01 96       	adiw	r24, 0x01	; 1
    3528:	87 70       	andi	r24, 0x07	; 7
    352a:	99 27       	eor	r25, r25
    352c:	80 93 74 01 	sts	0x0174, r24
    3530:	d9 cf       	rjmp	.-78     	; 0x34e4 <action_tapping_process+0xb8>

void action_tapping_process(keyrecord_t record)
{
    if (process_tapping(&record)) {
        if (!IS_NOEVENT(record.event)) {
            debug("processed: "); debug_record(record); debug("\n");
    3532:	4f 81       	ldd	r20, Y+7	; 0x07
    3534:	58 85       	ldd	r21, Y+8	; 0x08
    3536:	69 85       	ldd	r22, Y+9	; 0x09
    3538:	7a 85       	ldd	r23, Y+10	; 0x0a
    353a:	8b 85       	ldd	r24, Y+11	; 0x0b
    353c:	9c 85       	ldd	r25, Y+12	; 0x0c
    353e:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <debug_record>
    3542:	cf cf       	rjmp	.-98     	; 0x34e2 <action_tapping_process+0xb6>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    3544:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    3548:	10 92 75 01 	sts	0x0175, r1
    waiting_buffer_tail = 0;
    354c:	10 92 74 01 	sts	0x0174, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    3550:	e6 ea       	ldi	r30, 0xA6	; 166
    3552:	f1 e0       	ldi	r31, 0x01	; 1
    3554:	86 e0       	ldi	r24, 0x06	; 6
    3556:	df 01       	movw	r26, r30
    3558:	1d 92       	st	X+, r1
    355a:	8a 95       	dec	r24
    355c:	e9 f7       	brne	.-6      	; 0x3558 <action_tapping_process+0x12c>
    355e:	c1 cf       	rjmp	.-126    	; 0x34e2 <action_tapping_process+0xb6>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    3560:	2c 96       	adiw	r28, 0x0c	; 12
    3562:	0f b6       	in	r0, 0x3f	; 63
    3564:	f8 94       	cli
    3566:	de bf       	out	0x3e, r29	; 62
    3568:	0f be       	out	0x3f, r0	; 63
    356a:	cd bf       	out	0x3d, r28	; 61
    356c:	df 91       	pop	r29
    356e:	cf 91       	pop	r28
    3570:	1f 91       	pop	r17
    3572:	08 95       	ret

00003574 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3574:	df 92       	push	r13
    3576:	ef 92       	push	r14
    3578:	ff 92       	push	r15
    357a:	0f 93       	push	r16
    357c:	1f 93       	push	r17
    357e:	cf 93       	push	r28
    3580:	df 93       	push	r29
    3582:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    3584:	89 2b       	or	r24, r25
    3586:	09 f4       	brne	.+2      	; 0x358a <action_macro_play+0x16>
    3588:	8a c0       	rjmp	.+276    	; 0x369e <action_macro_play+0x12a>
    358a:	e1 2c       	mov	r14, r1
    358c:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    358e:	dd 24       	eor	r13, r13
    3590:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3592:	ef 01       	movw	r28, r30
    3594:	21 96       	adiw	r28, 0x01	; 1
    3596:	84 91       	lpm	r24, Z
    3598:	85 37       	cpi	r24, 0x75	; 117
    359a:	09 f4       	brne	.+2      	; 0x359e <action_macro_play+0x2a>
    359c:	61 c0       	rjmp	.+194    	; 0x3660 <action_macro_play+0xec>
    359e:	58 f4       	brcc	.+22     	; 0x35b6 <action_macro_play+0x42>
    35a0:	84 37       	cpi	r24, 0x74	; 116
    35a2:	08 f0       	brcs	.+2      	; 0x35a6 <action_macro_play+0x32>
    35a4:	4e c0       	rjmp	.+156    	; 0x3642 <action_macro_play+0xce>
    35a6:	84 30       	cpi	r24, 0x04	; 4
    35a8:	08 f0       	brcs	.+2      	; 0x35ac <action_macro_play+0x38>
    35aa:	6a c0       	rjmp	.+212    	; 0x3680 <action_macro_play+0x10c>
    35ac:	81 30       	cpi	r24, 0x01	; 1
    35ae:	d1 f0       	breq	.+52     	; 0x35e4 <action_macro_play+0x70>
    35b0:	82 30       	cpi	r24, 0x02	; 2
    35b2:	71 f1       	breq	.+92     	; 0x3610 <action_macro_play+0x9c>
    35b4:	74 c0       	rjmp	.+232    	; 0x369e <action_macro_play+0x12a>
    35b6:	88 37       	cpi	r24, 0x78	; 120
    35b8:	09 f4       	brne	.+2      	; 0x35bc <action_macro_play+0x48>
    35ba:	5d c0       	rjmp	.+186    	; 0x3676 <action_macro_play+0x102>
    35bc:	50 f4       	brcc	.+20     	; 0x35d2 <action_macro_play+0x5e>
    35be:	86 37       	cpi	r24, 0x76	; 118
    35c0:	09 f4       	brne	.+2      	; 0x35c4 <action_macro_play+0x50>
    35c2:	55 c0       	rjmp	.+170    	; 0x366e <action_macro_play+0xfa>
    35c4:	87 37       	cpi	r24, 0x77	; 119
    35c6:	09 f0       	breq	.+2      	; 0x35ca <action_macro_play+0x56>
    35c8:	6a c0       	rjmp	.+212    	; 0x369e <action_macro_play+0x12a>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    35ca:	8e 2d       	mov	r24, r14
    35cc:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <set_mods>
    35d0:	54 c0       	rjmp	.+168    	; 0x367a <action_macro_play+0x106>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    35d2:	9c e7       	ldi	r25, 0x7C	; 124
    35d4:	98 0f       	add	r25, r24
    35d6:	90 37       	cpi	r25, 0x70	; 112
    35d8:	08 f0       	brcs	.+2      	; 0x35dc <action_macro_play+0x68>
    35da:	61 c0       	rjmp	.+194    	; 0x369e <action_macro_play+0x12a>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    35dc:	8f 77       	andi	r24, 0x7F	; 127
    35de:	0e 94 05 14 	call	0x280a	; 0x280a <unregister_code>
                break;
    35e2:	50 c0       	rjmp	.+160    	; 0x3684 <action_macro_play+0x110>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    35e4:	8f 01       	movw	r16, r30
    35e6:	0e 5f       	subi	r16, 0xFE	; 254
    35e8:	1f 4f       	sbci	r17, 0xFF	; 255
    35ea:	fe 01       	movw	r30, r28
    35ec:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    35ee:	90 e2       	ldi	r25, 0x20	; 32
    35f0:	98 0f       	add	r25, r24
    35f2:	98 30       	cpi	r25, 0x08	; 8
    35f4:	50 f4       	brcc	.+20     	; 0x360a <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    35f6:	87 70       	andi	r24, 0x07	; 7
    35f8:	fd 2d       	mov	r31, r13
    35fa:	01 c0       	rjmp	.+2      	; 0x35fe <action_macro_play+0x8a>
    35fc:	ff 0f       	add	r31, r31
    35fe:	8a 95       	dec	r24
    3600:	ea f7       	brpl	.-6      	; 0x35fc <action_macro_play+0x88>
    3602:	8f 2f       	mov	r24, r31
    3604:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <add_weak_mods>
    3608:	14 c0       	rjmp	.+40     	; 0x3632 <action_macro_play+0xbe>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    360a:	0e 94 32 13 	call	0x2664	; 0x2664 <register_code>
    360e:	13 c0       	rjmp	.+38     	; 0x3636 <action_macro_play+0xc2>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3610:	8f 01       	movw	r16, r30
    3612:	0e 5f       	subi	r16, 0xFE	; 254
    3614:	1f 4f       	sbci	r17, 0xFF	; 255
    3616:	fe 01       	movw	r30, r28
    3618:	c4 91       	lpm	r28, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    361a:	80 e2       	ldi	r24, 0x20	; 32
    361c:	8c 0f       	add	r24, r28
    361e:	88 30       	cpi	r24, 0x08	; 8
    3620:	60 f4       	brcc	.+24     	; 0x363a <action_macro_play+0xc6>
                    del_weak_mods(MOD_BIT(macro));
    3622:	c7 70       	andi	r28, 0x07	; 7
    3624:	8d 2d       	mov	r24, r13
    3626:	01 c0       	rjmp	.+2      	; 0x362a <action_macro_play+0xb6>
    3628:	88 0f       	add	r24, r24
    362a:	ca 95       	dec	r28
    362c:	ea f7       	brpl	.-6      	; 0x3628 <action_macro_play+0xb4>
    362e:	0e 94 65 1d 	call	0x3aca	; 0x3aca <del_weak_mods>
                    send_keyboard_report();
    3632:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3636:	e8 01       	movw	r28, r16
    3638:	25 c0       	rjmp	.+74     	; 0x3684 <action_macro_play+0x110>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    363a:	8c 2f       	mov	r24, r28
    363c:	0e 94 05 14 	call	0x280a	; 0x280a <unregister_code>
    3640:	fa cf       	rjmp	.-12     	; 0x3636 <action_macro_play+0xc2>
                }
                break;
            case WAIT:
                MACRO_READ();
    3642:	9f 01       	movw	r18, r30
    3644:	2e 5f       	subi	r18, 0xFE	; 254
    3646:	3f 4f       	sbci	r19, 0xFF	; 255
    3648:	fe 01       	movw	r30, r28
    364a:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    364c:	cc 23       	and	r28, r28
    364e:	69 f0       	breq	.+26     	; 0x366a <action_macro_play+0xf6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3650:	8f e9       	ldi	r24, 0x9F	; 159
    3652:	9f e0       	ldi	r25, 0x0F	; 15
    3654:	01 97       	sbiw	r24, 0x01	; 1
    3656:	f1 f7       	brne	.-4      	; 0x3654 <action_macro_play+0xe0>
    3658:	00 c0       	rjmp	.+0      	; 0x365a <action_macro_play+0xe6>
    365a:	00 00       	nop
    365c:	c1 50       	subi	r28, 0x01	; 1
    365e:	f6 cf       	rjmp	.-20     	; 0x364c <action_macro_play+0xd8>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    3660:	9f 01       	movw	r18, r30
    3662:	2e 5f       	subi	r18, 0xFE	; 254
    3664:	3f 4f       	sbci	r19, 0xFF	; 255
    3666:	fe 01       	movw	r30, r28
    3668:	f4 90       	lpm	r15, Z
    366a:	e9 01       	movw	r28, r18
                dprintf("INTERVAL(%u)\n", interval);
                break;
    366c:	0b c0       	rjmp	.+22     	; 0x3684 <action_macro_play+0x110>
            case MOD_STORE:
                mod_storage = get_mods();
    366e:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <get_mods>
    3672:	e8 2e       	mov	r14, r24
                break;
    3674:	07 c0       	rjmp	.+14     	; 0x3684 <action_macro_play+0x110>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    3676:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <clear_mods>
                send_keyboard_report();
    367a:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <send_keyboard_report>
                break;
    367e:	02 c0       	rjmp	.+4      	; 0x3684 <action_macro_play+0x110>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    3680:	0e 94 32 13 	call	0x2664	; 0x2664 <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    3684:	8f 2d       	mov	r24, r15
    3686:	88 23       	and	r24, r24
    3688:	41 f0       	breq	.+16     	; 0x369a <action_macro_play+0x126>
    368a:	ef e9       	ldi	r30, 0x9F	; 159
    368c:	ff e0       	ldi	r31, 0x0F	; 15
    368e:	31 97       	sbiw	r30, 0x01	; 1
    3690:	f1 f7       	brne	.-4      	; 0x368e <action_macro_play+0x11a>
    3692:	00 c0       	rjmp	.+0      	; 0x3694 <action_macro_play+0x120>
    3694:	00 00       	nop
    3696:	81 50       	subi	r24, 0x01	; 1
    3698:	f6 cf       	rjmp	.-20     	; 0x3686 <action_macro_play+0x112>
    369a:	fe 01       	movw	r30, r28
    369c:	7a cf       	rjmp	.-268    	; 0x3592 <action_macro_play+0x1e>
    }
}
    369e:	df 91       	pop	r29
    36a0:	cf 91       	pop	r28
    36a2:	1f 91       	pop	r17
    36a4:	0f 91       	pop	r16
    36a6:	ff 90       	pop	r15
    36a8:	ef 90       	pop	r14
    36aa:	df 90       	pop	r13
    36ac:	08 95       	ret

000036ae <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    36ae:	60 93 b0 01 	sts	0x01B0, r22
    36b2:	70 93 b1 01 	sts	0x01B1, r23
    36b6:	80 93 b2 01 	sts	0x01B2, r24
    36ba:	90 93 b3 01 	sts	0x01B3, r25
    hook_default_layer_change(default_layer_state);
    36be:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <hook_default_layer_change>
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    36c2:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <clear_keyboard_but_mods>

000036c6 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    36c6:	60 93 ac 01 	sts	0x01AC, r22
    36ca:	70 93 ad 01 	sts	0x01AD, r23
    36ce:	80 93 ae 01 	sts	0x01AE, r24
    36d2:	90 93 af 01 	sts	0x01AF, r25
    hook_layer_change(layer_state);
    36d6:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <hook_layer_change>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    36da:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <clear_keyboard_but_mods>

000036de <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    36de:	08 95       	ret

000036e0 <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    36e0:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <default_layer_state_set>

000036e4 <default_layer_or>:
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    36e4:	0f 93       	push	r16
    36e6:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    36e8:	00 91 b0 01 	lds	r16, 0x01B0
    36ec:	10 91 b1 01 	lds	r17, 0x01B1
    36f0:	20 91 b2 01 	lds	r18, 0x01B2
    36f4:	30 91 b3 01 	lds	r19, 0x01B3
    36f8:	60 2b       	or	r22, r16
    36fa:	71 2b       	or	r23, r17
    36fc:	82 2b       	or	r24, r18
    36fe:	93 2b       	or	r25, r19
}
    3700:	1f 91       	pop	r17
    3702:	0f 91       	pop	r16
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
    3704:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <default_layer_state_set>

00003708 <default_layer_and>:
}
void default_layer_and(uint32_t state)
{
    3708:	0f 93       	push	r16
    370a:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    370c:	00 91 b0 01 	lds	r16, 0x01B0
    3710:	10 91 b1 01 	lds	r17, 0x01B1
    3714:	20 91 b2 01 	lds	r18, 0x01B2
    3718:	30 91 b3 01 	lds	r19, 0x01B3
    371c:	60 23       	and	r22, r16
    371e:	71 23       	and	r23, r17
    3720:	82 23       	and	r24, r18
    3722:	93 23       	and	r25, r19
}
    3724:	1f 91       	pop	r17
    3726:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
    3728:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <default_layer_state_set>

0000372c <default_layer_xor>:
}
void default_layer_xor(uint32_t state)
{
    372c:	0f 93       	push	r16
    372e:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    3730:	00 91 b0 01 	lds	r16, 0x01B0
    3734:	10 91 b1 01 	lds	r17, 0x01B1
    3738:	20 91 b2 01 	lds	r18, 0x01B2
    373c:	30 91 b3 01 	lds	r19, 0x01B3
    3740:	60 27       	eor	r22, r16
    3742:	71 27       	eor	r23, r17
    3744:	82 27       	eor	r24, r18
    3746:	93 27       	eor	r25, r19
}
    3748:	1f 91       	pop	r17
    374a:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
    374c:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <default_layer_state_set>

00003750 <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    3750:	60 e0       	ldi	r22, 0x00	; 0
    3752:	70 e0       	ldi	r23, 0x00	; 0
    3754:	cb 01       	movw	r24, r22
    3756:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <layer_state_set>

0000375a <layer_move>:
}

void layer_move(uint8_t layer)
{
    375a:	0f 93       	push	r16
    375c:	1f 93       	push	r17
    layer_state_set(1UL<<layer);
    375e:	41 e0       	ldi	r20, 0x01	; 1
    3760:	50 e0       	ldi	r21, 0x00	; 0
    3762:	60 e0       	ldi	r22, 0x00	; 0
    3764:	70 e0       	ldi	r23, 0x00	; 0
    3766:	8a 01       	movw	r16, r20
    3768:	9b 01       	movw	r18, r22
    376a:	04 c0       	rjmp	.+8      	; 0x3774 <layer_move+0x1a>
    376c:	00 0f       	add	r16, r16
    376e:	11 1f       	adc	r17, r17
    3770:	22 1f       	adc	r18, r18
    3772:	33 1f       	adc	r19, r19
    3774:	8a 95       	dec	r24
    3776:	d2 f7       	brpl	.-12     	; 0x376c <layer_move+0x12>
    3778:	c9 01       	movw	r24, r18
    377a:	b8 01       	movw	r22, r16
}
    377c:	1f 91       	pop	r17
    377e:	0f 91       	pop	r16
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    3780:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <layer_state_set>

00003784 <layer_on>:
}

void layer_on(uint8_t layer)
{
    3784:	0f 93       	push	r16
    3786:	1f 93       	push	r17
    layer_state_set(layer_state | (1UL<<layer));
    3788:	41 e0       	ldi	r20, 0x01	; 1
    378a:	50 e0       	ldi	r21, 0x00	; 0
    378c:	60 e0       	ldi	r22, 0x00	; 0
    378e:	70 e0       	ldi	r23, 0x00	; 0
    3790:	04 c0       	rjmp	.+8      	; 0x379a <layer_on+0x16>
    3792:	44 0f       	add	r20, r20
    3794:	55 1f       	adc	r21, r21
    3796:	66 1f       	adc	r22, r22
    3798:	77 1f       	adc	r23, r23
    379a:	8a 95       	dec	r24
    379c:	d2 f7       	brpl	.-12     	; 0x3792 <layer_on+0xe>
    379e:	80 91 ac 01 	lds	r24, 0x01AC
    37a2:	90 91 ad 01 	lds	r25, 0x01AD
    37a6:	a0 91 ae 01 	lds	r26, 0x01AE
    37aa:	b0 91 af 01 	lds	r27, 0x01AF
    37ae:	8a 01       	movw	r16, r20
    37b0:	9b 01       	movw	r18, r22
    37b2:	08 2b       	or	r16, r24
    37b4:	19 2b       	or	r17, r25
    37b6:	2a 2b       	or	r18, r26
    37b8:	3b 2b       	or	r19, r27
    37ba:	c9 01       	movw	r24, r18
    37bc:	b8 01       	movw	r22, r16
}
    37be:	1f 91       	pop	r17
    37c0:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    37c2:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <layer_state_set>

000037c6 <layer_off>:
}

void layer_off(uint8_t layer)
{
    37c6:	0f 93       	push	r16
    37c8:	1f 93       	push	r17
    layer_state_set(layer_state & ~(1UL<<layer));
    37ca:	41 e0       	ldi	r20, 0x01	; 1
    37cc:	50 e0       	ldi	r21, 0x00	; 0
    37ce:	60 e0       	ldi	r22, 0x00	; 0
    37d0:	70 e0       	ldi	r23, 0x00	; 0
    37d2:	04 c0       	rjmp	.+8      	; 0x37dc <layer_off+0x16>
    37d4:	44 0f       	add	r20, r20
    37d6:	55 1f       	adc	r21, r21
    37d8:	66 1f       	adc	r22, r22
    37da:	77 1f       	adc	r23, r23
    37dc:	8a 95       	dec	r24
    37de:	d2 f7       	brpl	.-12     	; 0x37d4 <layer_off+0xe>
    37e0:	40 95       	com	r20
    37e2:	50 95       	com	r21
    37e4:	60 95       	com	r22
    37e6:	70 95       	com	r23
    37e8:	80 91 ac 01 	lds	r24, 0x01AC
    37ec:	90 91 ad 01 	lds	r25, 0x01AD
    37f0:	a0 91 ae 01 	lds	r26, 0x01AE
    37f4:	b0 91 af 01 	lds	r27, 0x01AF
    37f8:	8a 01       	movw	r16, r20
    37fa:	9b 01       	movw	r18, r22
    37fc:	08 23       	and	r16, r24
    37fe:	19 23       	and	r17, r25
    3800:	2a 23       	and	r18, r26
    3802:	3b 23       	and	r19, r27
    3804:	c9 01       	movw	r24, r18
    3806:	b8 01       	movw	r22, r16
}
    3808:	1f 91       	pop	r17
    380a:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    380c:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <layer_state_set>

00003810 <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    3810:	0f 93       	push	r16
    3812:	1f 93       	push	r17
    layer_state_set(layer_state ^ (1UL<<layer));
    3814:	41 e0       	ldi	r20, 0x01	; 1
    3816:	50 e0       	ldi	r21, 0x00	; 0
    3818:	60 e0       	ldi	r22, 0x00	; 0
    381a:	70 e0       	ldi	r23, 0x00	; 0
    381c:	04 c0       	rjmp	.+8      	; 0x3826 <layer_invert+0x16>
    381e:	44 0f       	add	r20, r20
    3820:	55 1f       	adc	r21, r21
    3822:	66 1f       	adc	r22, r22
    3824:	77 1f       	adc	r23, r23
    3826:	8a 95       	dec	r24
    3828:	d2 f7       	brpl	.-12     	; 0x381e <layer_invert+0xe>
    382a:	80 91 ac 01 	lds	r24, 0x01AC
    382e:	90 91 ad 01 	lds	r25, 0x01AD
    3832:	a0 91 ae 01 	lds	r26, 0x01AE
    3836:	b0 91 af 01 	lds	r27, 0x01AF
    383a:	8a 01       	movw	r16, r20
    383c:	9b 01       	movw	r18, r22
    383e:	08 27       	eor	r16, r24
    3840:	19 27       	eor	r17, r25
    3842:	2a 27       	eor	r18, r26
    3844:	3b 27       	eor	r19, r27
    3846:	c9 01       	movw	r24, r18
    3848:	b8 01       	movw	r22, r16
}
    384a:	1f 91       	pop	r17
    384c:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    384e:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <layer_state_set>

00003852 <layer_or>:
}

void layer_or(uint32_t state)
{
    3852:	0f 93       	push	r16
    3854:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3856:	00 91 ac 01 	lds	r16, 0x01AC
    385a:	10 91 ad 01 	lds	r17, 0x01AD
    385e:	20 91 ae 01 	lds	r18, 0x01AE
    3862:	30 91 af 01 	lds	r19, 0x01AF
    3866:	60 2b       	or	r22, r16
    3868:	71 2b       	or	r23, r17
    386a:	82 2b       	or	r24, r18
    386c:	93 2b       	or	r25, r19
}
    386e:	1f 91       	pop	r17
    3870:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    3872:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <layer_state_set>

00003876 <layer_and>:
}
void layer_and(uint32_t state)
{
    3876:	0f 93       	push	r16
    3878:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    387a:	00 91 ac 01 	lds	r16, 0x01AC
    387e:	10 91 ad 01 	lds	r17, 0x01AD
    3882:	20 91 ae 01 	lds	r18, 0x01AE
    3886:	30 91 af 01 	lds	r19, 0x01AF
    388a:	60 23       	and	r22, r16
    388c:	71 23       	and	r23, r17
    388e:	82 23       	and	r24, r18
    3890:	93 23       	and	r25, r19
}
    3892:	1f 91       	pop	r17
    3894:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    3896:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <layer_state_set>

0000389a <layer_xor>:
}
void layer_xor(uint32_t state)
{
    389a:	0f 93       	push	r16
    389c:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    389e:	00 91 ac 01 	lds	r16, 0x01AC
    38a2:	10 91 ad 01 	lds	r17, 0x01AD
    38a6:	20 91 ae 01 	lds	r18, 0x01AE
    38aa:	30 91 af 01 	lds	r19, 0x01AF
    38ae:	60 27       	eor	r22, r16
    38b0:	71 27       	eor	r23, r17
    38b2:	82 27       	eor	r24, r18
    38b4:	93 27       	eor	r25, r19
}
    38b6:	1f 91       	pop	r17
    38b8:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    38ba:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <layer_state_set>

000038be <layer_debug>:
}

void layer_debug(void)
{
    38be:	08 95       	ret

000038c0 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    38c0:	cf 92       	push	r12
    38c2:	df 92       	push	r13
    38c4:	ef 92       	push	r14
    38c6:	ff 92       	push	r15
    38c8:	0f 93       	push	r16
    38ca:	1f 93       	push	r17
    38cc:	cf 93       	push	r28
    38ce:	df 93       	push	r29
    38d0:	8c 01       	movw	r16, r24
    action_t action = { .code = ACTION_TRANSPARENT };

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    38d2:	c0 90 b0 01 	lds	r12, 0x01B0
    38d6:	d0 90 b1 01 	lds	r13, 0x01B1
    38da:	e0 90 b2 01 	lds	r14, 0x01B2
    38de:	f0 90 b3 01 	lds	r15, 0x01B3
    38e2:	40 91 ac 01 	lds	r20, 0x01AC
    38e6:	50 91 ad 01 	lds	r21, 0x01AD
    38ea:	60 91 ae 01 	lds	r22, 0x01AE
    38ee:	70 91 af 01 	lds	r23, 0x01AF
    38f2:	c4 2a       	or	r12, r20
    38f4:	d5 2a       	or	r13, r21
    38f6:	e6 2a       	or	r14, r22
    38f8:	f7 2a       	or	r15, r23
    38fa:	cf e1       	ldi	r28, 0x1F	; 31
    38fc:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    38fe:	d7 01       	movw	r26, r14
    3900:	c6 01       	movw	r24, r12
    3902:	0c 2e       	mov	r0, r28
    3904:	04 c0       	rjmp	.+8      	; 0x390e <layer_switch_get_action+0x4e>
    3906:	b6 95       	lsr	r27
    3908:	a7 95       	ror	r26
    390a:	97 95       	ror	r25
    390c:	87 95       	ror	r24
    390e:	0a 94       	dec	r0
    3910:	d2 f7       	brpl	.-12     	; 0x3906 <layer_switch_get_action+0x46>
    3912:	80 ff       	sbrs	r24, 0
    3914:	07 c0       	rjmp	.+14     	; 0x3924 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    3916:	b8 01       	movw	r22, r16
    3918:	8c 2f       	mov	r24, r28
    391a:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    391e:	81 30       	cpi	r24, 0x01	; 1
    3920:	91 05       	cpc	r25, r1
    3922:	31 f4       	brne	.+12     	; 0x3930 <layer_switch_get_action+0x70>
    3924:	21 97       	sbiw	r28, 0x01	; 1
    3926:	58 f7       	brcc	.-42     	; 0x38fe <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    3928:	b8 01       	movw	r22, r16
    392a:	80 e0       	ldi	r24, 0x00	; 0
    392c:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    3930:	df 91       	pop	r29
    3932:	cf 91       	pop	r28
    3934:	1f 91       	pop	r17
    3936:	0f 91       	pop	r16
    3938:	ff 90       	pop	r15
    393a:	ef 90       	pop	r14
    393c:	df 90       	pop	r13
    393e:	cf 90       	pop	r12
    3940:	08 95       	ret

00003942 <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    3942:	90 91 0b 01 	lds	r25, 0x010B
    3946:	99 23       	and	r25, r25
    3948:	21 f0       	breq	.+8      	; 0x3952 <add_key+0x10>
    394a:	90 91 0c 01 	lds	r25, 0x010C
    394e:	91 11       	cpse	r25, r1
    3950:	09 c0       	rjmp	.+18     	; 0x3964 <add_key+0x22>
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3952:	20 91 0d 01 	lds	r18, 0x010D
    3956:	30 91 0e 01 	lds	r19, 0x010E
    395a:	f9 01       	movw	r30, r18
    395c:	32 96       	adiw	r30, 0x02	; 2
    395e:	9f ef       	ldi	r25, 0xFF	; 255
    3960:	40 e0       	ldi	r20, 0x00	; 0
    3962:	30 c0       	rjmp	.+96     	; 0x39c4 <add_key+0x82>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3964:	98 2f       	mov	r25, r24
    3966:	96 95       	lsr	r25
    3968:	96 95       	lsr	r25
    396a:	96 95       	lsr	r25
    396c:	9f 30       	cpi	r25, 0x0F	; 15
    396e:	a0 f4       	brcc	.+40     	; 0x3998 <add_key+0x56>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    3970:	e0 91 0d 01 	lds	r30, 0x010D
    3974:	f0 91 0e 01 	lds	r31, 0x010E
    3978:	e9 0f       	add	r30, r25
    397a:	f1 1d       	adc	r31, r1
    397c:	87 70       	andi	r24, 0x07	; 7
    397e:	21 e0       	ldi	r18, 0x01	; 1
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	a9 01       	movw	r20, r18
    3984:	02 c0       	rjmp	.+4      	; 0x398a <add_key+0x48>
    3986:	44 0f       	add	r20, r20
    3988:	55 1f       	adc	r21, r21
    398a:	8a 95       	dec	r24
    398c:	e2 f7       	brpl	.-8      	; 0x3986 <add_key+0x44>
    398e:	ca 01       	movw	r24, r20
    3990:	91 81       	ldd	r25, Z+1	; 0x01
    3992:	89 2b       	or	r24, r25
    3994:	81 83       	std	Z+1, r24	; 0x01
    3996:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    3998:	90 91 c7 01 	lds	r25, 0x01C7
    399c:	90 ff       	sbrs	r25, 0
    399e:	23 c0       	rjmp	.+70     	; 0x39e6 <add_key+0xa4>
    39a0:	1f 92       	push	r1
    39a2:	8f 93       	push	r24
    39a4:	88 ee       	ldi	r24, 0xE8	; 232
    39a6:	95 e0       	ldi	r25, 0x05	; 5
    39a8:	9f 93       	push	r25
    39aa:	8f 93       	push	r24
    39ac:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    39b0:	0f 90       	pop	r0
    39b2:	0f 90       	pop	r0
    39b4:	0f 90       	pop	r0
    39b6:	0f 90       	pop	r0
    39b8:	08 95       	ret
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    39ba:	9f 3f       	cpi	r25, 0xFF	; 255
    39bc:	39 f0       	breq	.+14     	; 0x39cc <add_key+0x8a>
    39be:	4f 5f       	subi	r20, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    39c0:	4e 30       	cpi	r20, 0x0E	; 14
    39c2:	41 f0       	breq	.+16     	; 0x39d4 <add_key+0x92>
        if (keyboard_report->keys[i] == code) {
    39c4:	51 91       	ld	r21, Z+
    39c6:	58 13       	cpse	r21, r24
    39c8:	f8 cf       	rjmp	.-16     	; 0x39ba <add_key+0x78>
    39ca:	0d c0       	rjmp	.+26     	; 0x39e6 <add_key+0xa4>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    39cc:	51 11       	cpse	r21, r1
    39ce:	f7 cf       	rjmp	.-18     	; 0x39be <add_key+0x7c>
    39d0:	94 2f       	mov	r25, r20
    39d2:	f5 cf       	rjmp	.-22     	; 0x39be <add_key+0x7c>
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    39d4:	9f 3f       	cpi	r25, 0xFF	; 255
    39d6:	39 f0       	breq	.+14     	; 0x39e6 <add_key+0xa4>
            keyboard_report->keys[empty] = code;
    39d8:	f9 01       	movw	r30, r18
    39da:	e9 0f       	add	r30, r25
    39dc:	f1 1d       	adc	r31, r1
    39de:	97 fd       	sbrc	r25, 7
    39e0:	fa 95       	dec	r31
    39e2:	82 83       	std	Z+2, r24	; 0x02
    39e4:	08 95       	ret
    39e6:	08 95       	ret

000039e8 <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    39e8:	90 91 0b 01 	lds	r25, 0x010B
    39ec:	99 23       	and	r25, r25
    39ee:	21 f0       	breq	.+8      	; 0x39f8 <del_key+0x10>
    39f0:	90 91 0c 01 	lds	r25, 0x010C
    39f4:	91 11       	cpse	r25, r1
    39f6:	09 c0       	rjmp	.+18     	; 0x3a0a <del_key+0x22>
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    39f8:	20 91 0d 01 	lds	r18, 0x010D
    39fc:	30 91 0e 01 	lds	r19, 0x010E
    3a00:	f9 01       	movw	r30, r18
    3a02:	32 96       	adiw	r30, 0x02	; 2
    3a04:	20 5f       	subi	r18, 0xF0	; 240
    3a06:	3f 4f       	sbci	r19, 0xFF	; 255
    3a08:	30 c0       	rjmp	.+96     	; 0x3a6a <del_key+0x82>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3a0a:	98 2f       	mov	r25, r24
    3a0c:	96 95       	lsr	r25
    3a0e:	96 95       	lsr	r25
    3a10:	96 95       	lsr	r25
    3a12:	9f 30       	cpi	r25, 0x0F	; 15
    3a14:	a8 f4       	brcc	.+42     	; 0x3a40 <del_key+0x58>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    3a16:	e0 91 0d 01 	lds	r30, 0x010D
    3a1a:	f0 91 0e 01 	lds	r31, 0x010E
    3a1e:	e9 0f       	add	r30, r25
    3a20:	f1 1d       	adc	r31, r1
    3a22:	87 70       	andi	r24, 0x07	; 7
    3a24:	21 e0       	ldi	r18, 0x01	; 1
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	a9 01       	movw	r20, r18
    3a2a:	02 c0       	rjmp	.+4      	; 0x3a30 <del_key+0x48>
    3a2c:	44 0f       	add	r20, r20
    3a2e:	55 1f       	adc	r21, r21
    3a30:	8a 95       	dec	r24
    3a32:	e2 f7       	brpl	.-8      	; 0x3a2c <del_key+0x44>
    3a34:	ca 01       	movw	r24, r20
    3a36:	80 95       	com	r24
    3a38:	91 81       	ldd	r25, Z+1	; 0x01
    3a3a:	89 23       	and	r24, r25
    3a3c:	81 83       	std	Z+1, r24	; 0x01
    3a3e:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    3a40:	90 91 c7 01 	lds	r25, 0x01C7
    3a44:	90 ff       	sbrs	r25, 0
    3a46:	16 c0       	rjmp	.+44     	; 0x3a74 <del_key+0x8c>
    3a48:	1f 92       	push	r1
    3a4a:	8f 93       	push	r24
    3a4c:	8a ec       	ldi	r24, 0xCA	; 202
    3a4e:	95 e0       	ldi	r25, 0x05	; 5
    3a50:	9f 93       	push	r25
    3a52:	8f 93       	push	r24
    3a54:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    3a58:	0f 90       	pop	r0
    3a5a:	0f 90       	pop	r0
    3a5c:	0f 90       	pop	r0
    3a5e:	0f 90       	pop	r0
    3a60:	08 95       	ret
    3a62:	31 96       	adiw	r30, 0x01	; 1
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3a64:	e2 17       	cp	r30, r18
    3a66:	f3 07       	cpc	r31, r19
    3a68:	29 f0       	breq	.+10     	; 0x3a74 <del_key+0x8c>
        if (keyboard_report->keys[i] == code) {
    3a6a:	90 81       	ld	r25, Z
    3a6c:	98 13       	cpse	r25, r24
    3a6e:	f9 cf       	rjmp	.-14     	; 0x3a62 <del_key+0x7a>
            keyboard_report->keys[i] = 0;
    3a70:	10 82       	st	Z, r1
    3a72:	f7 cf       	rjmp	.-18     	; 0x3a62 <del_key+0x7a>
    3a74:	08 95       	ret

00003a76 <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    3a76:	81 e0       	ldi	r24, 0x01	; 1
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3a7a:	e0 91 0d 01 	lds	r30, 0x010D
    3a7e:	f0 91 0e 01 	lds	r31, 0x010E
    3a82:	e8 0f       	add	r30, r24
    3a84:	f9 1f       	adc	r31, r25
    3a86:	10 82       	st	Z, r1
    3a88:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3a8a:	80 31       	cpi	r24, 0x10	; 16
    3a8c:	91 05       	cpc	r25, r1
    3a8e:	a9 f7       	brne	.-22     	; 0x3a7a <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3a90:	08 95       	ret

00003a92 <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    3a92:	80 91 c6 01 	lds	r24, 0x01C6
    3a96:	08 95       	ret

00003a98 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    3a98:	90 91 c6 01 	lds	r25, 0x01C6
    3a9c:	89 2b       	or	r24, r25
    3a9e:	80 93 c6 01 	sts	0x01C6, r24
    3aa2:	08 95       	ret

00003aa4 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3aa4:	80 95       	com	r24
    3aa6:	90 91 c6 01 	lds	r25, 0x01C6
    3aaa:	89 23       	and	r24, r25
    3aac:	80 93 c6 01 	sts	0x01C6, r24
    3ab0:	08 95       	ret

00003ab2 <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    3ab2:	80 93 c6 01 	sts	0x01C6, r24
    3ab6:	08 95       	ret

00003ab8 <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    3ab8:	10 92 c6 01 	sts	0x01C6, r1
    3abc:	08 95       	ret

00003abe <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3abe:	90 91 c5 01 	lds	r25, 0x01C5
    3ac2:	89 2b       	or	r24, r25
    3ac4:	80 93 c5 01 	sts	0x01C5, r24
    3ac8:	08 95       	ret

00003aca <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3aca:	80 95       	com	r24
    3acc:	90 91 c5 01 	lds	r25, 0x01C5
    3ad0:	89 23       	and	r24, r25
    3ad2:	80 93 c5 01 	sts	0x01C5, r24
    3ad6:	08 95       	ret

00003ad8 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3ad8:	10 92 c5 01 	sts	0x01C5, r1
    3adc:	08 95       	ret

00003ade <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3ade:	80 93 b4 01 	sts	0x01B4, r24
    3ae2:	08 95       	ret

00003ae4 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3ae4:	10 92 b4 01 	sts	0x01B4, r1
    3ae8:	08 95       	ret

00003aea <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3aea:	80 91 0d 01 	lds	r24, 0x010D
    3aee:	90 91 0e 01 	lds	r25, 0x010E
    3af2:	fc 01       	movw	r30, r24
    3af4:	31 96       	adiw	r30, 0x01	; 1
    3af6:	9c 01       	movw	r18, r24
    3af8:	20 5f       	subi	r18, 0xF0	; 240
    3afa:	3f 4f       	sbci	r19, 0xFF	; 255
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3afc:	80 e0       	ldi	r24, 0x00	; 0
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3afe:	91 91       	ld	r25, Z+
    3b00:	91 11       	cpse	r25, r1
            cnt++;
    3b02:	8f 5f       	subi	r24, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3b04:	e2 17       	cp	r30, r18
    3b06:	f3 07       	cpc	r31, r19
    3b08:	d1 f7       	brne	.-12     	; 0x3afe <has_anykey+0x14>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3b0a:	08 95       	ret

00003b0c <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3b0c:	e0 91 0d 01 	lds	r30, 0x010D
    3b10:	f0 91 0e 01 	lds	r31, 0x010E
    3b14:	80 91 c6 01 	lds	r24, 0x01C6
    3b18:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3b1a:	e0 91 0d 01 	lds	r30, 0x010D
    3b1e:	f0 91 0e 01 	lds	r31, 0x010E
    3b22:	90 81       	ld	r25, Z
    3b24:	80 91 c5 01 	lds	r24, 0x01C5
    3b28:	89 2b       	or	r24, r25
    3b2a:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3b2c:	80 91 b4 01 	lds	r24, 0x01B4
    3b30:	88 23       	and	r24, r24
    3b32:	61 f0       	breq	.+24     	; 0x3b4c <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3b34:	e0 91 0d 01 	lds	r30, 0x010D
    3b38:	f0 91 0e 01 	lds	r31, 0x010E
    3b3c:	90 81       	ld	r25, Z
    3b3e:	89 2b       	or	r24, r25
    3b40:	80 83       	st	Z, r24
        if (has_anykey()) {
    3b42:	0e 94 75 1d 	call	0x3aea	; 0x3aea <has_anykey>
    3b46:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3b48:	10 92 b4 01 	sts	0x01B4, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3b4c:	80 91 0d 01 	lds	r24, 0x010D
    3b50:	90 91 0e 01 	lds	r25, 0x010E
    3b54:	0c 94 96 11 	jmp	0x232c	; 0x232c <host_keyboard_send>

00003b58 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3b58:	90 93 39 01 	sts	0x0139, r25
    3b5c:	80 93 38 01 	sts	0x0138, r24
    3b60:	08 95       	ret

00003b62 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3b62:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3b64:	98 2f       	mov	r25, r24
    3b66:	9c 7c       	andi	r25, 0xCC	; 204
    3b68:	39 2f       	mov	r19, r25
    3b6a:	36 95       	lsr	r19
    3b6c:	36 95       	lsr	r19
    3b6e:	28 2f       	mov	r18, r24
    3b70:	23 73       	andi	r18, 0x33	; 51
    3b72:	44 e0       	ldi	r20, 0x04	; 4
    3b74:	24 9f       	mul	r18, r20
    3b76:	c0 01       	movw	r24, r0
    3b78:	11 24       	eor	r1, r1
    3b7a:	93 2f       	mov	r25, r19
    3b7c:	98 2b       	or	r25, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3b7e:	29 2f       	mov	r18, r25
    3b80:	2a 7a       	andi	r18, 0xAA	; 170
    3b82:	26 95       	lsr	r18
    3b84:	89 2f       	mov	r24, r25
    3b86:	85 75       	andi	r24, 0x55	; 85
    3b88:	88 0f       	add	r24, r24
    return bits;
}
    3b8a:	82 2b       	or	r24, r18
    3b8c:	08 95       	ret

00003b8e <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3b8e:	1f 93       	push	r17
    3b90:	cf 93       	push	r28
    3b92:	df 93       	push	r29
    3b94:	1f 92       	push	r1
    3b96:	cd b7       	in	r28, 0x3d	; 61
    3b98:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3b9a:	99 83       	std	Y+1, r25	; 0x01
    3b9c:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <bitrev>
    3ba0:	18 2f       	mov	r17, r24
    3ba2:	99 81       	ldd	r25, Y+1	; 0x01
    3ba4:	89 2f       	mov	r24, r25
    3ba6:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <bitrev>
    3baa:	21 2f       	mov	r18, r17
    3bac:	30 e0       	ldi	r19, 0x00	; 0
    3bae:	32 2f       	mov	r19, r18
    3bb0:	22 27       	eor	r18, r18
    return bits;
}
    3bb2:	a9 01       	movw	r20, r18
    3bb4:	48 2b       	or	r20, r24
    3bb6:	ca 01       	movw	r24, r20
    3bb8:	0f 90       	pop	r0
    3bba:	df 91       	pop	r29
    3bbc:	cf 91       	pop	r28
    3bbe:	1f 91       	pop	r17
    3bc0:	08 95       	ret

00003bc2 <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    3bc2:	08 95       	ret

00003bc4 <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    3bc4:	cf 93       	push	r28
    3bc6:	df 93       	push	r29
    3bc8:	00 d0       	rcall	.+0      	; 0x3bca <hook_matrix_change+0x6>
    3bca:	00 d0       	rcall	.+0      	; 0x3bcc <hook_matrix_change+0x8>
    3bcc:	1f 92       	push	r1
    3bce:	cd b7       	in	r28, 0x3d	; 61
    3bd0:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    3bd2:	0f 90       	pop	r0
    3bd4:	0f 90       	pop	r0
    3bd6:	0f 90       	pop	r0
    3bd8:	0f 90       	pop	r0
    3bda:	0f 90       	pop	r0
    3bdc:	df 91       	pop	r29
    3bde:	cf 91       	pop	r28
    3be0:	08 95       	ret

00003be2 <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    3be2:	08 95       	ret

00003be4 <hook_layer_change>:
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    3be4:	08 95       	ret

00003be6 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    3be6:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <keyboard_set_leds>

00003bea <hook_bootmagic>:
}

__attribute__((weak))
void hook_bootmagic(void) {}
    3bea:	08 95       	ret

00003bec <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3bec:	80 91 dc 01 	lds	r24, 0x01DC
    3bf0:	84 30       	cpi	r24, 0x04	; 4
    3bf2:	21 f1       	breq	.+72     	; 0x3c3c <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    3bf4:	10 92 c8 01 	sts	0x01C8, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3bf8:	20 e4       	ldi	r18, 0x40	; 64
    3bfa:	88 e1       	ldi	r24, 0x18	; 24
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	0f b6       	in	r0, 0x3f	; 63
    3c00:	f8 94       	cli
    3c02:	a8 95       	wdr
    3c04:	80 93 60 00 	sts	0x0060, r24
    3c08:	0f be       	out	0x3f, r0	; 63
    3c0a:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3c0e:	83 b7       	in	r24, 0x33	; 51
    3c10:	81 7f       	andi	r24, 0xF1	; 241
    3c12:	84 60       	ori	r24, 0x04	; 4
    3c14:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3c16:	83 b7       	in	r24, 0x33	; 51
    3c18:	81 60       	ori	r24, 0x01	; 1
    3c1a:	83 bf       	out	0x33, r24	; 51
    sei();
    3c1c:	78 94       	sei
    sleep_cpu();
    3c1e:	88 95       	sleep
    sleep_disable();
    3c20:	83 b7       	in	r24, 0x33	; 51
    3c22:	8e 7f       	andi	r24, 0xFE	; 254
    3c24:	83 bf       	out	0x33, r24	; 51
    3c26:	0f b6       	in	r0, 0x3f	; 63
    3c28:	f8 94       	cli
    3c2a:	a8 95       	wdr
    3c2c:	80 91 60 00 	lds	r24, 0x0060
    3c30:	88 61       	ori	r24, 0x18	; 24
    3c32:	80 93 60 00 	sts	0x0060, r24
    3c36:	10 92 60 00 	sts	0x0060, r1
    3c3a:	0f be       	out	0x3f, r0	; 63
    3c3c:	08 95       	ret

00003c3e <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    3c3e:	08 95       	ret

00003c40 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    3c40:	08 95       	ret

00003c42 <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    3c42:	cf 93       	push	r28
    matrix_power_up();
    3c44:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <matrix_power_up>
    matrix_scan();
    3c48:	0e 94 57 08 	call	0x10ae	; 0x10ae <matrix_scan>
    matrix_power_down();
    3c4c:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3c50:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3c52:	8c 2f       	mov	r24, r28
    3c54:	0e 94 74 09 	call	0x12e8	; 0x12e8 <matrix_get_row>
    3c58:	89 2b       	or	r24, r25
    3c5a:	29 f4       	brne	.+10     	; 0x3c66 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3c5c:	cf 5f       	subi	r28, 0xFF	; 255
    3c5e:	c5 30       	cpi	r28, 0x05	; 5
    3c60:	c1 f7       	brne	.-16     	; 0x3c52 <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    3c62:	80 e0       	ldi	r24, 0x00	; 0
    3c64:	01 c0       	rjmp	.+2      	; 0x3c68 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3c68:	cf 91       	pop	r28
    3c6a:	08 95       	ret

00003c6c <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3c6c:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <clear_keyboard>

00003c70 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3c70:	1f 92       	push	r1
    3c72:	0f 92       	push	r0
    3c74:	0f b6       	in	r0, 0x3f	; 63
    3c76:	0f 92       	push	r0
    3c78:	11 24       	eor	r1, r1
    3c7a:	8f 93       	push	r24
    3c7c:	9f 93       	push	r25
    3c7e:	af 93       	push	r26
    3c80:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3c82:	80 91 c8 01 	lds	r24, 0x01C8
    3c86:	81 11       	cpse	r24, r1
    3c88:	13 c0       	rjmp	.+38     	; 0x3cb0 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3c8a:	80 91 c9 01 	lds	r24, 0x01C9
    3c8e:	90 91 ca 01 	lds	r25, 0x01CA
    3c92:	a0 91 cb 01 	lds	r26, 0x01CB
    3c96:	b0 91 cc 01 	lds	r27, 0x01CC
    3c9a:	41 96       	adiw	r24, 0x11	; 17
    3c9c:	a1 1d       	adc	r26, r1
    3c9e:	b1 1d       	adc	r27, r1
    3ca0:	80 93 c9 01 	sts	0x01C9, r24
    3ca4:	90 93 ca 01 	sts	0x01CA, r25
    3ca8:	a0 93 cb 01 	sts	0x01CB, r26
    3cac:	b0 93 cc 01 	sts	0x01CC, r27
            break;
        default:
            ;
    }
}
    3cb0:	bf 91       	pop	r27
    3cb2:	af 91       	pop	r26
    3cb4:	9f 91       	pop	r25
    3cb6:	8f 91       	pop	r24
    3cb8:	0f 90       	pop	r0
    3cba:	0f be       	out	0x3f, r0	; 63
    3cbc:	0f 90       	pop	r0
    3cbe:	1f 90       	pop	r1
    3cc0:	18 95       	reti

00003cc2 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3cc2:	82 e0       	ldi	r24, 0x02	; 2
    3cc4:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3cc6:	93 e0       	ldi	r25, 0x03	; 3
    3cc8:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3cca:	9a ef       	ldi	r25, 0xFA	; 250
    3ccc:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3cce:	80 93 6e 00 	sts	0x006E, r24
    3cd2:	08 95       	ret

00003cd4 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3cd4:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3cd6:	f8 94       	cli
    t = timer_count;
    3cd8:	80 91 c9 01 	lds	r24, 0x01C9
    3cdc:	90 91 ca 01 	lds	r25, 0x01CA
    3ce0:	a0 91 cb 01 	lds	r26, 0x01CB
    3ce4:	b0 91 cc 01 	lds	r27, 0x01CC
    SREG = sreg;
    3ce8:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    3cea:	08 95       	ret

00003cec <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3cec:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3cee:	f8 94       	cli
    t = timer_count;
    3cf0:	60 91 c9 01 	lds	r22, 0x01C9
    3cf4:	70 91 ca 01 	lds	r23, 0x01CA
    3cf8:	80 91 cb 01 	lds	r24, 0x01CB
    3cfc:	90 91 cc 01 	lds	r25, 0x01CC
    SREG = sreg;
    3d00:	2f bf       	out	0x3f, r18	; 63

    return t;
}
    3d02:	08 95       	ret

00003d04 <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    3d04:	cf 92       	push	r12
    3d06:	df 92       	push	r13
    3d08:	ef 92       	push	r14
    3d0a:	ff 92       	push	r15
    3d0c:	0f 93       	push	r16
    3d0e:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3d10:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3d12:	f8 94       	cli
    t = timer_count;
    3d14:	40 91 c9 01 	lds	r20, 0x01C9
    3d18:	50 91 ca 01 	lds	r21, 0x01CA
    3d1c:	60 91 cb 01 	lds	r22, 0x01CB
    3d20:	70 91 cc 01 	lds	r23, 0x01CC
    SREG = sreg;
    3d24:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3d26:	6a 01       	movw	r12, r20
    3d28:	7b 01       	movw	r14, r22
    3d2a:	ee 24       	eor	r14, r14
    3d2c:	ff 24       	eor	r15, r15
    3d2e:	8c 01       	movw	r16, r24
    3d30:	20 e0       	ldi	r18, 0x00	; 0
    3d32:	30 e0       	ldi	r19, 0x00	; 0
    3d34:	c0 16       	cp	r12, r16
    3d36:	d1 06       	cpc	r13, r17
    3d38:	e2 06       	cpc	r14, r18
    3d3a:	f3 06       	cpc	r15, r19
    3d3c:	10 f4       	brcc	.+4      	; 0x3d42 <timer_elapsed+0x3e>
    3d3e:	41 50       	subi	r20, 0x01	; 1
    3d40:	51 09       	sbc	r21, r1
    3d42:	9a 01       	movw	r18, r20
    3d44:	28 1b       	sub	r18, r24
    3d46:	39 0b       	sbc	r19, r25
    3d48:	c9 01       	movw	r24, r18
}
    3d4a:	1f 91       	pop	r17
    3d4c:	0f 91       	pop	r16
    3d4e:	ff 90       	pop	r15
    3d50:	ef 90       	pop	r14
    3d52:	df 90       	pop	r13
    3d54:	cf 90       	pop	r12
    3d56:	08 95       	ret

00003d58 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3d58:	1f 92       	push	r1
    3d5a:	0f 92       	push	r0
    3d5c:	0f b6       	in	r0, 0x3f	; 63
    3d5e:	0f 92       	push	r0
    3d60:	11 24       	eor	r1, r1
    3d62:	8f 93       	push	r24
    3d64:	9f 93       	push	r25
    3d66:	af 93       	push	r26
    3d68:	bf 93       	push	r27
    timer_count++;
    3d6a:	80 91 c9 01 	lds	r24, 0x01C9
    3d6e:	90 91 ca 01 	lds	r25, 0x01CA
    3d72:	a0 91 cb 01 	lds	r26, 0x01CB
    3d76:	b0 91 cc 01 	lds	r27, 0x01CC
    3d7a:	01 96       	adiw	r24, 0x01	; 1
    3d7c:	a1 1d       	adc	r26, r1
    3d7e:	b1 1d       	adc	r27, r1
    3d80:	80 93 c9 01 	sts	0x01C9, r24
    3d84:	90 93 ca 01 	sts	0x01CA, r25
    3d88:	a0 93 cb 01 	sts	0x01CB, r26
    3d8c:	b0 93 cc 01 	sts	0x01CC, r27
}
    3d90:	bf 91       	pop	r27
    3d92:	af 91       	pop	r26
    3d94:	9f 91       	pop	r25
    3d96:	8f 91       	pop	r24
    3d98:	0f 90       	pop	r0
    3d9a:	0f be       	out	0x3f, r0	; 63
    3d9c:	0f 90       	pop	r0
    3d9e:	1f 90       	pop	r1
    3da0:	18 95       	reti

00003da2 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3da2:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <USB_Disable>
    cli();
    3da6:	f8 94       	cli
    3da8:	2f ef       	ldi	r18, 0xFF	; 255
    3daa:	87 ea       	ldi	r24, 0xA7	; 167
    3dac:	91 e6       	ldi	r25, 0x61	; 97
    3dae:	21 50       	subi	r18, 0x01	; 1
    3db0:	80 40       	sbci	r24, 0x00	; 0
    3db2:	90 40       	sbci	r25, 0x00	; 0
    3db4:	e1 f7       	brne	.-8      	; 0x3dae <bootloader_jump+0xc>
    3db6:	00 c0       	rjmp	.+0      	; 0x3db8 <bootloader_jump+0x16>
    3db8:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3dba:	87 e0       	ldi	r24, 0x07	; 7
    3dbc:	90 eb       	ldi	r25, 0xB0	; 176
    3dbe:	dc 01       	movw	r26, r24
    3dc0:	80 93 e6 01 	sts	0x01E6, r24
    3dc4:	90 93 e7 01 	sts	0x01E7, r25
    3dc8:	a0 93 e8 01 	sts	0x01E8, r26
    3dcc:	b0 93 e9 01 	sts	0x01E9, r27
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    3dd0:	9c e0       	ldi	r25, 0x0C	; 12
    3dd2:	88 e1       	ldi	r24, 0x18	; 24
    3dd4:	0f b6       	in	r0, 0x3f	; 63
    3dd6:	f8 94       	cli
    3dd8:	a8 95       	wdr
    3dda:	80 93 60 00 	sts	0x0060, r24
    3dde:	0f be       	out	0x3f, r0	; 63
    3de0:	90 93 60 00 	sts	0x0060, r25
    wdt_enable(WDTO_250MS);
    for (;;);
    3de4:	ff cf       	rjmp	.-2      	; 0x3de4 <bootloader_jump+0x42>

00003de6 <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    3de6:	8d 3b       	cpi	r24, 0xBD	; 189
    3de8:	50 f4       	brcc	.+20     	; 0x3dfe <keycode_to_action+0x18>
    3dea:	88 3a       	cpi	r24, 0xA8	; 168
    3dec:	70 f5       	brcc	.+92     	; 0x3e4a <keycode_to_action+0x64>
    3dee:	85 3a       	cpi	r24, 0xA5	; 165
    3df0:	18 f5       	brcc	.+70     	; 0x3e38 <keycode_to_action+0x52>
    3df2:	84 30       	cpi	r24, 0x04	; 4
    3df4:	f8 f4       	brcc	.+62     	; 0x3e34 <keycode_to_action+0x4e>
    3df6:	81 30       	cpi	r24, 0x01	; 1
    3df8:	09 f4       	brne	.+2      	; 0x3dfc <keycode_to_action+0x16>
    3dfa:	6c c0       	rjmp	.+216    	; 0x3ed4 <keycode_to_action+0xee>
    3dfc:	68 c0       	rjmp	.+208    	; 0x3ece <keycode_to_action+0xe8>
    3dfe:	88 3e       	cpi	r24, 0xE8	; 232
    3e00:	98 f4       	brcc	.+38     	; 0x3e28 <keycode_to_action+0x42>
    3e02:	80 3e       	cpi	r24, 0xE0	; 224
    3e04:	b8 f4       	brcc	.+46     	; 0x3e34 <keycode_to_action+0x4e>
    3e06:	8f 3b       	cpi	r24, 0xBF	; 191
    3e08:	09 f0       	breq	.+2      	; 0x3e0c <keycode_to_action+0x26>
    3e0a:	61 c0       	rjmp	.+194    	; 0x3ece <keycode_to_action+0xe8>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    3e0c:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <clear_keyboard>
    3e10:	2f ef       	ldi	r18, 0xFF	; 255
    3e12:	80 e7       	ldi	r24, 0x70	; 112
    3e14:	92 e0       	ldi	r25, 0x02	; 2
    3e16:	21 50       	subi	r18, 0x01	; 1
    3e18:	80 40       	sbci	r24, 0x00	; 0
    3e1a:	90 40       	sbci	r25, 0x00	; 0
    3e1c:	e1 f7       	brne	.-8      	; 0x3e16 <keycode_to_action+0x30>
    3e1e:	00 c0       	rjmp	.+0      	; 0x3e20 <keycode_to_action+0x3a>
    3e20:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    3e22:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <bootloader_jump>
    3e26:	53 c0       	rjmp	.+166    	; 0x3ece <keycode_to_action+0xe8>

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    3e28:	80 3f       	cpi	r24, 0xF0	; 240
    3e2a:	08 f4       	brcc	.+2      	; 0x3e2e <keycode_to_action+0x48>
    3e2c:	50 c0       	rjmp	.+160    	; 0x3ece <keycode_to_action+0xe8>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	90 65       	ori	r25, 0x50	; 80
            break;
    3e32:	08 95       	ret
{
    action_t action = {};
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    3e34:	90 e0       	ldi	r25, 0x00	; 0
            break;
    3e36:	08 95       	ret
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3e38:	85 3a       	cpi	r24, 0xA5	; 165
    3e3a:	09 f4       	brne	.+2      	; 0x3e3e <keycode_to_action+0x58>
    3e3c:	4e c0       	rjmp	.+156    	; 0x3eda <keycode_to_action+0xf4>
    3e3e:	86 3a       	cpi	r24, 0xA6	; 166
    3e40:	09 f4       	brne	.+2      	; 0x3e44 <keycode_to_action+0x5e>
    3e42:	4e c0       	rjmp	.+156    	; 0x3ee0 <keycode_to_action+0xfa>
    3e44:	83 e8       	ldi	r24, 0x83	; 131
    3e46:	90 e4       	ldi	r25, 0x40	; 64
    3e48:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3e4a:	88 3a       	cpi	r24, 0xA8	; 168
    3e4c:	09 f4       	brne	.+2      	; 0x3e50 <keycode_to_action+0x6a>
    3e4e:	4b c0       	rjmp	.+150    	; 0x3ee6 <keycode_to_action+0x100>
    3e50:	89 3a       	cpi	r24, 0xA9	; 169
    3e52:	09 f4       	brne	.+2      	; 0x3e56 <keycode_to_action+0x70>
    3e54:	4b c0       	rjmp	.+150    	; 0x3eec <keycode_to_action+0x106>
    3e56:	8a 3a       	cpi	r24, 0xAA	; 170
    3e58:	09 f4       	brne	.+2      	; 0x3e5c <keycode_to_action+0x76>
    3e5a:	4b c0       	rjmp	.+150    	; 0x3ef2 <keycode_to_action+0x10c>
    3e5c:	8b 3a       	cpi	r24, 0xAB	; 171
    3e5e:	09 f4       	brne	.+2      	; 0x3e62 <keycode_to_action+0x7c>
    3e60:	4b c0       	rjmp	.+150    	; 0x3ef8 <keycode_to_action+0x112>
    3e62:	8c 3a       	cpi	r24, 0xAC	; 172
    3e64:	09 f4       	brne	.+2      	; 0x3e68 <keycode_to_action+0x82>
    3e66:	4b c0       	rjmp	.+150    	; 0x3efe <keycode_to_action+0x118>
    3e68:	8d 3a       	cpi	r24, 0xAD	; 173
    3e6a:	09 f4       	brne	.+2      	; 0x3e6e <keycode_to_action+0x88>
    3e6c:	4b c0       	rjmp	.+150    	; 0x3f04 <keycode_to_action+0x11e>
    3e6e:	8e 3a       	cpi	r24, 0xAE	; 174
    3e70:	09 f4       	brne	.+2      	; 0x3e74 <keycode_to_action+0x8e>
    3e72:	4b c0       	rjmp	.+150    	; 0x3f0a <keycode_to_action+0x124>
    3e74:	8f 3a       	cpi	r24, 0xAF	; 175
    3e76:	09 f4       	brne	.+2      	; 0x3e7a <keycode_to_action+0x94>
    3e78:	4b c0       	rjmp	.+150    	; 0x3f10 <keycode_to_action+0x12a>
    3e7a:	81 3b       	cpi	r24, 0xB1	; 177
    3e7c:	09 f4       	brne	.+2      	; 0x3e80 <keycode_to_action+0x9a>
    3e7e:	4b c0       	rjmp	.+150    	; 0x3f16 <keycode_to_action+0x130>
    3e80:	80 3b       	cpi	r24, 0xB0	; 176
    3e82:	09 f4       	brne	.+2      	; 0x3e86 <keycode_to_action+0xa0>
    3e84:	4b c0       	rjmp	.+150    	; 0x3f1c <keycode_to_action+0x136>
    3e86:	82 3b       	cpi	r24, 0xB2	; 178
    3e88:	09 f4       	brne	.+2      	; 0x3e8c <keycode_to_action+0xa6>
    3e8a:	4b c0       	rjmp	.+150    	; 0x3f22 <keycode_to_action+0x13c>
    3e8c:	83 3b       	cpi	r24, 0xB3	; 179
    3e8e:	09 f4       	brne	.+2      	; 0x3e92 <keycode_to_action+0xac>
    3e90:	4b c0       	rjmp	.+150    	; 0x3f28 <keycode_to_action+0x142>
    3e92:	84 3b       	cpi	r24, 0xB4	; 180
    3e94:	09 f4       	brne	.+2      	; 0x3e98 <keycode_to_action+0xb2>
    3e96:	4b c0       	rjmp	.+150    	; 0x3f2e <keycode_to_action+0x148>
    3e98:	85 3b       	cpi	r24, 0xB5	; 181
    3e9a:	09 f4       	brne	.+2      	; 0x3e9e <keycode_to_action+0xb8>
    3e9c:	4b c0       	rjmp	.+150    	; 0x3f34 <keycode_to_action+0x14e>
    3e9e:	86 3b       	cpi	r24, 0xB6	; 182
    3ea0:	09 f4       	brne	.+2      	; 0x3ea4 <keycode_to_action+0xbe>
    3ea2:	4b c0       	rjmp	.+150    	; 0x3f3a <keycode_to_action+0x154>
    3ea4:	87 3b       	cpi	r24, 0xB7	; 183
    3ea6:	09 f4       	brne	.+2      	; 0x3eaa <keycode_to_action+0xc4>
    3ea8:	4b c0       	rjmp	.+150    	; 0x3f40 <keycode_to_action+0x15a>
    3eaa:	88 3b       	cpi	r24, 0xB8	; 184
    3eac:	09 f4       	brne	.+2      	; 0x3eb0 <keycode_to_action+0xca>
    3eae:	4b c0       	rjmp	.+150    	; 0x3f46 <keycode_to_action+0x160>
    3eb0:	89 3b       	cpi	r24, 0xB9	; 185
    3eb2:	09 f4       	brne	.+2      	; 0x3eb6 <keycode_to_action+0xd0>
    3eb4:	4b c0       	rjmp	.+150    	; 0x3f4c <keycode_to_action+0x166>
    3eb6:	8a 3b       	cpi	r24, 0xBA	; 186
    3eb8:	09 f4       	brne	.+2      	; 0x3ebc <keycode_to_action+0xd6>
    3eba:	4b c0       	rjmp	.+150    	; 0x3f52 <keycode_to_action+0x16c>
    3ebc:	8b 3b       	cpi	r24, 0xBB	; 187
    3ebe:	09 f4       	brne	.+2      	; 0x3ec2 <keycode_to_action+0xdc>
    3ec0:	4b c0       	rjmp	.+150    	; 0x3f58 <keycode_to_action+0x172>
    3ec2:	8c 3b       	cpi	r24, 0xBC	; 188
    3ec4:	09 f4       	brne	.+2      	; 0x3ec8 <keycode_to_action+0xe2>
    3ec6:	4b c0       	rjmp	.+150    	; 0x3f5e <keycode_to_action+0x178>
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	94 e4       	ldi	r25, 0x44	; 68
    3ecc:	08 95       	ret


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    3ece:	80 e0       	ldi	r24, 0x00	; 0
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
    3ed2:	08 95       	ret
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3eda:	81 e8       	ldi	r24, 0x81	; 129
    3edc:	90 e4       	ldi	r25, 0x40	; 64
    3ede:	08 95       	ret
    3ee0:	82 e8       	ldi	r24, 0x82	; 130
    3ee2:	90 e4       	ldi	r25, 0x40	; 64
    3ee4:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3ee6:	82 ee       	ldi	r24, 0xE2	; 226
    3ee8:	94 e4       	ldi	r25, 0x44	; 68
    3eea:	08 95       	ret
    3eec:	89 ee       	ldi	r24, 0xE9	; 233
    3eee:	94 e4       	ldi	r25, 0x44	; 68
    3ef0:	08 95       	ret
    3ef2:	8a ee       	ldi	r24, 0xEA	; 234
    3ef4:	94 e4       	ldi	r25, 0x44	; 68
    3ef6:	08 95       	ret
    3ef8:	85 eb       	ldi	r24, 0xB5	; 181
    3efa:	94 e4       	ldi	r25, 0x44	; 68
    3efc:	08 95       	ret
    3efe:	86 eb       	ldi	r24, 0xB6	; 182
    3f00:	94 e4       	ldi	r25, 0x44	; 68
    3f02:	08 95       	ret
    3f04:	83 eb       	ldi	r24, 0xB3	; 179
    3f06:	94 e4       	ldi	r25, 0x44	; 68
    3f08:	08 95       	ret
    3f0a:	84 eb       	ldi	r24, 0xB4	; 180
    3f0c:	94 e4       	ldi	r25, 0x44	; 68
    3f0e:	08 95       	ret
    3f10:	87 eb       	ldi	r24, 0xB7	; 183
    3f12:	94 e4       	ldi	r25, 0x44	; 68
    3f14:	08 95       	ret
    3f16:	8c ec       	ldi	r24, 0xCC	; 204
    3f18:	94 e4       	ldi	r25, 0x44	; 68
    3f1a:	08 95       	ret
    3f1c:	8d ec       	ldi	r24, 0xCD	; 205
    3f1e:	94 e4       	ldi	r25, 0x44	; 68
    3f20:	08 95       	ret
    3f22:	83 e8       	ldi	r24, 0x83	; 131
    3f24:	95 e4       	ldi	r25, 0x45	; 69
    3f26:	08 95       	ret
    3f28:	8a e8       	ldi	r24, 0x8A	; 138
    3f2a:	95 e4       	ldi	r25, 0x45	; 69
    3f2c:	08 95       	ret
    3f2e:	82 e9       	ldi	r24, 0x92	; 146
    3f30:	95 e4       	ldi	r25, 0x45	; 69
    3f32:	08 95       	ret
    3f34:	84 e9       	ldi	r24, 0x94	; 148
    3f36:	95 e4       	ldi	r25, 0x45	; 69
    3f38:	08 95       	ret
    3f3a:	81 e2       	ldi	r24, 0x21	; 33
    3f3c:	96 e4       	ldi	r25, 0x46	; 70
    3f3e:	08 95       	ret
    3f40:	83 e2       	ldi	r24, 0x23	; 35
    3f42:	96 e4       	ldi	r25, 0x46	; 70
    3f44:	08 95       	ret
    3f46:	84 e2       	ldi	r24, 0x24	; 36
    3f48:	96 e4       	ldi	r25, 0x46	; 70
    3f4a:	08 95       	ret
    3f4c:	85 e2       	ldi	r24, 0x25	; 37
    3f4e:	96 e4       	ldi	r25, 0x46	; 70
    3f50:	08 95       	ret
    3f52:	86 e2       	ldi	r24, 0x26	; 38
    3f54:	96 e4       	ldi	r25, 0x46	; 70
    3f56:	08 95       	ret
    3f58:	87 e2       	ldi	r24, 0x27	; 39
    3f5a:	96 e4       	ldi	r25, 0x46	; 70
    3f5c:	08 95       	ret
    3f5e:	8a e2       	ldi	r24, 0x2A	; 42
    3f60:	96 e4       	ldi	r25, 0x46	; 70
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    3f62:	08 95       	ret

00003f64 <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3f64:	0e 94 18 08 	call	0x1030	; 0x1030 <keymap_key_to_keycode>
    switch (keycode) {
    3f68:	80 3e       	cpi	r24, 0xE0	; 224
    3f6a:	a8 f4       	brcc	.+42     	; 0x3f96 <action_for_key+0x32>
    3f6c:	80 3c       	cpi	r24, 0xC0	; 192
    3f6e:	00 f5       	brcc	.+64     	; 0x3fb0 <action_for_key+0x4c>
    3f70:	81 33       	cpi	r24, 0x31	; 49
    3f72:	09 f4       	brne	.+2      	; 0x3f76 <action_for_key+0x12>
    3f74:	5c c0       	rjmp	.+184    	; 0x402e <action_for_key+0xca>
    3f76:	38 f4       	brcc	.+14     	; 0x3f86 <action_for_key+0x22>
    3f78:	89 32       	cpi	r24, 0x29	; 41
    3f7a:	09 f4       	brne	.+2      	; 0x3f7e <action_for_key+0x1a>
    3f7c:	52 c0       	rjmp	.+164    	; 0x4022 <action_for_key+0xbe>
    3f7e:	8a 32       	cpi	r24, 0x2A	; 42
    3f80:	09 f4       	brne	.+2      	; 0x3f84 <action_for_key+0x20>
    3f82:	5b c0       	rjmp	.+182    	; 0x403a <action_for_key+0xd6>
    3f84:	5f c0       	rjmp	.+190    	; 0x4044 <action_for_key+0xe0>
    3f86:	89 33       	cpi	r24, 0x39	; 57
    3f88:	b1 f0       	breq	.+44     	; 0x3fb6 <action_for_key+0x52>
    3f8a:	82 38       	cpi	r24, 0x82	; 130
    3f8c:	a1 f0       	breq	.+40     	; 0x3fb6 <action_for_key+0x52>
    3f8e:	85 33       	cpi	r24, 0x35	; 53
    3f90:	09 f4       	brne	.+2      	; 0x3f94 <action_for_key+0x30>
    3f92:	41 c0       	rjmp	.+130    	; 0x4016 <action_for_key+0xb2>
    3f94:	57 c0       	rjmp	.+174    	; 0x4044 <action_for_key+0xe0>
    3f96:	83 3e       	cpi	r24, 0xE3	; 227
    3f98:	41 f1       	breq	.+80     	; 0x3fea <action_for_key+0x86>
    3f9a:	28 f4       	brcc	.+10     	; 0x3fa6 <action_for_key+0x42>
    3f9c:	80 3e       	cpi	r24, 0xE0	; 224
    3f9e:	99 f0       	breq	.+38     	; 0x3fc6 <action_for_key+0x62>
    3fa0:	82 3e       	cpi	r24, 0xE2	; 226
    3fa2:	b9 f0       	breq	.+46     	; 0x3fd2 <action_for_key+0x6e>
    3fa4:	4f c0       	rjmp	.+158    	; 0x4044 <action_for_key+0xe0>
    3fa6:	86 3e       	cpi	r24, 0xE6	; 230
    3fa8:	31 f1       	breq	.+76     	; 0x3ff6 <action_for_key+0x92>
    3faa:	87 3e       	cpi	r24, 0xE7	; 231
    3fac:	71 f1       	breq	.+92     	; 0x400a <action_for_key+0xa6>
    3fae:	4a c0       	rjmp	.+148    	; 0x4044 <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3fb0:	0e 94 27 08 	call	0x104e	; 0x104e <keymap_fn_to_action>
    3fb4:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3fb6:	90 91 e5 01 	lds	r25, 0x01E5
    3fba:	90 fd       	sbrc	r25, 0
    3fbc:	02 c0       	rjmp	.+4      	; 0x3fc2 <action_for_key+0x5e>
    3fbe:	91 ff       	sbrs	r25, 1
    3fc0:	41 c0       	rjmp	.+130    	; 0x4044 <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3fc2:	80 ee       	ldi	r24, 0xE0	; 224
    3fc4:	3f c0       	rjmp	.+126    	; 0x4044 <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3fc6:	80 91 e5 01 	lds	r24, 0x01E5
    3fca:	80 ff       	sbrs	r24, 0
    3fcc:	fa cf       	rjmp	.-12     	; 0x3fc2 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3fce:	89 e3       	ldi	r24, 0x39	; 57
    3fd0:	39 c0       	rjmp	.+114    	; 0x4044 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3fd2:	80 91 e5 01 	lds	r24, 0x01E5
    3fd6:	82 ff       	sbrs	r24, 2
    3fd8:	0c c0       	rjmp	.+24     	; 0x3ff2 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3fda:	80 91 e5 01 	lds	r24, 0x01E5
    3fde:	84 ff       	sbrs	r24, 4
    3fe0:	02 c0       	rjmp	.+4      	; 0x3fe6 <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
    3fe2:	80 e0       	ldi	r24, 0x00	; 0
    3fe4:	2f c0       	rjmp	.+94     	; 0x4044 <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3fe6:	83 ee       	ldi	r24, 0xE3	; 227
    3fe8:	2d c0       	rjmp	.+90     	; 0x4044 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3fea:	80 91 e5 01 	lds	r24, 0x01E5
    3fee:	82 ff       	sbrs	r24, 2
    3ff0:	f4 cf       	rjmp	.-24     	; 0x3fda <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3ff2:	82 ee       	ldi	r24, 0xE2	; 226
    3ff4:	27 c0       	rjmp	.+78     	; 0x4044 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3ff6:	80 91 e5 01 	lds	r24, 0x01E5
    3ffa:	83 ff       	sbrs	r24, 3
    3ffc:	0a c0       	rjmp	.+20     	; 0x4012 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3ffe:	80 91 e5 01 	lds	r24, 0x01E5
    4002:	84 fd       	sbrc	r24, 4
    4004:	ee cf       	rjmp	.-36     	; 0x3fe2 <action_for_key+0x7e>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    4006:	87 ee       	ldi	r24, 0xE7	; 231
    4008:	1d c0       	rjmp	.+58     	; 0x4044 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    400a:	80 91 e5 01 	lds	r24, 0x01E5
    400e:	83 ff       	sbrs	r24, 3
    4010:	f6 cf       	rjmp	.-20     	; 0x3ffe <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    4012:	86 ee       	ldi	r24, 0xE6	; 230
    4014:	17 c0       	rjmp	.+46     	; 0x4044 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    4016:	80 91 e5 01 	lds	r24, 0x01E5
    401a:	85 ff       	sbrs	r24, 5
    401c:	06 c0       	rjmp	.+12     	; 0x402a <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    401e:	89 e2       	ldi	r24, 0x29	; 41
    4020:	11 c0       	rjmp	.+34     	; 0x4044 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    4022:	80 91 e5 01 	lds	r24, 0x01E5
    4026:	85 ff       	sbrs	r24, 5
    4028:	fa cf       	rjmp	.-12     	; 0x401e <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    402a:	85 e3       	ldi	r24, 0x35	; 53
    402c:	0b c0       	rjmp	.+22     	; 0x4044 <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    402e:	80 91 e5 01 	lds	r24, 0x01E5
    4032:	86 ff       	sbrs	r24, 6
    4034:	06 c0       	rjmp	.+12     	; 0x4042 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    4036:	8a e2       	ldi	r24, 0x2A	; 42
    4038:	05 c0       	rjmp	.+10     	; 0x4044 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    403a:	80 91 e5 01 	lds	r24, 0x01E5
    403e:	86 ff       	sbrs	r24, 6
    4040:	fa cf       	rjmp	.-12     	; 0x4036 <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    4042:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    4044:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <keycode_to_action>
    }
}
    4048:	08 95       	ret

0000404a <action_function>:
}

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    404a:	08 95       	ret

0000404c <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    404c:	af 92       	push	r10
    404e:	bf 92       	push	r11
    4050:	cf 92       	push	r12
    4052:	df 92       	push	r13
    4054:	ef 92       	push	r14
    4056:	ff 92       	push	r15
    4058:	0f 93       	push	r16
    405a:	1f 93       	push	r17
    405c:	cf 93       	push	r28
    405e:	7c 01       	movw	r14, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4060:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    4062:	cc 24       	eor	r12, r12
    4064:	c3 94       	inc	r12
    4066:	d1 2c       	mov	r13, r1
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    4068:	8c 2f       	mov	r24, r28
    406a:	0e 94 74 09 	call	0x12e8	; 0x12e8 <matrix_get_row>
    406e:	5c 01       	movw	r10, r24
    4070:	00 e0       	ldi	r16, 0x00	; 0
    4072:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    4074:	c6 01       	movw	r24, r12
    4076:	00 2e       	mov	r0, r16
    4078:	02 c0       	rjmp	.+4      	; 0x407e <scan_key+0x32>
    407a:	88 0f       	add	r24, r24
    407c:	99 1f       	adc	r25, r25
    407e:	0a 94       	dec	r0
    4080:	e2 f7       	brpl	.-8      	; 0x407a <scan_key+0x2e>
    4082:	8a 21       	and	r24, r10
    4084:	9b 21       	and	r25, r11
    4086:	89 2b       	or	r24, r25
    4088:	b1 f0       	breq	.+44     	; 0x40b6 <scan_key+0x6a>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    408a:	60 2f       	mov	r22, r16
    408c:	7c 2f       	mov	r23, r28
    408e:	80 e0       	ldi	r24, 0x00	; 0
    4090:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <action_for_key>
    4094:	9c 01       	movw	r18, r24
                if (action.code == code ||
    4096:	8e 15       	cp	r24, r14
    4098:	9f 05       	cpc	r25, r15
    409a:	59 f0       	breq	.+22     	; 0x40b2 <scan_key+0x66>
    409c:	83 2f       	mov	r24, r19
    409e:	80 7e       	andi	r24, 0xE0	; 224
    40a0:	93 2f       	mov	r25, r19
    40a2:	90 7c       	andi	r25, 0xC0	; 192
    40a4:	11 f0       	breq	.+4      	; 0x40aa <scan_key+0x5e>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    40a6:	80 3a       	cpi	r24, 0xA0	; 160
    40a8:	31 f4       	brne	.+12     	; 0x40b6 <scan_key+0x6a>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
                     action.key.code == code)) {
    40aa:	30 e0       	ldi	r19, 0x00	; 0
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    40ac:	2e 15       	cp	r18, r14
    40ae:	3f 05       	cpc	r19, r15
    40b0:	11 f4       	brne	.+4      	; 0x40b6 <scan_key+0x6a>
                     action.key.code == code)) {
                    return true;
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	09 c0       	rjmp	.+18     	; 0x40c8 <scan_key+0x7c>
    40b6:	0f 5f       	subi	r16, 0xFF	; 255
    40b8:	1f 4f       	sbci	r17, 0xFF	; 255

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    40ba:	0e 30       	cpi	r16, 0x0E	; 14
    40bc:	11 05       	cpc	r17, r1
    40be:	d1 f6       	brne	.-76     	; 0x4074 <scan_key+0x28>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    40c0:	cf 5f       	subi	r28, 0xFF	; 255
    40c2:	c5 30       	cpi	r28, 0x05	; 5
    40c4:	89 f6       	brne	.-94     	; 0x4068 <scan_key+0x1c>
                    return true;
                }
            }
        }
    }
    return false;
    40c6:	80 e0       	ldi	r24, 0x00	; 0
}
    40c8:	cf 91       	pop	r28
    40ca:	1f 91       	pop	r17
    40cc:	0f 91       	pop	r16
    40ce:	ff 90       	pop	r15
    40d0:	ef 90       	pop	r14
    40d2:	df 90       	pop	r13
    40d4:	cf 90       	pop	r12
    40d6:	bf 90       	pop	r11
    40d8:	af 90       	pop	r10
    40da:	08 95       	ret

000040dc <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    40dc:	cf 93       	push	r28
    40de:	df 93       	push	r29
    40e0:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    40e2:	8c e2       	ldi	r24, 0x2C	; 44
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	0e 94 26 20 	call	0x404c	; 0x404c <scan_key>
    40ea:	88 23       	and	r24, r24
    40ec:	29 f0       	breq	.+10     	; 0x40f8 <bootmagic_scan_key+0x1c>

    return scan_key(code);
    40ee:	ce 01       	movw	r24, r28
}
    40f0:	df 91       	pop	r29
    40f2:	cf 91       	pop	r28

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;

    return scan_key(code);
    40f4:	0c 94 26 20 	jmp	0x404c	; 0x404c <scan_key>
}
    40f8:	80 e0       	ldi	r24, 0x00	; 0
    40fa:	df 91       	pop	r29
    40fc:	cf 91       	pop	r28
    40fe:	08 95       	ret

00004100 <bootmagic>:
#include "hook.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    4100:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    4102:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <eeconfig_is_enabled>
    4106:	81 11       	cpse	r24, r1
    4108:	02 c0       	rjmp	.+4      	; 0x410e <bootmagic+0xe>
        eeconfig_init();
    410a:	0e 94 ce 21 	call	0x439c	; 0x439c <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    410e:	8d e0       	ldi	r24, 0x0D	; 13
    4110:	96 e0       	ldi	r25, 0x06	; 6
    4112:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    4116:	c5 e6       	ldi	r28, 0x65	; 101
    4118:	c1 50       	subi	r28, 0x01	; 1
    411a:	49 f0       	breq	.+18     	; 0x412e <bootmagic+0x2e>
    411c:	0e 94 57 08 	call	0x10ae	; 0x10ae <matrix_scan>
    4120:	8f e3       	ldi	r24, 0x3F	; 63
    4122:	9c e9       	ldi	r25, 0x9C	; 156
    4124:	01 97       	sbiw	r24, 0x01	; 1
    4126:	f1 f7       	brne	.-4      	; 0x4124 <bootmagic+0x24>
    4128:	00 c0       	rjmp	.+0      	; 0x412a <bootmagic+0x2a>
    412a:	00 00       	nop
    412c:	f5 cf       	rjmp	.-22     	; 0x4118 <bootmagic+0x18>
    print("done.\n");
    412e:	86 e0       	ldi	r24, 0x06	; 6
    4130:	96 e0       	ldi	r25, 0x06	; 6
    4132:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    4136:	89 e2       	ldi	r24, 0x29	; 41
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    413e:	81 11       	cpse	r24, r1
    4140:	2b c1       	rjmp	.+598    	; 0x4398 <bootmagic+0x298>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    4142:	8a e2       	ldi	r24, 0x2A	; 42
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    414a:	81 11       	cpse	r24, r1
        eeconfig_init();
    414c:	0e 94 ce 21 	call	0x439c	; 0x439c <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    4150:	85 e0       	ldi	r24, 0x05	; 5
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    4158:	81 11       	cpse	r24, r1
        bootloader_jump();
    415a:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <bootloader_jump>
    }

    /* user-defined checks */
    hook_bootmagic();
    415e:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <hook_bootmagic>

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    4162:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <eeconfig_read_debug>
    4166:	80 93 c7 01 	sts	0x01C7, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    416a:	87 e0       	ldi	r24, 0x07	; 7
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    4172:	88 23       	and	r24, r24
    4174:	c1 f1       	breq	.+112    	; 0x41e6 <bootmagic+0xe6>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    4176:	8b e1       	ldi	r24, 0x1B	; 27
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    417e:	88 23       	and	r24, r24
    4180:	51 f0       	breq	.+20     	; 0x4196 <bootmagic+0x96>
            debug_config.matrix = !debug_config.matrix;
    4182:	80 91 c7 01 	lds	r24, 0x01C7
    4186:	81 fb       	bst	r24, 1
    4188:	22 27       	eor	r18, r18
    418a:	20 f9       	bld	r18, 0
    418c:	91 e0       	ldi	r25, 0x01	; 1
    418e:	92 27       	eor	r25, r18
    4190:	90 fb       	bst	r25, 0
    4192:	81 f9       	bld	r24, 1
    4194:	0f c0       	rjmp	.+30     	; 0x41b4 <bootmagic+0xb4>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    4196:	8e e0       	ldi	r24, 0x0E	; 14
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    419e:	88 23       	and	r24, r24
    41a0:	61 f0       	breq	.+24     	; 0x41ba <bootmagic+0xba>
            debug_config.keyboard = !debug_config.keyboard;
    41a2:	80 91 c7 01 	lds	r24, 0x01C7
    41a6:	82 fb       	bst	r24, 2
    41a8:	22 27       	eor	r18, r18
    41aa:	20 f9       	bld	r18, 0
    41ac:	91 e0       	ldi	r25, 0x01	; 1
    41ae:	92 27       	eor	r25, r18
    41b0:	90 fb       	bst	r25, 0
    41b2:	82 f9       	bld	r24, 2
    41b4:	80 93 c7 01 	sts	0x01C7, r24
    41b8:	16 c0       	rjmp	.+44     	; 0x41e6 <bootmagic+0xe6>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    41ba:	80 e1       	ldi	r24, 0x10	; 16
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    41c2:	90 91 c7 01 	lds	r25, 0x01C7
    41c6:	88 23       	and	r24, r24
    41c8:	41 f0       	breq	.+16     	; 0x41da <bootmagic+0xda>
            debug_config.mouse = !debug_config.mouse;
    41ca:	93 fb       	bst	r25, 3
    41cc:	22 27       	eor	r18, r18
    41ce:	20 f9       	bld	r18, 0
    41d0:	81 e0       	ldi	r24, 0x01	; 1
    41d2:	82 27       	eor	r24, r18
    41d4:	80 fb       	bst	r24, 0
    41d6:	93 f9       	bld	r25, 3
    41d8:	04 c0       	rjmp	.+8      	; 0x41e2 <bootmagic+0xe2>
        } else {
            debug_config.enable = !debug_config.enable;
    41da:	89 2f       	mov	r24, r25
    41dc:	80 95       	com	r24
    41de:	80 fb       	bst	r24, 0
    41e0:	90 f9       	bld	r25, 0
    41e2:	90 93 c7 01 	sts	0x01C7, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    41e6:	80 91 c7 01 	lds	r24, 0x01C7
    41ea:	0e 94 f7 21 	call	0x43ee	; 0x43ee <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    41ee:	0e 94 05 22 	call	0x440a	; 0x440a <eeconfig_read_keymap>
    41f2:	80 93 e5 01 	sts	0x01E5, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    41f6:	80 ee       	ldi	r24, 0xE0	; 224
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    41fe:	88 23       	and	r24, r24
    4200:	41 f0       	breq	.+16     	; 0x4212 <bootmagic+0x112>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    4202:	80 91 e5 01 	lds	r24, 0x01E5
    4206:	98 2f       	mov	r25, r24
    4208:	90 95       	com	r25
    420a:	90 fb       	bst	r25, 0
    420c:	80 f9       	bld	r24, 0
    420e:	80 93 e5 01 	sts	0x01E5, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    4212:	89 e3       	ldi	r24, 0x39	; 57
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    421a:	88 23       	and	r24, r24
    421c:	59 f0       	breq	.+22     	; 0x4234 <bootmagic+0x134>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    421e:	80 91 e5 01 	lds	r24, 0x01E5
    4222:	81 fb       	bst	r24, 1
    4224:	22 27       	eor	r18, r18
    4226:	20 f9       	bld	r18, 0
    4228:	91 e0       	ldi	r25, 0x01	; 1
    422a:	92 27       	eor	r25, r18
    422c:	90 fb       	bst	r25, 0
    422e:	81 f9       	bld	r24, 1
    4230:	80 93 e5 01 	sts	0x01E5, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    4234:	82 ee       	ldi	r24, 0xE2	; 226
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    423c:	88 23       	and	r24, r24
    423e:	59 f0       	breq	.+22     	; 0x4256 <bootmagic+0x156>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    4240:	80 91 e5 01 	lds	r24, 0x01E5
    4244:	82 fb       	bst	r24, 2
    4246:	22 27       	eor	r18, r18
    4248:	20 f9       	bld	r18, 0
    424a:	91 e0       	ldi	r25, 0x01	; 1
    424c:	92 27       	eor	r25, r18
    424e:	90 fb       	bst	r25, 0
    4250:	82 f9       	bld	r24, 2
    4252:	80 93 e5 01 	sts	0x01E5, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    4256:	86 ee       	ldi	r24, 0xE6	; 230
    4258:	90 e0       	ldi	r25, 0x00	; 0
    425a:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    425e:	88 23       	and	r24, r24
    4260:	59 f0       	breq	.+22     	; 0x4278 <bootmagic+0x178>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    4262:	80 91 e5 01 	lds	r24, 0x01E5
    4266:	83 fb       	bst	r24, 3
    4268:	22 27       	eor	r18, r18
    426a:	20 f9       	bld	r18, 0
    426c:	91 e0       	ldi	r25, 0x01	; 1
    426e:	92 27       	eor	r25, r18
    4270:	90 fb       	bst	r25, 0
    4272:	83 f9       	bld	r24, 3
    4274:	80 93 e5 01 	sts	0x01E5, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    4278:	83 ee       	ldi	r24, 0xE3	; 227
    427a:	90 e0       	ldi	r25, 0x00	; 0
    427c:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    4280:	88 23       	and	r24, r24
    4282:	59 f0       	breq	.+22     	; 0x429a <bootmagic+0x19a>
        keymap_config.no_gui = !keymap_config.no_gui;
    4284:	80 91 e5 01 	lds	r24, 0x01E5
    4288:	84 fb       	bst	r24, 4
    428a:	22 27       	eor	r18, r18
    428c:	20 f9       	bld	r18, 0
    428e:	91 e0       	ldi	r25, 0x01	; 1
    4290:	92 27       	eor	r25, r18
    4292:	90 fb       	bst	r25, 0
    4294:	84 f9       	bld	r24, 4
    4296:	80 93 e5 01 	sts	0x01E5, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    429a:	85 e3       	ldi	r24, 0x35	; 53
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    42a2:	88 23       	and	r24, r24
    42a4:	59 f0       	breq	.+22     	; 0x42bc <bootmagic+0x1bc>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    42a6:	80 91 e5 01 	lds	r24, 0x01E5
    42aa:	85 fb       	bst	r24, 5
    42ac:	22 27       	eor	r18, r18
    42ae:	20 f9       	bld	r18, 0
    42b0:	91 e0       	ldi	r25, 0x01	; 1
    42b2:	92 27       	eor	r25, r18
    42b4:	90 fb       	bst	r25, 0
    42b6:	85 f9       	bld	r24, 5
    42b8:	80 93 e5 01 	sts	0x01E5, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    42bc:	81 e3       	ldi	r24, 0x31	; 49
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    42c4:	88 23       	and	r24, r24
    42c6:	59 f0       	breq	.+22     	; 0x42de <bootmagic+0x1de>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    42c8:	80 91 e5 01 	lds	r24, 0x01E5
    42cc:	86 fb       	bst	r24, 6
    42ce:	22 27       	eor	r18, r18
    42d0:	20 f9       	bld	r18, 0
    42d2:	91 e0       	ldi	r25, 0x01	; 1
    42d4:	92 27       	eor	r25, r18
    42d6:	90 fb       	bst	r25, 0
    42d8:	86 f9       	bld	r24, 6
    42da:	80 93 e5 01 	sts	0x01E5, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    42de:	81 e1       	ldi	r24, 0x11	; 17
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    42e6:	88 23       	and	r24, r24
    42e8:	59 f0       	breq	.+22     	; 0x4300 <bootmagic+0x200>
        keymap_config.nkro = !keymap_config.nkro;
    42ea:	80 91 e5 01 	lds	r24, 0x01E5
    42ee:	87 fb       	bst	r24, 7
    42f0:	22 27       	eor	r18, r18
    42f2:	20 f9       	bld	r18, 0
    42f4:	91 e0       	ldi	r25, 0x01	; 1
    42f6:	92 27       	eor	r25, r18
    42f8:	90 fb       	bst	r25, 0
    42fa:	87 f9       	bld	r24, 7
    42fc:	80 93 e5 01 	sts	0x01E5, r24
    }
    eeconfig_write_keymap(keymap_config.raw);
    4300:	80 91 e5 01 	lds	r24, 0x01E5
    4304:	0e 94 09 22 	call	0x4412	; 0x4412 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    4308:	80 91 e5 01 	lds	r24, 0x01E5
    430c:	87 fb       	bst	r24, 7
    430e:	88 27       	eor	r24, r24
    4310:	80 f9       	bld	r24, 0
    4312:	80 93 0c 01 	sts	0x010C, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    4316:	87 e2       	ldi	r24, 0x27	; 39
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    431e:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    4320:	8e e1       	ldi	r24, 0x1E	; 30
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    4328:	81 11       	cpse	r24, r1
    432a:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    432c:	8f e1       	ldi	r24, 0x1F	; 31
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    4334:	81 11       	cpse	r24, r1
    4336:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    4338:	80 e2       	ldi	r24, 0x20	; 32
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    4340:	81 11       	cpse	r24, r1
    4342:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    4344:	81 e2       	ldi	r24, 0x21	; 33
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    434c:	81 11       	cpse	r24, r1
    434e:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    4350:	82 e2       	ldi	r24, 0x22	; 34
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    4358:	81 11       	cpse	r24, r1
    435a:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    435c:	83 e2       	ldi	r24, 0x23	; 35
    435e:	90 e0       	ldi	r25, 0x00	; 0
    4360:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    4364:	81 11       	cpse	r24, r1
    4366:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    4368:	84 e2       	ldi	r24, 0x24	; 36
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	0e 94 6e 20 	call	0x40dc	; 0x40dc <bootmagic_scan_key>
    4370:	88 23       	and	r24, r24
    4372:	11 f0       	breq	.+4      	; 0x4378 <bootmagic+0x278>
    4374:	c0 68       	ori	r28, 0x80	; 128
    4376:	02 c0       	rjmp	.+4      	; 0x437c <bootmagic+0x27c>
    if (default_layer) {
    4378:	cc 23       	and	r28, r28
    437a:	29 f0       	breq	.+10     	; 0x4386 <bootmagic+0x286>
        eeconfig_write_default_layer(default_layer);
    437c:	8c 2f       	mov	r24, r28
    437e:	0e 94 00 22 	call	0x4400	; 0x4400 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    4382:	6c 2f       	mov	r22, r28
    4384:	03 c0       	rjmp	.+6      	; 0x438c <bootmagic+0x28c>
    } else {
        default_layer = eeconfig_read_default_layer();
    4386:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    438a:	68 2f       	mov	r22, r24
    438c:	70 e0       	ldi	r23, 0x00	; 0
    438e:	80 e0       	ldi	r24, 0x00	; 0
    4390:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    4392:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    4394:	0c 94 70 1b 	jmp	0x36e0	; 0x36e0 <default_layer_set>
    }
}
    4398:	cf 91       	pop	r28
    439a:	08 95       	ret

0000439c <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    439c:	6d ee       	ldi	r22, 0xED	; 237
    439e:	7e ef       	ldi	r23, 0xFE	; 254
    43a0:	80 e0       	ldi	r24, 0x00	; 0
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <eeprom_write_word>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    43a8:	60 e0       	ldi	r22, 0x00	; 0
    43aa:	82 e0       	ldi	r24, 0x02	; 2
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <eeprom_write_byte>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    43b2:	60 e0       	ldi	r22, 0x00	; 0
    43b4:	83 e0       	ldi	r24, 0x03	; 3
    43b6:	90 e0       	ldi	r25, 0x00	; 0
    43b8:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <eeprom_write_byte>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    43bc:	60 e0       	ldi	r22, 0x00	; 0
    43be:	84 e0       	ldi	r24, 0x04	; 4
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <eeprom_write_byte>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    43c6:	60 e0       	ldi	r22, 0x00	; 0
    43c8:	85 e0       	ldi	r24, 0x05	; 5
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	0c 94 5b 2b 	jmp	0x56b6	; 0x56b6 <eeprom_write_byte>

000043d0 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    43d0:	80 e0       	ldi	r24, 0x00	; 0
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	0e 94 55 2b 	call	0x56aa	; 0x56aa <eeprom_read_word>
    43d8:	21 e0       	ldi	r18, 0x01	; 1
    43da:	8d 3e       	cpi	r24, 0xED	; 237
    43dc:	9e 4f       	sbci	r25, 0xFE	; 254
    43de:	09 f0       	breq	.+2      	; 0x43e2 <eeconfig_is_enabled+0x12>
    43e0:	20 e0       	ldi	r18, 0x00	; 0
}
    43e2:	82 2f       	mov	r24, r18
    43e4:	08 95       	ret

000043e6 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    43e6:	82 e0       	ldi	r24, 0x02	; 2
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	0c 94 4d 2b 	jmp	0x569a	; 0x569a <eeprom_read_byte>

000043ee <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    43ee:	68 2f       	mov	r22, r24
    43f0:	82 e0       	ldi	r24, 0x02	; 2
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	0c 94 5b 2b 	jmp	0x56b6	; 0x56b6 <eeprom_write_byte>

000043f8 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    43f8:	83 e0       	ldi	r24, 0x03	; 3
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	0c 94 4d 2b 	jmp	0x569a	; 0x569a <eeprom_read_byte>

00004400 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    4400:	68 2f       	mov	r22, r24
    4402:	83 e0       	ldi	r24, 0x03	; 3
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	0c 94 5b 2b 	jmp	0x56b6	; 0x56b6 <eeprom_write_byte>

0000440a <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    440a:	84 e0       	ldi	r24, 0x04	; 4
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	0c 94 4d 2b 	jmp	0x569a	; 0x569a <eeprom_read_byte>

00004412 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    4412:	68 2f       	mov	r22, r24
    4414:	84 e0       	ldi	r24, 0x04	; 4
    4416:	90 e0       	ldi	r25, 0x00	; 0
    4418:	0c 94 5b 2b 	jmp	0x56b6	; 0x56b6 <eeprom_write_byte>

0000441c <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    441c:	80 91 cf 01 	lds	r24, 0x01CF
    4420:	80 ff       	sbrs	r24, 0
    4422:	0b c0       	rjmp	.+22     	; 0x443a <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    4424:	60 91 12 01 	lds	r22, 0x0112
    4428:	85 e0       	ldi	r24, 0x05	; 5
    442a:	68 9f       	mul	r22, r24
    442c:	b0 01       	movw	r22, r0
    442e:	11 24       	eor	r1, r1
    4430:	75 95       	asr	r23
    4432:	67 95       	ror	r22
    4434:	75 95       	asr	r23
    4436:	67 95       	ror	r22
    4438:	2b c0       	rjmp	.+86     	; 0x4490 <move_unit+0x74>
    } else if (mousekey_accel & (1<<1)) {
    443a:	81 ff       	sbrs	r24, 1
    443c:	09 c0       	rjmp	.+18     	; 0x4450 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    443e:	60 91 12 01 	lds	r22, 0x0112
    4442:	85 e0       	ldi	r24, 0x05	; 5
    4444:	68 9f       	mul	r22, r24
    4446:	b0 01       	movw	r22, r0
    4448:	11 24       	eor	r1, r1
    444a:	75 95       	asr	r23
    444c:	67 95       	ror	r22
    444e:	20 c0       	rjmp	.+64     	; 0x4490 <move_unit+0x74>
    } else if (mousekey_accel & (1<<2)) {
    4450:	82 ff       	sbrs	r24, 2
    4452:	07 c0       	rjmp	.+14     	; 0x4462 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    4454:	60 91 12 01 	lds	r22, 0x0112
    4458:	85 e0       	ldi	r24, 0x05	; 5
    445a:	68 9f       	mul	r22, r24
    445c:	b0 01       	movw	r22, r0
    445e:	11 24       	eor	r1, r1
    4460:	17 c0       	rjmp	.+46     	; 0x4490 <move_unit+0x74>
    } else if (mousekey_repeat == 0) {
    4462:	90 91 d0 01 	lds	r25, 0x01D0
    4466:	99 23       	and	r25, r25
    4468:	d1 f0       	breq	.+52     	; 0x449e <move_unit+0x82>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    446a:	60 91 11 01 	lds	r22, 0x0111
    446e:	96 17       	cp	r25, r22
    4470:	88 f7       	brcc	.-30     	; 0x4454 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    4472:	20 91 12 01 	lds	r18, 0x0112
    4476:	85 e0       	ldi	r24, 0x05	; 5
    4478:	28 9f       	mul	r18, r24
    447a:	90 01       	movw	r18, r0
    447c:	11 24       	eor	r1, r1
    447e:	92 9f       	mul	r25, r18
    4480:	a0 01       	movw	r20, r0
    4482:	93 9f       	mul	r25, r19
    4484:	50 0d       	add	r21, r0
    4486:	11 24       	eor	r1, r1
    4488:	70 e0       	ldi	r23, 0x00	; 0
    448a:	ca 01       	movw	r24, r20
    448c:	0e 94 1c 2b 	call	0x5638	; 0x5638 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4490:	60 38       	cpi	r22, 0x80	; 128
    4492:	71 05       	cpc	r23, r1
    4494:	40 f4       	brcc	.+16     	; 0x44a6 <move_unit+0x8a>
    4496:	61 15       	cp	r22, r1
    4498:	71 05       	cpc	r23, r1
    449a:	39 f0       	breq	.+14     	; 0x44aa <move_unit+0x8e>
    449c:	02 c0       	rjmp	.+4      	; 0x44a2 <move_unit+0x86>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    449e:	65 e0       	ldi	r22, 0x05	; 5
    44a0:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    44a2:	86 2f       	mov	r24, r22
    44a4:	08 95       	ret
    44a6:	8f e7       	ldi	r24, 0x7F	; 127
    44a8:	08 95       	ret
    44aa:	81 e0       	ldi	r24, 0x01	; 1
}
    44ac:	08 95       	ret

000044ae <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    44ae:	80 91 cf 01 	lds	r24, 0x01CF
    44b2:	80 ff       	sbrs	r24, 0
    44b4:	08 c0       	rjmp	.+16     	; 0x44c6 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    44b6:	60 91 10 01 	lds	r22, 0x0110
    44ba:	70 e0       	ldi	r23, 0x00	; 0
    44bc:	75 95       	asr	r23
    44be:	67 95       	ror	r22
    44c0:	75 95       	asr	r23
    44c2:	67 95       	ror	r22
    44c4:	21 c0       	rjmp	.+66     	; 0x4508 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    44c6:	81 ff       	sbrs	r24, 1
    44c8:	06 c0       	rjmp	.+12     	; 0x44d6 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    44ca:	60 91 10 01 	lds	r22, 0x0110
    44ce:	70 e0       	ldi	r23, 0x00	; 0
    44d0:	75 95       	asr	r23
    44d2:	67 95       	ror	r22
    44d4:	19 c0       	rjmp	.+50     	; 0x4508 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    44d6:	82 ff       	sbrs	r24, 2
    44d8:	04 c0       	rjmp	.+8      	; 0x44e2 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    44da:	60 91 10 01 	lds	r22, 0x0110
    44de:	70 e0       	ldi	r23, 0x00	; 0
    44e0:	10 c0       	rjmp	.+32     	; 0x4502 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    44e2:	90 91 d0 01 	lds	r25, 0x01D0
    44e6:	99 23       	and	r25, r25
    44e8:	c1 f0       	breq	.+48     	; 0x451a <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    44ea:	60 91 0f 01 	lds	r22, 0x010F
    44ee:	96 17       	cp	r25, r22
    44f0:	a0 f7       	brcc	.-24     	; 0x44da <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    44f2:	80 91 10 01 	lds	r24, 0x0110
    44f6:	89 9f       	mul	r24, r25
    44f8:	c0 01       	movw	r24, r0
    44fa:	11 24       	eor	r1, r1
    44fc:	70 e0       	ldi	r23, 0x00	; 0
    44fe:	0e 94 1c 2b 	call	0x5638	; 0x5638 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4502:	60 38       	cpi	r22, 0x80	; 128
    4504:	71 05       	cpc	r23, r1
    4506:	28 f4       	brcc	.+10     	; 0x4512 <wheel_unit+0x64>
    4508:	61 15       	cp	r22, r1
    450a:	71 05       	cpc	r23, r1
    450c:	21 f0       	breq	.+8      	; 0x4516 <wheel_unit+0x68>
    450e:	86 2f       	mov	r24, r22
    4510:	08 95       	ret
    4512:	8f e7       	ldi	r24, 0x7F	; 127
    4514:	08 95       	ret
    4516:	81 e0       	ldi	r24, 0x01	; 1
    4518:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    451a:	61 e0       	ldi	r22, 0x01	; 1
    451c:	70 e0       	ldi	r23, 0x00	; 0
    451e:	f4 cf       	rjmp	.-24     	; 0x4508 <wheel_unit+0x5a>

00004520 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    4520:	80 3f       	cpi	r24, 0xF0	; 240
    4522:	21 f4       	brne	.+8      	; 0x452c <mousekey_on+0xc>
    4524:	0e 94 0e 22 	call	0x441c	; 0x441c <move_unit>
    4528:	81 95       	neg	r24
    452a:	04 c0       	rjmp	.+8      	; 0x4534 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    452c:	81 3f       	cpi	r24, 0xF1	; 241
    452e:	29 f4       	brne	.+10     	; 0x453a <mousekey_on+0x1a>
    4530:	0e 94 0e 22 	call	0x441c	; 0x441c <move_unit>
    4534:	80 93 d3 01 	sts	0x01D3, r24
    4538:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    453a:	82 3f       	cpi	r24, 0xF2	; 242
    453c:	21 f4       	brne	.+8      	; 0x4546 <mousekey_on+0x26>
    453e:	0e 94 0e 22 	call	0x441c	; 0x441c <move_unit>
    4542:	81 95       	neg	r24
    4544:	04 c0       	rjmp	.+8      	; 0x454e <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    4546:	83 3f       	cpi	r24, 0xF3	; 243
    4548:	29 f4       	brne	.+10     	; 0x4554 <mousekey_on+0x34>
    454a:	0e 94 0e 22 	call	0x441c	; 0x441c <move_unit>
    454e:	80 93 d2 01 	sts	0x01D2, r24
    4552:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    4554:	89 3f       	cpi	r24, 0xF9	; 249
    4556:	19 f4       	brne	.+6      	; 0x455e <mousekey_on+0x3e>
    4558:	0e 94 57 22 	call	0x44ae	; 0x44ae <wheel_unit>
    455c:	05 c0       	rjmp	.+10     	; 0x4568 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    455e:	8a 3f       	cpi	r24, 0xFA	; 250
    4560:	31 f4       	brne	.+12     	; 0x456e <mousekey_on+0x4e>
    4562:	0e 94 57 22 	call	0x44ae	; 0x44ae <wheel_unit>
    4566:	81 95       	neg	r24
    4568:	80 93 d4 01 	sts	0x01D4, r24
    456c:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    456e:	8b 3f       	cpi	r24, 0xFB	; 251
    4570:	21 f4       	brne	.+8      	; 0x457a <mousekey_on+0x5a>
    4572:	0e 94 57 22 	call	0x44ae	; 0x44ae <wheel_unit>
    4576:	81 95       	neg	r24
    4578:	04 c0       	rjmp	.+8      	; 0x4582 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    457a:	8c 3f       	cpi	r24, 0xFC	; 252
    457c:	29 f4       	brne	.+10     	; 0x4588 <mousekey_on+0x68>
    457e:	0e 94 57 22 	call	0x44ae	; 0x44ae <wheel_unit>
    4582:	80 93 d5 01 	sts	0x01D5, r24
    4586:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    4588:	84 3f       	cpi	r24, 0xF4	; 244
    458a:	21 f4       	brne	.+8      	; 0x4594 <mousekey_on+0x74>
    458c:	80 91 d1 01 	lds	r24, 0x01D1
    4590:	81 60       	ori	r24, 0x01	; 1
    4592:	17 c0       	rjmp	.+46     	; 0x45c2 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    4594:	85 3f       	cpi	r24, 0xF5	; 245
    4596:	21 f4       	brne	.+8      	; 0x45a0 <mousekey_on+0x80>
    4598:	80 91 d1 01 	lds	r24, 0x01D1
    459c:	82 60       	ori	r24, 0x02	; 2
    459e:	11 c0       	rjmp	.+34     	; 0x45c2 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    45a0:	86 3f       	cpi	r24, 0xF6	; 246
    45a2:	21 f4       	brne	.+8      	; 0x45ac <mousekey_on+0x8c>
    45a4:	80 91 d1 01 	lds	r24, 0x01D1
    45a8:	84 60       	ori	r24, 0x04	; 4
    45aa:	0b c0       	rjmp	.+22     	; 0x45c2 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    45ac:	87 3f       	cpi	r24, 0xF7	; 247
    45ae:	21 f4       	brne	.+8      	; 0x45b8 <mousekey_on+0x98>
    45b0:	80 91 d1 01 	lds	r24, 0x01D1
    45b4:	88 60       	ori	r24, 0x08	; 8
    45b6:	05 c0       	rjmp	.+10     	; 0x45c2 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    45b8:	88 3f       	cpi	r24, 0xF8	; 248
    45ba:	31 f4       	brne	.+12     	; 0x45c8 <mousekey_on+0xa8>
    45bc:	80 91 d1 01 	lds	r24, 0x01D1
    45c0:	80 61       	ori	r24, 0x10	; 16
    45c2:	80 93 d1 01 	sts	0x01D1, r24
    45c6:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    45c8:	8d 3f       	cpi	r24, 0xFD	; 253
    45ca:	21 f4       	brne	.+8      	; 0x45d4 <mousekey_on+0xb4>
    45cc:	80 91 cf 01 	lds	r24, 0x01CF
    45d0:	81 60       	ori	r24, 0x01	; 1
    45d2:	0b c0       	rjmp	.+22     	; 0x45ea <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    45d4:	8e 3f       	cpi	r24, 0xFE	; 254
    45d6:	21 f4       	brne	.+8      	; 0x45e0 <mousekey_on+0xc0>
    45d8:	80 91 cf 01 	lds	r24, 0x01CF
    45dc:	82 60       	ori	r24, 0x02	; 2
    45de:	05 c0       	rjmp	.+10     	; 0x45ea <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    45e0:	8f 3f       	cpi	r24, 0xFF	; 255
    45e2:	29 f4       	brne	.+10     	; 0x45ee <mousekey_on+0xce>
    45e4:	80 91 cf 01 	lds	r24, 0x01CF
    45e8:	84 60       	ori	r24, 0x04	; 4
    45ea:	80 93 cf 01 	sts	0x01CF, r24
    45ee:	08 95       	ret

000045f0 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    45f0:	80 3f       	cpi	r24, 0xF0	; 240
    45f2:	39 f4       	brne	.+14     	; 0x4602 <mousekey_off+0x12>
    45f4:	80 91 d3 01 	lds	r24, 0x01D3
    45f8:	87 ff       	sbrs	r24, 7
    45fa:	6c c0       	rjmp	.+216    	; 0x46d4 <mousekey_off+0xe4>
    45fc:	10 92 d3 01 	sts	0x01D3, r1
    4600:	69 c0       	rjmp	.+210    	; 0x46d4 <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    4602:	81 3f       	cpi	r24, 0xF1	; 241
    4604:	29 f4       	brne	.+10     	; 0x4610 <mousekey_off+0x20>
    4606:	80 91 d3 01 	lds	r24, 0x01D3
    460a:	18 16       	cp	r1, r24
    460c:	bc f3       	brlt	.-18     	; 0x45fc <mousekey_off+0xc>
    460e:	62 c0       	rjmp	.+196    	; 0x46d4 <mousekey_off+0xe4>
    4610:	90 91 d2 01 	lds	r25, 0x01D2
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    4614:	82 3f       	cpi	r24, 0xF2	; 242
    4616:	29 f4       	brne	.+10     	; 0x4622 <mousekey_off+0x32>
    4618:	97 ff       	sbrs	r25, 7
    461a:	5c c0       	rjmp	.+184    	; 0x46d4 <mousekey_off+0xe4>
    461c:	10 92 d2 01 	sts	0x01D2, r1
    4620:	59 c0       	rjmp	.+178    	; 0x46d4 <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4622:	83 3f       	cpi	r24, 0xF3	; 243
    4624:	19 f4       	brne	.+6      	; 0x462c <mousekey_off+0x3c>
    4626:	19 16       	cp	r1, r25
    4628:	cc f3       	brlt	.-14     	; 0x461c <mousekey_off+0x2c>
    462a:	54 c0       	rjmp	.+168    	; 0x46d4 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    462c:	89 3f       	cpi	r24, 0xF9	; 249
    462e:	41 f4       	brne	.+16     	; 0x4640 <mousekey_off+0x50>
    4630:	80 91 d4 01 	lds	r24, 0x01D4
    4634:	18 16       	cp	r1, r24
    4636:	0c f0       	brlt	.+2      	; 0x463a <mousekey_off+0x4a>
    4638:	4d c0       	rjmp	.+154    	; 0x46d4 <mousekey_off+0xe4>
    463a:	10 92 d4 01 	sts	0x01D4, r1
    463e:	4a c0       	rjmp	.+148    	; 0x46d4 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    4640:	8a 3f       	cpi	r24, 0xFA	; 250
    4642:	29 f4       	brne	.+10     	; 0x464e <mousekey_off+0x5e>
    4644:	80 91 d4 01 	lds	r24, 0x01D4
    4648:	87 ff       	sbrs	r24, 7
    464a:	44 c0       	rjmp	.+136    	; 0x46d4 <mousekey_off+0xe4>
    464c:	f6 cf       	rjmp	.-20     	; 0x463a <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    464e:	8b 3f       	cpi	r24, 0xFB	; 251
    4650:	39 f4       	brne	.+14     	; 0x4660 <mousekey_off+0x70>
    4652:	80 91 d5 01 	lds	r24, 0x01D5
    4656:	87 ff       	sbrs	r24, 7
    4658:	3d c0       	rjmp	.+122    	; 0x46d4 <mousekey_off+0xe4>
    465a:	10 92 d5 01 	sts	0x01D5, r1
    465e:	3a c0       	rjmp	.+116    	; 0x46d4 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4660:	8c 3f       	cpi	r24, 0xFC	; 252
    4662:	29 f4       	brne	.+10     	; 0x466e <mousekey_off+0x7e>
    4664:	80 91 d5 01 	lds	r24, 0x01D5
    4668:	18 16       	cp	r1, r24
    466a:	bc f3       	brlt	.-18     	; 0x465a <mousekey_off+0x6a>
    466c:	33 c0       	rjmp	.+102    	; 0x46d4 <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    466e:	84 3f       	cpi	r24, 0xF4	; 244
    4670:	21 f4       	brne	.+8      	; 0x467a <mousekey_off+0x8a>
    4672:	80 91 d1 01 	lds	r24, 0x01D1
    4676:	8e 7f       	andi	r24, 0xFE	; 254
    4678:	17 c0       	rjmp	.+46     	; 0x46a8 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    467a:	85 3f       	cpi	r24, 0xF5	; 245
    467c:	21 f4       	brne	.+8      	; 0x4686 <mousekey_off+0x96>
    467e:	80 91 d1 01 	lds	r24, 0x01D1
    4682:	8d 7f       	andi	r24, 0xFD	; 253
    4684:	11 c0       	rjmp	.+34     	; 0x46a8 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4686:	86 3f       	cpi	r24, 0xF6	; 246
    4688:	21 f4       	brne	.+8      	; 0x4692 <mousekey_off+0xa2>
    468a:	80 91 d1 01 	lds	r24, 0x01D1
    468e:	8b 7f       	andi	r24, 0xFB	; 251
    4690:	0b c0       	rjmp	.+22     	; 0x46a8 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4692:	87 3f       	cpi	r24, 0xF7	; 247
    4694:	21 f4       	brne	.+8      	; 0x469e <mousekey_off+0xae>
    4696:	80 91 d1 01 	lds	r24, 0x01D1
    469a:	87 7f       	andi	r24, 0xF7	; 247
    469c:	05 c0       	rjmp	.+10     	; 0x46a8 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    469e:	88 3f       	cpi	r24, 0xF8	; 248
    46a0:	31 f4       	brne	.+12     	; 0x46ae <mousekey_off+0xbe>
    46a2:	80 91 d1 01 	lds	r24, 0x01D1
    46a6:	8f 7e       	andi	r24, 0xEF	; 239
    46a8:	80 93 d1 01 	sts	0x01D1, r24
    46ac:	13 c0       	rjmp	.+38     	; 0x46d4 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    46ae:	8d 3f       	cpi	r24, 0xFD	; 253
    46b0:	21 f4       	brne	.+8      	; 0x46ba <mousekey_off+0xca>
    46b2:	80 91 cf 01 	lds	r24, 0x01CF
    46b6:	8e 7f       	andi	r24, 0xFE	; 254
    46b8:	0b c0       	rjmp	.+22     	; 0x46d0 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    46ba:	8e 3f       	cpi	r24, 0xFE	; 254
    46bc:	21 f4       	brne	.+8      	; 0x46c6 <mousekey_off+0xd6>
    46be:	80 91 cf 01 	lds	r24, 0x01CF
    46c2:	8d 7f       	andi	r24, 0xFD	; 253
    46c4:	05 c0       	rjmp	.+10     	; 0x46d0 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    46c6:	8f 3f       	cpi	r24, 0xFF	; 255
    46c8:	29 f4       	brne	.+10     	; 0x46d4 <mousekey_off+0xe4>
    46ca:	80 91 cf 01 	lds	r24, 0x01CF
    46ce:	8b 7f       	andi	r24, 0xFB	; 251
    46d0:	80 93 cf 01 	sts	0x01CF, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    46d4:	80 91 d2 01 	lds	r24, 0x01D2
    46d8:	81 11       	cpse	r24, r1
    46da:	0e c0       	rjmp	.+28     	; 0x46f8 <mousekey_off+0x108>
    46dc:	80 91 d3 01 	lds	r24, 0x01D3
    46e0:	81 11       	cpse	r24, r1
    46e2:	0a c0       	rjmp	.+20     	; 0x46f8 <mousekey_off+0x108>
    46e4:	80 91 d4 01 	lds	r24, 0x01D4
    46e8:	81 11       	cpse	r24, r1
    46ea:	06 c0       	rjmp	.+12     	; 0x46f8 <mousekey_off+0x108>
    46ec:	80 91 d5 01 	lds	r24, 0x01D5
    46f0:	81 11       	cpse	r24, r1
    46f2:	02 c0       	rjmp	.+4      	; 0x46f8 <mousekey_off+0x108>
        mousekey_repeat = 0;
    46f4:	10 92 d0 01 	sts	0x01D0, r1
    46f8:	08 95       	ret

000046fa <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    46fa:	80 91 c7 01 	lds	r24, 0x01C7
    46fe:	83 ff       	sbrs	r24, 3
    4700:	7e c0       	rjmp	.+252    	; 0x47fe <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    4702:	89 e4       	ldi	r24, 0x49	; 73
    4704:	96 e0       	ldi	r25, 0x06	; 6
    4706:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    phex(mouse_report.buttons); print("|");
    470a:	80 91 d1 01 	lds	r24, 0x01D1
    470e:	1f 92       	push	r1
    4710:	8f 93       	push	r24
    4712:	84 e4       	ldi	r24, 0x44	; 68
    4714:	96 e0       	ldi	r25, 0x06	; 6
    4716:	9f 93       	push	r25
    4718:	8f 93       	push	r24
    471a:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    471e:	82 e4       	ldi	r24, 0x42	; 66
    4720:	96 e0       	ldi	r25, 0x06	; 6
    4722:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print_decs(mouse_report.x); print(" ");
    4726:	80 91 d2 01 	lds	r24, 0x01D2
    472a:	28 2f       	mov	r18, r24
    472c:	08 2e       	mov	r0, r24
    472e:	00 0c       	add	r0, r0
    4730:	33 0b       	sbc	r19, r19
    4732:	3f 93       	push	r19
    4734:	8f 93       	push	r24
    4736:	8f e3       	ldi	r24, 0x3F	; 63
    4738:	96 e0       	ldi	r25, 0x06	; 6
    473a:	9f 93       	push	r25
    473c:	8f 93       	push	r24
    473e:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    4742:	8d e3       	ldi	r24, 0x3D	; 61
    4744:	96 e0       	ldi	r25, 0x06	; 6
    4746:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print_decs(mouse_report.y); print(" ");
    474a:	80 91 d3 01 	lds	r24, 0x01D3
    474e:	28 2f       	mov	r18, r24
    4750:	08 2e       	mov	r0, r24
    4752:	00 0c       	add	r0, r0
    4754:	33 0b       	sbc	r19, r19
    4756:	3f 93       	push	r19
    4758:	8f 93       	push	r24
    475a:	8a e3       	ldi	r24, 0x3A	; 58
    475c:	96 e0       	ldi	r25, 0x06	; 6
    475e:	9f 93       	push	r25
    4760:	8f 93       	push	r24
    4762:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    4766:	88 e3       	ldi	r24, 0x38	; 56
    4768:	96 e0       	ldi	r25, 0x06	; 6
    476a:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print_decs(mouse_report.v); print(" ");
    476e:	80 91 d4 01 	lds	r24, 0x01D4
    4772:	28 2f       	mov	r18, r24
    4774:	08 2e       	mov	r0, r24
    4776:	00 0c       	add	r0, r0
    4778:	33 0b       	sbc	r19, r19
    477a:	3f 93       	push	r19
    477c:	8f 93       	push	r24
    477e:	85 e3       	ldi	r24, 0x35	; 53
    4780:	96 e0       	ldi	r25, 0x06	; 6
    4782:	9f 93       	push	r25
    4784:	8f 93       	push	r24
    4786:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    478a:	83 e3       	ldi	r24, 0x33	; 51
    478c:	96 e0       	ldi	r25, 0x06	; 6
    478e:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print_decs(mouse_report.h); print("](");
    4792:	80 91 d5 01 	lds	r24, 0x01D5
    4796:	28 2f       	mov	r18, r24
    4798:	08 2e       	mov	r0, r24
    479a:	00 0c       	add	r0, r0
    479c:	33 0b       	sbc	r19, r19
    479e:	3f 93       	push	r19
    47a0:	8f 93       	push	r24
    47a2:	80 e3       	ldi	r24, 0x30	; 48
    47a4:	96 e0       	ldi	r25, 0x06	; 6
    47a6:	9f 93       	push	r25
    47a8:	8f 93       	push	r24
    47aa:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    47ae:	8d e2       	ldi	r24, 0x2D	; 45
    47b0:	96 e0       	ldi	r25, 0x06	; 6
    47b2:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print_dec(mousekey_repeat); print("/");
    47b6:	80 91 d0 01 	lds	r24, 0x01D0
    47ba:	1f 92       	push	r1
    47bc:	8f 93       	push	r24
    47be:	8a e2       	ldi	r24, 0x2A	; 42
    47c0:	96 e0       	ldi	r25, 0x06	; 6
    47c2:	9f 93       	push	r25
    47c4:	8f 93       	push	r24
    47c6:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    47ca:	88 e2       	ldi	r24, 0x28	; 40
    47cc:	96 e0       	ldi	r25, 0x06	; 6
    47ce:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print_dec(mousekey_accel); print(")\n");
    47d2:	80 91 cf 01 	lds	r24, 0x01CF
    47d6:	1f 92       	push	r1
    47d8:	8f 93       	push	r24
    47da:	85 e2       	ldi	r24, 0x25	; 37
    47dc:	96 e0       	ldi	r25, 0x06	; 6
    47de:	9f 93       	push	r25
    47e0:	8f 93       	push	r24
    47e2:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    47e6:	82 e2       	ldi	r24, 0x22	; 34
    47e8:	96 e0       	ldi	r25, 0x06	; 6
    47ea:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    47ee:	8d b7       	in	r24, 0x3d	; 61
    47f0:	9e b7       	in	r25, 0x3e	; 62
    47f2:	4c 96       	adiw	r24, 0x1c	; 28
    47f4:	0f b6       	in	r0, 0x3f	; 63
    47f6:	f8 94       	cli
    47f8:	9e bf       	out	0x3e, r25	; 62
    47fa:	0f be       	out	0x3f, r0	; 63
    47fc:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    47fe:	81 ed       	ldi	r24, 0xD1	; 209
    4800:	91 e0       	ldi	r25, 0x01	; 1
    4802:	0e 94 df 11 	call	0x23be	; 0x23be <host_mouse_send>
    last_timer = timer_read();
    4806:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <timer_read>
    480a:	90 93 ce 01 	sts	0x01CE, r25
    480e:	80 93 cd 01 	sts	0x01CD, r24
    4812:	08 95       	ret

00004814 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    4814:	1f 93       	push	r17
    4816:	cf 93       	push	r28
    4818:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    481a:	80 91 cd 01 	lds	r24, 0x01CD
    481e:	90 91 ce 01 	lds	r25, 0x01CE
    4822:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <timer_elapsed>
    4826:	ac 01       	movw	r20, r24
    4828:	90 91 d0 01 	lds	r25, 0x01D0
    482c:	99 23       	and	r25, r25
    482e:	21 f0       	breq	.+8      	; 0x4838 <mousekey_task+0x24>
    4830:	20 91 13 01 	lds	r18, 0x0113
    4834:	30 e0       	ldi	r19, 0x00	; 0
    4836:	06 c0       	rjmp	.+12     	; 0x4844 <mousekey_task+0x30>
    4838:	20 91 14 01 	lds	r18, 0x0114
    483c:	8a e0       	ldi	r24, 0x0A	; 10
    483e:	28 9f       	mul	r18, r24
    4840:	90 01       	movw	r18, r0
    4842:	11 24       	eor	r1, r1
    4844:	42 17       	cp	r20, r18
    4846:	53 07       	cpc	r21, r19
    4848:	08 f4       	brcc	.+2      	; 0x484c <mousekey_task+0x38>
    484a:	85 c0       	rjmp	.+266    	; 0x4956 <mousekey_task+0x142>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    484c:	80 91 d2 01 	lds	r24, 0x01D2
    4850:	c0 91 d3 01 	lds	r28, 0x01D3
    4854:	d0 91 d4 01 	lds	r29, 0x01D4
    4858:	10 91 d5 01 	lds	r17, 0x01D5
    485c:	81 11       	cpse	r24, r1
    485e:	07 c0       	rjmp	.+14     	; 0x486e <mousekey_task+0x5a>
    4860:	c1 11       	cpse	r28, r1
    4862:	75 c0       	rjmp	.+234    	; 0x494e <mousekey_task+0x13a>
    4864:	d1 11       	cpse	r29, r1
    4866:	73 c0       	rjmp	.+230    	; 0x494e <mousekey_task+0x13a>
    4868:	11 11       	cpse	r17, r1
    486a:	71 c0       	rjmp	.+226    	; 0x494e <mousekey_task+0x13a>
    486c:	74 c0       	rjmp	.+232    	; 0x4956 <mousekey_task+0x142>
        return;

    if (mousekey_repeat != UINT8_MAX)
    486e:	9f 3f       	cpi	r25, 0xFF	; 255
    4870:	19 f0       	breq	.+6      	; 0x4878 <mousekey_task+0x64>
        mousekey_repeat++;
    4872:	9f 5f       	subi	r25, 0xFF	; 255
    4874:	90 93 d0 01 	sts	0x01D0, r25


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4878:	18 16       	cp	r1, r24
    487a:	24 f4       	brge	.+8      	; 0x4884 <mousekey_task+0x70>
    487c:	0e 94 0e 22 	call	0x441c	; 0x441c <move_unit>
    4880:	80 93 d2 01 	sts	0x01D2, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    4884:	80 91 d2 01 	lds	r24, 0x01D2
    4888:	87 ff       	sbrs	r24, 7
    488a:	05 c0       	rjmp	.+10     	; 0x4896 <mousekey_task+0x82>
    488c:	0e 94 0e 22 	call	0x441c	; 0x441c <move_unit>
    4890:	81 95       	neg	r24
    4892:	80 93 d2 01 	sts	0x01D2, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4896:	1c 16       	cp	r1, r28
    4898:	24 f4       	brge	.+8      	; 0x48a2 <mousekey_task+0x8e>
    489a:	0e 94 0e 22 	call	0x441c	; 0x441c <move_unit>
    489e:	80 93 d3 01 	sts	0x01D3, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    48a2:	80 91 d3 01 	lds	r24, 0x01D3
    48a6:	87 ff       	sbrs	r24, 7
    48a8:	05 c0       	rjmp	.+10     	; 0x48b4 <mousekey_task+0xa0>
    48aa:	0e 94 0e 22 	call	0x441c	; 0x441c <move_unit>
    48ae:	81 95       	neg	r24
    48b0:	80 93 d3 01 	sts	0x01D3, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    48b4:	60 91 d2 01 	lds	r22, 0x01D2
    48b8:	66 23       	and	r22, r22
    48ba:	31 f1       	breq	.+76     	; 0x4908 <mousekey_task+0xf4>
    48bc:	c0 91 d3 01 	lds	r28, 0x01D3
    48c0:	cc 23       	and	r28, r28
    48c2:	11 f1       	breq	.+68     	; 0x4908 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    48c4:	06 2e       	mov	r0, r22
    48c6:	00 0c       	add	r0, r0
    48c8:	77 0b       	sbc	r23, r23
    48ca:	88 0b       	sbc	r24, r24
    48cc:	99 0b       	sbc	r25, r25
    48ce:	0e 94 17 2a 	call	0x542e	; 0x542e <__floatsisf>
    48d2:	23 e3       	ldi	r18, 0x33	; 51
    48d4:	33 e3       	ldi	r19, 0x33	; 51
    48d6:	43 e3       	ldi	r20, 0x33	; 51
    48d8:	5f e3       	ldi	r21, 0x3F	; 63
    48da:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <__mulsf3>
    48de:	0e 94 df 29 	call	0x53be	; 0x53be <__fixsfsi>
    48e2:	60 93 d2 01 	sts	0x01D2, r22
        mouse_report.y *= 0.7;
    48e6:	6c 2f       	mov	r22, r28
    48e8:	cc 0f       	add	r28, r28
    48ea:	77 0b       	sbc	r23, r23
    48ec:	88 0b       	sbc	r24, r24
    48ee:	99 0b       	sbc	r25, r25
    48f0:	0e 94 17 2a 	call	0x542e	; 0x542e <__floatsisf>
    48f4:	23 e3       	ldi	r18, 0x33	; 51
    48f6:	33 e3       	ldi	r19, 0x33	; 51
    48f8:	43 e3       	ldi	r20, 0x33	; 51
    48fa:	5f e3       	ldi	r21, 0x3F	; 63
    48fc:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <__mulsf3>
    4900:	0e 94 df 29 	call	0x53be	; 0x53be <__fixsfsi>
    4904:	60 93 d3 01 	sts	0x01D3, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4908:	1d 16       	cp	r1, r29
    490a:	24 f4       	brge	.+8      	; 0x4914 <mousekey_task+0x100>
    490c:	0e 94 57 22 	call	0x44ae	; 0x44ae <wheel_unit>
    4910:	80 93 d4 01 	sts	0x01D4, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4914:	80 91 d4 01 	lds	r24, 0x01D4
    4918:	87 ff       	sbrs	r24, 7
    491a:	05 c0       	rjmp	.+10     	; 0x4926 <mousekey_task+0x112>
    491c:	0e 94 57 22 	call	0x44ae	; 0x44ae <wheel_unit>
    4920:	81 95       	neg	r24
    4922:	80 93 d4 01 	sts	0x01D4, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4926:	11 16       	cp	r1, r17
    4928:	24 f4       	brge	.+8      	; 0x4932 <mousekey_task+0x11e>
    492a:	0e 94 57 22 	call	0x44ae	; 0x44ae <wheel_unit>
    492e:	80 93 d5 01 	sts	0x01D5, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4932:	80 91 d5 01 	lds	r24, 0x01D5
    4936:	87 ff       	sbrs	r24, 7
    4938:	05 c0       	rjmp	.+10     	; 0x4944 <mousekey_task+0x130>
    493a:	0e 94 57 22 	call	0x44ae	; 0x44ae <wheel_unit>
    493e:	81 95       	neg	r24
    4940:	80 93 d5 01 	sts	0x01D5, r24

    mousekey_send();
}
    4944:	df 91       	pop	r29
    4946:	cf 91       	pop	r28
    4948:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    494a:	0c 94 7d 23 	jmp	0x46fa	; 0x46fa <mousekey_send>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
        return;

    if (mousekey_repeat != UINT8_MAX)
    494e:	9f 3f       	cpi	r25, 0xFF	; 255
    4950:	09 f0       	breq	.+2      	; 0x4954 <mousekey_task+0x140>
    4952:	8f cf       	rjmp	.-226    	; 0x4872 <mousekey_task+0x5e>
    4954:	97 cf       	rjmp	.-210    	; 0x4884 <mousekey_task+0x70>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
}
    4956:	df 91       	pop	r29
    4958:	cf 91       	pop	r28
    495a:	1f 91       	pop	r17
    495c:	08 95       	ret

0000495e <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    495e:	e1 ed       	ldi	r30, 0xD1	; 209
    4960:	f1 e0       	ldi	r31, 0x01	; 1
    4962:	85 e0       	ldi	r24, 0x05	; 5
    4964:	df 01       	movw	r26, r30
    4966:	1d 92       	st	X+, r1
    4968:	8a 95       	dec	r24
    496a:	e9 f7       	brne	.-6      	; 0x4966 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    496c:	10 92 d0 01 	sts	0x01D0, r1
    mousekey_accel = 0;
    4970:	10 92 cf 01 	sts	0x01CF, r1
    4974:	08 95       	ret

00004976 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    4976:	8c e6       	ldi	r24, 0x6C	; 108
    4978:	98 e0       	ldi	r25, 0x08	; 8
    497a:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    497e:	1f 92       	push	r1
    4980:	81 e0       	ldi	r24, 0x01	; 1
    4982:	8f 93       	push	r24
    4984:	1f 92       	push	r1
    4986:	85 e0       	ldi	r24, 0x05	; 5
    4988:	8f 93       	push	r24
    498a:	8e e1       	ldi	r24, 0x1E	; 30
    498c:	98 e0       	ldi	r25, 0x08	; 8
    498e:	9f 93       	push	r25
    4990:	8f 93       	push	r24
    4992:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    4996:	0f 90       	pop	r0
    4998:	0f 90       	pop	r0
    499a:	0f 90       	pop	r0
    499c:	0f 90       	pop	r0
    499e:	0f 90       	pop	r0
    49a0:	0f 90       	pop	r0
    49a2:	08 95       	ret

000049a4 <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    49a4:	83 30       	cpi	r24, 0x03	; 3
    49a6:	e9 f1       	breq	.+122    	; 0x4a22 <mousekey_param_inc+0x7e>
    49a8:	28 f4       	brcc	.+10     	; 0x49b4 <mousekey_param_inc+0x10>
    49aa:	81 30       	cpi	r24, 0x01	; 1
    49ac:	61 f0       	breq	.+24     	; 0x49c6 <mousekey_param_inc+0x22>
    49ae:	82 30       	cpi	r24, 0x02	; 2
    49b0:	09 f1       	breq	.+66     	; 0x49f4 <mousekey_param_inc+0x50>
    49b2:	08 95       	ret
    49b4:	85 30       	cpi	r24, 0x05	; 5
    49b6:	09 f4       	brne	.+2      	; 0x49ba <mousekey_param_inc+0x16>
    49b8:	62 c0       	rjmp	.+196    	; 0x4a7e <mousekey_param_inc+0xda>
    49ba:	08 f4       	brcc	.+2      	; 0x49be <mousekey_param_inc+0x1a>
    49bc:	49 c0       	rjmp	.+146    	; 0x4a50 <mousekey_param_inc+0xac>
    49be:	86 30       	cpi	r24, 0x06	; 6
    49c0:	09 f4       	brne	.+2      	; 0x49c4 <mousekey_param_inc+0x20>
    49c2:	74 c0       	rjmp	.+232    	; 0x4aac <mousekey_param_inc+0x108>
    49c4:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    49c6:	80 91 14 01 	lds	r24, 0x0114
    49ca:	26 2f       	mov	r18, r22
    49cc:	30 e0       	ldi	r19, 0x00	; 0
    49ce:	28 0f       	add	r18, r24
    49d0:	31 1d       	adc	r19, r1
    49d2:	2f 3f       	cpi	r18, 0xFF	; 255
    49d4:	31 05       	cpc	r19, r1
    49d6:	24 f4       	brge	.+8      	; 0x49e0 <mousekey_param_inc+0x3c>
                mk_delay += inc;
    49d8:	68 0f       	add	r22, r24
    49da:	60 93 14 01 	sts	0x0114, r22
    49de:	03 c0       	rjmp	.+6      	; 0x49e6 <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    49e0:	8f ef       	ldi	r24, 0xFF	; 255
    49e2:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_delay);
    49e6:	80 91 14 01 	lds	r24, 0x0114
    49ea:	1f 92       	push	r1
    49ec:	8f 93       	push	r24
    49ee:	87 e5       	ldi	r24, 0x57	; 87
    49f0:	97 e0       	ldi	r25, 0x07	; 7
    49f2:	72 c0       	rjmp	.+228    	; 0x4ad8 <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    49f4:	80 91 13 01 	lds	r24, 0x0113
    49f8:	26 2f       	mov	r18, r22
    49fa:	30 e0       	ldi	r19, 0x00	; 0
    49fc:	28 0f       	add	r18, r24
    49fe:	31 1d       	adc	r19, r1
    4a00:	2f 3f       	cpi	r18, 0xFF	; 255
    4a02:	31 05       	cpc	r19, r1
    4a04:	24 f4       	brge	.+8      	; 0x4a0e <mousekey_param_inc+0x6a>
                mk_interval += inc;
    4a06:	68 0f       	add	r22, r24
    4a08:	60 93 13 01 	sts	0x0113, r22
    4a0c:	03 c0       	rjmp	.+6      	; 0x4a14 <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    4a0e:	8f ef       	ldi	r24, 0xFF	; 255
    4a10:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_interval);
    4a14:	80 91 13 01 	lds	r24, 0x0113
    4a18:	1f 92       	push	r1
    4a1a:	8f 93       	push	r24
    4a1c:	85 e4       	ldi	r24, 0x45	; 69
    4a1e:	97 e0       	ldi	r25, 0x07	; 7
    4a20:	5b c0       	rjmp	.+182    	; 0x4ad8 <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4a22:	80 91 12 01 	lds	r24, 0x0112
    4a26:	26 2f       	mov	r18, r22
    4a28:	30 e0       	ldi	r19, 0x00	; 0
    4a2a:	28 0f       	add	r18, r24
    4a2c:	31 1d       	adc	r19, r1
    4a2e:	2f 3f       	cpi	r18, 0xFF	; 255
    4a30:	31 05       	cpc	r19, r1
    4a32:	24 f4       	brge	.+8      	; 0x4a3c <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    4a34:	68 0f       	add	r22, r24
    4a36:	60 93 12 01 	sts	0x0112, r22
    4a3a:	03 c0       	rjmp	.+6      	; 0x4a42 <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    4a3c:	8f ef       	ldi	r24, 0xFF	; 255
    4a3e:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_max_speed);
    4a42:	80 91 12 01 	lds	r24, 0x0112
    4a46:	1f 92       	push	r1
    4a48:	8f 93       	push	r24
    4a4a:	82 e3       	ldi	r24, 0x32	; 50
    4a4c:	97 e0       	ldi	r25, 0x07	; 7
    4a4e:	44 c0       	rjmp	.+136    	; 0x4ad8 <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4a50:	80 91 11 01 	lds	r24, 0x0111
    4a54:	26 2f       	mov	r18, r22
    4a56:	30 e0       	ldi	r19, 0x00	; 0
    4a58:	28 0f       	add	r18, r24
    4a5a:	31 1d       	adc	r19, r1
    4a5c:	2f 3f       	cpi	r18, 0xFF	; 255
    4a5e:	31 05       	cpc	r19, r1
    4a60:	24 f4       	brge	.+8      	; 0x4a6a <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    4a62:	68 0f       	add	r22, r24
    4a64:	60 93 11 01 	sts	0x0111, r22
    4a68:	03 c0       	rjmp	.+6      	; 0x4a70 <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    4a6a:	8f ef       	ldi	r24, 0xFF	; 255
    4a6c:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_time_to_max);
    4a70:	80 91 11 01 	lds	r24, 0x0111
    4a74:	1f 92       	push	r1
    4a76:	8f 93       	push	r24
    4a78:	8d e1       	ldi	r24, 0x1D	; 29
    4a7a:	97 e0       	ldi	r25, 0x07	; 7
    4a7c:	2d c0       	rjmp	.+90     	; 0x4ad8 <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4a7e:	80 91 10 01 	lds	r24, 0x0110
    4a82:	26 2f       	mov	r18, r22
    4a84:	30 e0       	ldi	r19, 0x00	; 0
    4a86:	28 0f       	add	r18, r24
    4a88:	31 1d       	adc	r19, r1
    4a8a:	2f 3f       	cpi	r18, 0xFF	; 255
    4a8c:	31 05       	cpc	r19, r1
    4a8e:	24 f4       	brge	.+8      	; 0x4a98 <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    4a90:	68 0f       	add	r22, r24
    4a92:	60 93 10 01 	sts	0x0110, r22
    4a96:	03 c0       	rjmp	.+6      	; 0x4a9e <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4a98:	8f ef       	ldi	r24, 0xFF	; 255
    4a9a:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4a9e:	80 91 10 01 	lds	r24, 0x0110
    4aa2:	1f 92       	push	r1
    4aa4:	8f 93       	push	r24
    4aa6:	84 e0       	ldi	r24, 0x04	; 4
    4aa8:	97 e0       	ldi	r25, 0x07	; 7
    4aaa:	16 c0       	rjmp	.+44     	; 0x4ad8 <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4aac:	80 91 0f 01 	lds	r24, 0x010F
    4ab0:	26 2f       	mov	r18, r22
    4ab2:	30 e0       	ldi	r19, 0x00	; 0
    4ab4:	28 0f       	add	r18, r24
    4ab6:	31 1d       	adc	r19, r1
    4ab8:	2f 3f       	cpi	r18, 0xFF	; 255
    4aba:	31 05       	cpc	r19, r1
    4abc:	24 f4       	brge	.+8      	; 0x4ac6 <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    4abe:	68 0f       	add	r22, r24
    4ac0:	60 93 0f 01 	sts	0x010F, r22
    4ac4:	03 c0       	rjmp	.+6      	; 0x4acc <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4ac6:	8f ef       	ldi	r24, 0xFF	; 255
    4ac8:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4acc:	80 91 0f 01 	lds	r24, 0x010F
    4ad0:	1f 92       	push	r1
    4ad2:	8f 93       	push	r24
    4ad4:	89 ee       	ldi	r24, 0xE9	; 233
    4ad6:	96 e0       	ldi	r25, 0x06	; 6
    4ad8:	9f 93       	push	r25
    4ada:	8f 93       	push	r24
    4adc:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
            break;
    4ae0:	0f 90       	pop	r0
    4ae2:	0f 90       	pop	r0
    4ae4:	0f 90       	pop	r0
    4ae6:	0f 90       	pop	r0
    4ae8:	08 95       	ret

00004aea <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4aea:	83 30       	cpi	r24, 0x03	; 3
    4aec:	81 f1       	breq	.+96     	; 0x4b4e <mousekey_param_dec+0x64>
    4aee:	28 f4       	brcc	.+10     	; 0x4afa <mousekey_param_dec+0x10>
    4af0:	81 30       	cpi	r24, 0x01	; 1
    4af2:	59 f0       	breq	.+22     	; 0x4b0a <mousekey_param_dec+0x20>
    4af4:	82 30       	cpi	r24, 0x02	; 2
    4af6:	d1 f0       	breq	.+52     	; 0x4b2c <mousekey_param_dec+0x42>
    4af8:	08 95       	ret
    4afa:	85 30       	cpi	r24, 0x05	; 5
    4afc:	09 f4       	brne	.+2      	; 0x4b00 <mousekey_param_dec+0x16>
    4afe:	49 c0       	rjmp	.+146    	; 0x4b92 <mousekey_param_dec+0xa8>
    4b00:	b8 f1       	brcs	.+110    	; 0x4b70 <mousekey_param_dec+0x86>
    4b02:	86 30       	cpi	r24, 0x06	; 6
    4b04:	09 f4       	brne	.+2      	; 0x4b08 <mousekey_param_dec+0x1e>
    4b06:	56 c0       	rjmp	.+172    	; 0x4bb4 <mousekey_param_dec+0xca>
    4b08:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    4b0a:	80 91 14 01 	lds	r24, 0x0114
    4b0e:	68 17       	cp	r22, r24
    4b10:	20 f4       	brcc	.+8      	; 0x4b1a <mousekey_param_dec+0x30>
                mk_delay -= dec;
    4b12:	86 1b       	sub	r24, r22
    4b14:	80 93 14 01 	sts	0x0114, r24
    4b18:	02 c0       	rjmp	.+4      	; 0x4b1e <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    4b1a:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_delay);
    4b1e:	80 91 14 01 	lds	r24, 0x0114
    4b22:	1f 92       	push	r1
    4b24:	8f 93       	push	r24
    4b26:	8a ed       	ldi	r24, 0xDA	; 218
    4b28:	96 e0       	ldi	r25, 0x06	; 6
    4b2a:	54 c0       	rjmp	.+168    	; 0x4bd4 <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    4b2c:	80 91 13 01 	lds	r24, 0x0113
    4b30:	68 17       	cp	r22, r24
    4b32:	20 f4       	brcc	.+8      	; 0x4b3c <mousekey_param_dec+0x52>
                mk_interval -= dec;
    4b34:	86 1b       	sub	r24, r22
    4b36:	80 93 13 01 	sts	0x0113, r24
    4b3a:	02 c0       	rjmp	.+4      	; 0x4b40 <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    4b3c:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_interval);
    4b40:	80 91 13 01 	lds	r24, 0x0113
    4b44:	1f 92       	push	r1
    4b46:	8f 93       	push	r24
    4b48:	88 ec       	ldi	r24, 0xC8	; 200
    4b4a:	96 e0       	ldi	r25, 0x06	; 6
    4b4c:	43 c0       	rjmp	.+134    	; 0x4bd4 <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    4b4e:	80 91 12 01 	lds	r24, 0x0112
    4b52:	68 17       	cp	r22, r24
    4b54:	20 f4       	brcc	.+8      	; 0x4b5e <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    4b56:	86 1b       	sub	r24, r22
    4b58:	80 93 12 01 	sts	0x0112, r24
    4b5c:	02 c0       	rjmp	.+4      	; 0x4b62 <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    4b5e:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_max_speed);
    4b62:	80 91 12 01 	lds	r24, 0x0112
    4b66:	1f 92       	push	r1
    4b68:	8f 93       	push	r24
    4b6a:	85 eb       	ldi	r24, 0xB5	; 181
    4b6c:	96 e0       	ldi	r25, 0x06	; 6
    4b6e:	32 c0       	rjmp	.+100    	; 0x4bd4 <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4b70:	80 91 11 01 	lds	r24, 0x0111
    4b74:	68 17       	cp	r22, r24
    4b76:	20 f4       	brcc	.+8      	; 0x4b80 <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    4b78:	86 1b       	sub	r24, r22
    4b7a:	80 93 11 01 	sts	0x0111, r24
    4b7e:	02 c0       	rjmp	.+4      	; 0x4b84 <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    4b80:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_time_to_max);
    4b84:	80 91 11 01 	lds	r24, 0x0111
    4b88:	1f 92       	push	r1
    4b8a:	8f 93       	push	r24
    4b8c:	80 ea       	ldi	r24, 0xA0	; 160
    4b8e:	96 e0       	ldi	r25, 0x06	; 6
    4b90:	21 c0       	rjmp	.+66     	; 0x4bd4 <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4b92:	80 91 10 01 	lds	r24, 0x0110
    4b96:	68 17       	cp	r22, r24
    4b98:	20 f4       	brcc	.+8      	; 0x4ba2 <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    4b9a:	86 1b       	sub	r24, r22
    4b9c:	80 93 10 01 	sts	0x0110, r24
    4ba0:	02 c0       	rjmp	.+4      	; 0x4ba6 <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    4ba2:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4ba6:	80 91 10 01 	lds	r24, 0x0110
    4baa:	1f 92       	push	r1
    4bac:	8f 93       	push	r24
    4bae:	87 e8       	ldi	r24, 0x87	; 135
    4bb0:	96 e0       	ldi	r25, 0x06	; 6
    4bb2:	10 c0       	rjmp	.+32     	; 0x4bd4 <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4bb4:	80 91 0f 01 	lds	r24, 0x010F
    4bb8:	68 17       	cp	r22, r24
    4bba:	20 f4       	brcc	.+8      	; 0x4bc4 <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    4bbc:	86 1b       	sub	r24, r22
    4bbe:	80 93 0f 01 	sts	0x010F, r24
    4bc2:	02 c0       	rjmp	.+4      	; 0x4bc8 <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    4bc4:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4bc8:	80 91 0f 01 	lds	r24, 0x010F
    4bcc:	1f 92       	push	r1
    4bce:	8f 93       	push	r24
    4bd0:	8c e6       	ldi	r24, 0x6C	; 108
    4bd2:	96 e0       	ldi	r25, 0x06	; 6
    4bd4:	9f 93       	push	r25
    4bd6:	8f 93       	push	r24
    4bd8:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
            break;
    4bdc:	0f 90       	pop	r0
    4bde:	0f 90       	pop	r0
    4be0:	0f 90       	pop	r0
    4be2:	0f 90       	pop	r0
    4be4:	08 95       	ret

00004be6 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4be6:	cf 93       	push	r28
    4be8:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4bea:	1f 92       	push	r1
    4bec:	8f 93       	push	r24
    4bee:	81 e7       	ldi	r24, 0x71	; 113
    4bf0:	99 e0       	ldi	r25, 0x09	; 9
    4bf2:	9f 93       	push	r25
    4bf4:	8f 93       	push	r24
    4bf6:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    default_layer_set(1UL<<layer);
    4bfa:	81 e0       	ldi	r24, 0x01	; 1
    4bfc:	90 e0       	ldi	r25, 0x00	; 0
    4bfe:	a0 e0       	ldi	r26, 0x00	; 0
    4c00:	b0 e0       	ldi	r27, 0x00	; 0
    4c02:	bc 01       	movw	r22, r24
    4c04:	cd 01       	movw	r24, r26
    4c06:	04 c0       	rjmp	.+8      	; 0x4c10 <switch_default_layer+0x2a>
    4c08:	66 0f       	add	r22, r22
    4c0a:	77 1f       	adc	r23, r23
    4c0c:	88 1f       	adc	r24, r24
    4c0e:	99 1f       	adc	r25, r25
    4c10:	ca 95       	dec	r28
    4c12:	d2 f7       	brpl	.-12     	; 0x4c08 <switch_default_layer+0x22>
    4c14:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <default_layer_set>
    clear_keyboard();
    4c18:	0f 90       	pop	r0
    4c1a:	0f 90       	pop	r0
    4c1c:	0f 90       	pop	r0
    4c1e:	0f 90       	pop	r0
}
    4c20:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4c22:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <clear_keyboard>

00004c26 <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4c26:	cf 93       	push	r28
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4c28:	8b 31       	cpi	r24, 0x1B	; 27
    4c2a:	09 f4       	brne	.+2      	; 0x4c2e <command_common+0x8>
    4c2c:	cb c1       	rjmp	.+918    	; 0x4fc4 <command_common+0x39e>
    4c2e:	08 f0       	brcs	.+2      	; 0x4c32 <command_common+0xc>
    4c30:	49 c0       	rjmp	.+146    	; 0x4cc4 <command_common+0x9e>
    4c32:	8e 30       	cpi	r24, 0x0E	; 14
    4c34:	09 f4       	brne	.+2      	; 0x4c38 <command_common+0x12>
    4c36:	da c1       	rjmp	.+948    	; 0x4fec <command_common+0x3c6>
    4c38:	00 f5       	brcc	.+64     	; 0x4c7a <command_common+0x54>
    4c3a:	87 30       	cpi	r24, 0x07	; 7
    4c3c:	09 f4       	brne	.+2      	; 0x4c40 <command_common+0x1a>
    4c3e:	a9 c1       	rjmp	.+850    	; 0x4f92 <command_common+0x36c>
    4c40:	a8 f4       	brcc	.+42     	; 0x4c6c <command_common+0x46>
    4c42:	86 30       	cpi	r24, 0x06	; 6
    4c44:	09 f0       	breq	.+2      	; 0x4c48 <command_common+0x22>
    4c46:	5a c2       	rjmp	.+1204   	; 0x50fc <command_common+0x4d6>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    4c48:	80 91 c7 01 	lds	r24, 0x01C7
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    4c4c:	81 7f       	andi	r24, 0xF1	; 241
    4c4e:	8e 7f       	andi	r24, 0xFE	; 254
    4c50:	80 93 c7 01 	sts	0x01C7, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4c54:	86 e7       	ldi	r24, 0x76	; 118
    4c56:	99 e0       	ldi	r25, 0x09	; 9
    4c58:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    4c5c:	80 e9       	ldi	r24, 0x90	; 144
    4c5e:	9d e0       	ldi	r25, 0x0D	; 13
    4c60:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
            command_state = CONSOLE;
    4c64:	81 e0       	ldi	r24, 0x01	; 1
    4c66:	80 93 d7 01 	sts	0x01D7, r24
    4c6a:	91 c1       	rjmp	.+802    	; 0x4f8e <command_common+0x368>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4c6c:	88 30       	cpi	r24, 0x08	; 8
    4c6e:	09 f4       	brne	.+2      	; 0x4c72 <command_common+0x4c>
    4c70:	5b c0       	rjmp	.+182    	; 0x4d28 <command_common+0x102>
    4c72:	8b 30       	cpi	r24, 0x0B	; 11
    4c74:	09 f4       	brne	.+2      	; 0x4c78 <command_common+0x52>
    4c76:	87 c1       	rjmp	.+782    	; 0x4f86 <command_common+0x360>
    4c78:	41 c2       	rjmp	.+1154   	; 0x50fc <command_common+0x4d6>
    4c7a:	81 31       	cpi	r24, 0x11	; 17
    4c7c:	09 f4       	brne	.+2      	; 0x4c80 <command_common+0x5a>
    4c7e:	26 c2       	rjmp	.+1100   	; 0x50cc <command_common+0x4a6>
    4c80:	20 f4       	brcc	.+8      	; 0x4c8a <command_common+0x64>
    4c82:	80 31       	cpi	r24, 0x10	; 16
    4c84:	09 f4       	brne	.+2      	; 0x4c88 <command_common+0x62>
    4c86:	c6 c1       	rjmp	.+908    	; 0x5014 <command_common+0x3ee>
    4c88:	39 c2       	rjmp	.+1138   	; 0x50fc <command_common+0x4d6>
    4c8a:	86 31       	cpi	r24, 0x16	; 22
    4c8c:	09 f4       	brne	.+2      	; 0x4c90 <command_common+0x6a>
    4c8e:	dd c1       	rjmp	.+954    	; 0x504a <command_common+0x424>
    4c90:	89 31       	cpi	r24, 0x19	; 25
    4c92:	09 f0       	breq	.+2      	; 0x4c96 <command_common+0x70>
    4c94:	33 c2       	rjmp	.+1126   	; 0x50fc <command_common+0x4d6>
            } else {
                print("\nmouse: off\n");
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    4c96:	84 e0       	ldi	r24, 0x04	; 4
    4c98:	9d e0       	ldi	r25, 0x0D	; 13
    4c9a:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4c9e:	8d ee       	ldi	r24, 0xED	; 237
    4ca0:	9c e0       	ldi	r25, 0x0C	; 12
    4ca2:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4ca6:	83 eb       	ldi	r24, 0xB3	; 179
    4ca8:	9c e0       	ldi	r25, 0x0C	; 12
    4caa:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4cae:	8c e8       	ldi	r24, 0x8C	; 140
    4cb0:	9c e0       	ldi	r25, 0x0C	; 12
    4cb2:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
            /* build options */
            print("OPTIONS:"
    4cb6:	87 e4       	ldi	r24, 0x47	; 71
    4cb8:	9c e0       	ldi	r25, 0x0C	; 12
    4cba:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4cbe:	88 e1       	ldi	r24, 0x18	; 24
    4cc0:	9c e0       	ldi	r25, 0x0C	; 12
    4cc2:	63 c1       	rjmp	.+710    	; 0x4f8a <command_common+0x364>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4cc4:	85 33       	cpi	r24, 0x35	; 53
    4cc6:	09 f4       	brne	.+2      	; 0x4cca <command_common+0xa4>
    4cc8:	13 c2       	rjmp	.+1062   	; 0x50f0 <command_common+0x4ca>
    4cca:	68 f4       	brcc	.+26     	; 0x4ce6 <command_common+0xc0>
    4ccc:	87 32       	cpi	r24, 0x27	; 39
    4cce:	09 f4       	brne	.+2      	; 0x4cd2 <command_common+0xac>
    4cd0:	0f c2       	rjmp	.+1054   	; 0x50f0 <command_common+0x4ca>
    4cd2:	28 f4       	brcc	.+10     	; 0x4cde <command_common+0xb8>
    4cd4:	8e 31       	cpi	r24, 0x1E	; 30
    4cd6:	08 f4       	brcc	.+2      	; 0x4cda <command_common+0xb4>
    4cd8:	11 c2       	rjmp	.+1058   	; 0x50fc <command_common+0x4d6>
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    4cda:	8d 51       	subi	r24, 0x1D	; 29
    4cdc:	0c c2       	rjmp	.+1048   	; 0x50f6 <command_common+0x4d0>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4cde:	89 32       	cpi	r24, 0x29	; 41
    4ce0:	09 f4       	brne	.+2      	; 0x4ce4 <command_common+0xbe>
    4ce2:	06 c2       	rjmp	.+1036   	; 0x50f0 <command_common+0x4ca>
    4ce4:	0b c2       	rjmp	.+1046   	; 0x50fc <command_common+0x4d6>
    4ce6:	83 34       	cpi	r24, 0x43	; 67
    4ce8:	38 f4       	brcc	.+14     	; 0x4cf8 <command_common+0xd2>
    4cea:	8a 33       	cpi	r24, 0x3A	; 58
    4cec:	08 f0       	brcs	.+2      	; 0x4cf0 <command_common+0xca>
    4cee:	02 c2       	rjmp	.+1028   	; 0x50f4 <command_common+0x4ce>
    4cf0:	88 33       	cpi	r24, 0x38	; 56
    4cf2:	09 f4       	brne	.+2      	; 0x4cf6 <command_common+0xd0>
    4cf4:	48 c1       	rjmp	.+656    	; 0x4f86 <command_common+0x360>
    4cf6:	02 c2       	rjmp	.+1028   	; 0x50fc <command_common+0x4d6>
    4cf8:	83 34       	cpi	r24, 0x43	; 67
    4cfa:	09 f4       	brne	.+2      	; 0x4cfe <command_common+0xd8>
    4cfc:	f9 c1       	rjmp	.+1010   	; 0x50f0 <command_common+0x4ca>
    4cfe:	88 34       	cpi	r24, 0x48	; 72
    4d00:	09 f0       	breq	.+2      	; 0x4d04 <command_common+0xde>
    4d02:	fc c1       	rjmp	.+1016   	; 0x50fc <command_common+0x4d6>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    4d04:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <clear_keyboard>
            print("\n\nbootloader... ");
    4d08:	8f e7       	ldi	r24, 0x7F	; 127
    4d0a:	9d e0       	ldi	r25, 0x0D	; 13
    4d0c:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    4d10:	9f ef       	ldi	r25, 0xFF	; 255
    4d12:	23 ed       	ldi	r18, 0xD3	; 211
    4d14:	80 e3       	ldi	r24, 0x30	; 48
    4d16:	91 50       	subi	r25, 0x01	; 1
    4d18:	20 40       	sbci	r18, 0x00	; 0
    4d1a:	80 40       	sbci	r24, 0x00	; 0
    4d1c:	e1 f7       	brne	.-8      	; 0x4d16 <command_common+0xf0>
    4d1e:	00 c0       	rjmp	.+0      	; 0x4d20 <command_common+0xfa>
    4d20:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    4d22:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <bootloader_jump>
    4d26:	33 c1       	rjmp	.+614    	; 0x4f8e <command_common+0x368>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4d28:	84 e9       	ldi	r24, 0x94	; 148
    4d2a:	9d e0       	ldi	r25, 0x0D	; 13
    4d2c:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4d30:	85 e7       	ldi	r24, 0x75	; 117
    4d32:	9b e0       	ldi	r25, 0x0B	; 11
    4d34:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    4d38:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <eeconfig_read_default_layer>
    4d3c:	1f 92       	push	r1
    4d3e:	8f 93       	push	r24
    4d40:	82 e7       	ldi	r24, 0x72	; 114
    4d42:	9b e0       	ldi	r25, 0x0B	; 11
    4d44:	9f 93       	push	r25
    4d46:	8f 93       	push	r24
    4d48:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    4d4c:	80 e7       	ldi	r24, 0x70	; 112
    4d4e:	9b e0       	ldi	r25, 0x0B	; 11
    4d50:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4d54:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <eeconfig_read_debug>
    4d58:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4d5a:	8d e5       	ldi	r24, 0x5D	; 93
    4d5c:	9b e0       	ldi	r25, 0x0B	; 11
    4d5e:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    4d62:	1f 92       	push	r1
    4d64:	cf 93       	push	r28
    4d66:	88 e5       	ldi	r24, 0x58	; 88
    4d68:	9b e0       	ldi	r25, 0x0B	; 11
    4d6a:	9f 93       	push	r25
    4d6c:	8f 93       	push	r24
    4d6e:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    4d72:	86 e5       	ldi	r24, 0x56	; 86
    4d74:	9b e0       	ldi	r25, 0x0B	; 11
    4d76:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4d7a:	8c e4       	ldi	r24, 0x4C	; 76
    4d7c:	9b e0       	ldi	r25, 0x0B	; 11
    4d7e:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    4d82:	8c 2f       	mov	r24, r28
    4d84:	81 70       	andi	r24, 0x01	; 1
    4d86:	1f 92       	push	r1
    4d88:	8f 93       	push	r24
    4d8a:	89 e4       	ldi	r24, 0x49	; 73
    4d8c:	9b e0       	ldi	r25, 0x0B	; 11
    4d8e:	9f 93       	push	r25
    4d90:	8f 93       	push	r24
    4d92:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    4d96:	87 e4       	ldi	r24, 0x47	; 71
    4d98:	9b e0       	ldi	r25, 0x0B	; 11
    4d9a:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4d9e:	8d e3       	ldi	r24, 0x3D	; 61
    4da0:	9b e0       	ldi	r25, 0x0B	; 11
    4da2:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    4da6:	c1 fb       	bst	r28, 1
    4da8:	88 27       	eor	r24, r24
    4daa:	80 f9       	bld	r24, 0
    4dac:	1f 92       	push	r1
    4dae:	8f 93       	push	r24
    4db0:	8a e3       	ldi	r24, 0x3A	; 58
    4db2:	9b e0       	ldi	r25, 0x0B	; 11
    4db4:	9f 93       	push	r25
    4db6:	8f 93       	push	r24
    4db8:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    4dbc:	88 e3       	ldi	r24, 0x38	; 56
    4dbe:	9b e0       	ldi	r25, 0x0B	; 11
    4dc0:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4dc4:	8c e2       	ldi	r24, 0x2C	; 44
    4dc6:	9b e0       	ldi	r25, 0x0B	; 11
    4dc8:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    4dcc:	c2 fb       	bst	r28, 2
    4dce:	88 27       	eor	r24, r24
    4dd0:	80 f9       	bld	r24, 0
    4dd2:	1f 92       	push	r1
    4dd4:	8f 93       	push	r24
    4dd6:	89 e2       	ldi	r24, 0x29	; 41
    4dd8:	9b e0       	ldi	r25, 0x0B	; 11
    4dda:	9f 93       	push	r25
    4ddc:	8f 93       	push	r24
    4dde:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    4de2:	87 e2       	ldi	r24, 0x27	; 39
    4de4:	9b e0       	ldi	r25, 0x0B	; 11
    4de6:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4dea:	8e e1       	ldi	r24, 0x1E	; 30
    4dec:	9b e0       	ldi	r25, 0x0B	; 11
    4dee:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    4df2:	c3 fb       	bst	r28, 3
    4df4:	cc 27       	eor	r28, r28
    4df6:	c0 f9       	bld	r28, 0
    4df8:	1f 92       	push	r1
    4dfa:	cf 93       	push	r28
    4dfc:	8b e1       	ldi	r24, 0x1B	; 27
    4dfe:	9b e0       	ldi	r25, 0x0B	; 11
    4e00:	9f 93       	push	r25
    4e02:	8f 93       	push	r24
    4e04:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    4e08:	89 e1       	ldi	r24, 0x19	; 25
    4e0a:	9b e0       	ldi	r25, 0x0B	; 11
    4e0c:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4e10:	0e 94 05 22 	call	0x440a	; 0x440a <eeconfig_read_keymap>
    4e14:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4e16:	85 e0       	ldi	r24, 0x05	; 5
    4e18:	9b e0       	ldi	r25, 0x0B	; 11
    4e1a:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    4e1e:	1f 92       	push	r1
    4e20:	cf 93       	push	r28
    4e22:	80 e0       	ldi	r24, 0x00	; 0
    4e24:	9b e0       	ldi	r25, 0x0B	; 11
    4e26:	9f 93       	push	r25
    4e28:	8f 93       	push	r24
    4e2a:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    4e2e:	8e ef       	ldi	r24, 0xFE	; 254
    4e30:	9a e0       	ldi	r25, 0x0A	; 10
    4e32:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4e36:	85 ee       	ldi	r24, 0xE5	; 229
    4e38:	9a e0       	ldi	r25, 0x0A	; 10
    4e3a:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    4e3e:	8c 2f       	mov	r24, r28
    4e40:	81 70       	andi	r24, 0x01	; 1
    4e42:	1f 92       	push	r1
    4e44:	8f 93       	push	r24
    4e46:	82 ee       	ldi	r24, 0xE2	; 226
    4e48:	9a e0       	ldi	r25, 0x0A	; 10
    4e4a:	9f 93       	push	r25
    4e4c:	8f 93       	push	r24
    4e4e:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    4e52:	8d b7       	in	r24, 0x3d	; 61
    4e54:	9e b7       	in	r25, 0x3e	; 62
    4e56:	80 96       	adiw	r24, 0x20	; 32
    4e58:	0f b6       	in	r0, 0x3f	; 63
    4e5a:	f8 94       	cli
    4e5c:	9e bf       	out	0x3e, r25	; 62
    4e5e:	0f be       	out	0x3f, r0	; 63
    4e60:	8d bf       	out	0x3d, r24	; 61
    4e62:	80 ee       	ldi	r24, 0xE0	; 224
    4e64:	9a e0       	ldi	r25, 0x0A	; 10
    4e66:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4e6a:	89 ec       	ldi	r24, 0xC9	; 201
    4e6c:	9a e0       	ldi	r25, 0x0A	; 10
    4e6e:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    4e72:	c1 fb       	bst	r28, 1
    4e74:	88 27       	eor	r24, r24
    4e76:	80 f9       	bld	r24, 0
    4e78:	1f 92       	push	r1
    4e7a:	8f 93       	push	r24
    4e7c:	86 ec       	ldi	r24, 0xC6	; 198
    4e7e:	9a e0       	ldi	r25, 0x0A	; 10
    4e80:	9f 93       	push	r25
    4e82:	8f 93       	push	r24
    4e84:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    4e88:	84 ec       	ldi	r24, 0xC4	; 196
    4e8a:	9a e0       	ldi	r25, 0x0A	; 10
    4e8c:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4e90:	82 eb       	ldi	r24, 0xB2	; 178
    4e92:	9a e0       	ldi	r25, 0x0A	; 10
    4e94:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    4e98:	c2 fb       	bst	r28, 2
    4e9a:	88 27       	eor	r24, r24
    4e9c:	80 f9       	bld	r24, 0
    4e9e:	1f 92       	push	r1
    4ea0:	8f 93       	push	r24
    4ea2:	8f ea       	ldi	r24, 0xAF	; 175
    4ea4:	9a e0       	ldi	r25, 0x0A	; 10
    4ea6:	9f 93       	push	r25
    4ea8:	8f 93       	push	r24
    4eaa:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    4eae:	8d ea       	ldi	r24, 0xAD	; 173
    4eb0:	9a e0       	ldi	r25, 0x0A	; 10
    4eb2:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4eb6:	8b e9       	ldi	r24, 0x9B	; 155
    4eb8:	9a e0       	ldi	r25, 0x0A	; 10
    4eba:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    4ebe:	c3 fb       	bst	r28, 3
    4ec0:	88 27       	eor	r24, r24
    4ec2:	80 f9       	bld	r24, 0
    4ec4:	1f 92       	push	r1
    4ec6:	8f 93       	push	r24
    4ec8:	88 e9       	ldi	r24, 0x98	; 152
    4eca:	9a e0       	ldi	r25, 0x0A	; 10
    4ecc:	9f 93       	push	r25
    4ece:	8f 93       	push	r24
    4ed0:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    4ed4:	86 e9       	ldi	r24, 0x96	; 150
    4ed6:	9a e0       	ldi	r25, 0x0A	; 10
    4ed8:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4edc:	8c e8       	ldi	r24, 0x8C	; 140
    4ede:	9a e0       	ldi	r25, 0x0A	; 10
    4ee0:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    4ee4:	c4 fb       	bst	r28, 4
    4ee6:	88 27       	eor	r24, r24
    4ee8:	80 f9       	bld	r24, 0
    4eea:	1f 92       	push	r1
    4eec:	8f 93       	push	r24
    4eee:	89 e8       	ldi	r24, 0x89	; 137
    4ef0:	9a e0       	ldi	r25, 0x0A	; 10
    4ef2:	9f 93       	push	r25
    4ef4:	8f 93       	push	r24
    4ef6:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    4efa:	87 e8       	ldi	r24, 0x87	; 135
    4efc:	9a e0       	ldi	r25, 0x0A	; 10
    4efe:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4f02:	85 e7       	ldi	r24, 0x75	; 117
    4f04:	9a e0       	ldi	r25, 0x0A	; 10
    4f06:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    4f0a:	c5 fb       	bst	r28, 5
    4f0c:	88 27       	eor	r24, r24
    4f0e:	80 f9       	bld	r24, 0
    4f10:	1f 92       	push	r1
    4f12:	8f 93       	push	r24
    4f14:	82 e7       	ldi	r24, 0x72	; 114
    4f16:	9a e0       	ldi	r25, 0x0A	; 10
    4f18:	9f 93       	push	r25
    4f1a:	8f 93       	push	r24
    4f1c:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    4f20:	80 e7       	ldi	r24, 0x70	; 112
    4f22:	9a e0       	ldi	r25, 0x0A	; 10
    4f24:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4f28:	84 e5       	ldi	r24, 0x54	; 84
    4f2a:	9a e0       	ldi	r25, 0x0A	; 10
    4f2c:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    4f30:	c6 fb       	bst	r28, 6
    4f32:	88 27       	eor	r24, r24
    4f34:	80 f9       	bld	r24, 0
    4f36:	1f 92       	push	r1
    4f38:	8f 93       	push	r24
    4f3a:	81 e5       	ldi	r24, 0x51	; 81
    4f3c:	9a e0       	ldi	r25, 0x0A	; 10
    4f3e:	9f 93       	push	r25
    4f40:	8f 93       	push	r24
    4f42:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    4f46:	8f e4       	ldi	r24, 0x4F	; 79
    4f48:	9a e0       	ldi	r25, 0x0A	; 10
    4f4a:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4f4e:	87 e4       	ldi	r24, 0x47	; 71
    4f50:	9a e0       	ldi	r25, 0x0A	; 10
    4f52:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    4f56:	c7 fb       	bst	r28, 7
    4f58:	cc 27       	eor	r28, r28
    4f5a:	c0 f9       	bld	r28, 0
    4f5c:	1f 92       	push	r1
    4f5e:	cf 93       	push	r28
    4f60:	84 e4       	ldi	r24, 0x44	; 68
    4f62:	9a e0       	ldi	r25, 0x0A	; 10
    4f64:	9f 93       	push	r25
    4f66:	8f 93       	push	r24
    4f68:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    4f6c:	82 e4       	ldi	r24, 0x42	; 66
    4f6e:	9a e0       	ldi	r25, 0x0A	; 10
    4f70:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    4f74:	8d b7       	in	r24, 0x3d	; 61
    4f76:	9e b7       	in	r25, 0x3e	; 62
    4f78:	4c 96       	adiw	r24, 0x1c	; 28
    4f7a:	0f b6       	in	r0, 0x3f	; 63
    4f7c:	f8 94       	cli
    4f7e:	9e bf       	out	0x3e, r25	; 62
    4f80:	0f be       	out	0x3f, r0	; 63
    4f82:	8d bf       	out	0x3d, r24	; 61
    4f84:	04 c0       	rjmp	.+8      	; 0x4f8e <command_common+0x368>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4f86:	8d e9       	ldi	r24, 0x9D	; 157
    4f88:	99 e0       	ldi	r25, 0x09	; 9
    4f8a:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4f8e:	c1 e0       	ldi	r28, 0x01	; 1
    4f90:	ba c0       	rjmp	.+372    	; 0x5106 <command_common+0x4e0>
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4f92:	80 91 c7 01 	lds	r24, 0x01C7
    4f96:	c8 2f       	mov	r28, r24
    4f98:	c1 70       	andi	r28, 0x01	; 1
    4f9a:	80 ff       	sbrs	r24, 0
    4f9c:	09 c0       	rjmp	.+18     	; 0x4fb0 <command_common+0x38a>
                print("\ndebug: off\n");
    4f9e:	82 e7       	ldi	r24, 0x72	; 114
    4fa0:	9d e0       	ldi	r25, 0x0D	; 13
    4fa2:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
                debug_matrix   = false;
    4fa6:	80 91 c7 01 	lds	r24, 0x01C7
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4faa:	81 7f       	andi	r24, 0xF1	; 241
    4fac:	8e 7f       	andi	r24, 0xFE	; 254
    4fae:	47 c0       	rjmp	.+142    	; 0x503e <command_common+0x418>
            } else {
                print("\ndebug: on\n");
    4fb0:	86 e6       	ldi	r24, 0x66	; 102
    4fb2:	9d e0       	ldi	r25, 0x0D	; 13
    4fb4:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
                debug_enable   = true;
    4fb8:	80 91 c7 01 	lds	r24, 0x01C7
    4fbc:	81 60       	ori	r24, 0x01	; 1
    4fbe:	80 93 c7 01 	sts	0x01C7, r24
    4fc2:	e5 cf       	rjmp	.-54     	; 0x4f8e <command_common+0x368>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4fc4:	90 91 c7 01 	lds	r25, 0x01C7
    4fc8:	91 fb       	bst	r25, 1
    4fca:	cc 27       	eor	r28, r28
    4fcc:	c0 f9       	bld	r28, 0
    4fce:	81 e0       	ldi	r24, 0x01	; 1
    4fd0:	c8 27       	eor	r28, r24
    4fd2:	89 2f       	mov	r24, r25
    4fd4:	c0 fb       	bst	r28, 0
    4fd6:	81 f9       	bld	r24, 1
    4fd8:	80 93 c7 01 	sts	0x01C7, r24
            if (debug_matrix) {
    4fdc:	cc 23       	and	r28, r28
    4fde:	19 f0       	breq	.+6      	; 0x4fe6 <command_common+0x3c0>
                print("\nmatrix: on\n");
    4fe0:	89 e5       	ldi	r24, 0x59	; 89
    4fe2:	9d e0       	ldi	r25, 0x0D	; 13
    4fe4:	27 c0       	rjmp	.+78     	; 0x5034 <command_common+0x40e>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4fe6:	8b e4       	ldi	r24, 0x4B	; 75
    4fe8:	9d e0       	ldi	r25, 0x0D	; 13
    4fea:	cf cf       	rjmp	.-98     	; 0x4f8a <command_common+0x364>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    4fec:	90 91 c7 01 	lds	r25, 0x01C7
    4ff0:	92 fb       	bst	r25, 2
    4ff2:	cc 27       	eor	r28, r28
    4ff4:	c0 f9       	bld	r28, 0
    4ff6:	81 e0       	ldi	r24, 0x01	; 1
    4ff8:	c8 27       	eor	r28, r24
    4ffa:	89 2f       	mov	r24, r25
    4ffc:	c0 fb       	bst	r28, 0
    4ffe:	82 f9       	bld	r24, 2
    5000:	80 93 c7 01 	sts	0x01C7, r24
            if (debug_keyboard) {
    5004:	cc 23       	and	r28, r28
    5006:	19 f0       	breq	.+6      	; 0x500e <command_common+0x3e8>
                print("\nkeyboard: on\n");
    5008:	8c e3       	ldi	r24, 0x3C	; 60
    500a:	9d e0       	ldi	r25, 0x0D	; 13
    500c:	13 c0       	rjmp	.+38     	; 0x5034 <command_common+0x40e>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    500e:	8c e2       	ldi	r24, 0x2C	; 44
    5010:	9d e0       	ldi	r25, 0x0D	; 13
    5012:	bb cf       	rjmp	.-138    	; 0x4f8a <command_common+0x364>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    5014:	90 91 c7 01 	lds	r25, 0x01C7
    5018:	93 fb       	bst	r25, 3
    501a:	cc 27       	eor	r28, r28
    501c:	c0 f9       	bld	r28, 0
    501e:	81 e0       	ldi	r24, 0x01	; 1
    5020:	c8 27       	eor	r28, r24
    5022:	89 2f       	mov	r24, r25
    5024:	c0 fb       	bst	r28, 0
    5026:	83 f9       	bld	r24, 3
    5028:	80 93 c7 01 	sts	0x01C7, r24
            if (debug_mouse) {
    502c:	cc 23       	and	r28, r28
    502e:	51 f0       	breq	.+20     	; 0x5044 <command_common+0x41e>
                print("\nmouse: on\n");
    5030:	80 e2       	ldi	r24, 0x20	; 32
    5032:	9d e0       	ldi	r25, 0x0D	; 13
    5034:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
                debug_enable = true;
    5038:	80 91 c7 01 	lds	r24, 0x01C7
    503c:	81 60       	ori	r24, 0x01	; 1
    503e:	80 93 c7 01 	sts	0x01C7, r24
    5042:	61 c0       	rjmp	.+194    	; 0x5106 <command_common+0x4e0>
            } else {
                print("\nmouse: off\n");
    5044:	83 e1       	ldi	r24, 0x13	; 19
    5046:	9d e0       	ldi	r25, 0x0D	; 13
    5048:	a0 cf       	rjmp	.-192    	; 0x4f8a <command_common+0x364>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    504a:	8a e0       	ldi	r24, 0x0A	; 10
    504c:	9c e0       	ldi	r25, 0x0C	; 12
    504e:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
            print_val_hex8(host_keyboard_leds());
    5052:	0e 94 8a 11 	call	0x2314	; 0x2314 <host_keyboard_leds>
    5056:	1f 92       	push	r1
    5058:	8f 93       	push	r24
    505a:	80 ef       	ldi	r24, 0xF0	; 240
    505c:	9b e0       	ldi	r25, 0x0B	; 11
    505e:	9f 93       	push	r25
    5060:	8f 93       	push	r24
    5062:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
            print_val_hex8(keyboard_protocol);
    5066:	80 91 0b 01 	lds	r24, 0x010B
    506a:	1f 92       	push	r1
    506c:	8f 93       	push	r24
    506e:	89 ed       	ldi	r24, 0xD9	; 217
    5070:	9b e0       	ldi	r25, 0x0B	; 11
    5072:	9f 93       	push	r25
    5074:	8f 93       	push	r24
    5076:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
            print_val_hex8(keyboard_idle);
    507a:	80 91 62 01 	lds	r24, 0x0162
    507e:	1f 92       	push	r1
    5080:	8f 93       	push	r24
    5082:	86 ec       	ldi	r24, 0xC6	; 198
    5084:	9b e0       	ldi	r25, 0x0B	; 11
    5086:	9f 93       	push	r25
    5088:	8f 93       	push	r24
    508a:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    508e:	80 91 0c 01 	lds	r24, 0x010C
    5092:	1f 92       	push	r1
    5094:	8f 93       	push	r24
    5096:	83 eb       	ldi	r24, 0xB3	; 179
    5098:	9b e0       	ldi	r25, 0x0B	; 11
    509a:	9f 93       	push	r25
    509c:	8f 93       	push	r24
    509e:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
#endif
            print_val_hex32(timer_read32());
    50a2:	0e 94 76 1e 	call	0x3cec	; 0x3cec <timer_read32>
    50a6:	9f 93       	push	r25
    50a8:	8f 93       	push	r24
    50aa:	7f 93       	push	r23
    50ac:	6f 93       	push	r22
    50ae:	8c e9       	ldi	r24, 0x9C	; 156
    50b0:	9b e0       	ldi	r25, 0x0B	; 11
    50b2:	9f 93       	push	r25
    50b4:	8f 93       	push	r24
    50b6:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    50ba:	8d b7       	in	r24, 0x3d	; 61
    50bc:	9e b7       	in	r25, 0x3e	; 62
    50be:	46 96       	adiw	r24, 0x16	; 22
    50c0:	0f b6       	in	r0, 0x3f	; 63
    50c2:	f8 94       	cli
    50c4:	9e bf       	out	0x3e, r25	; 62
    50c6:	0f be       	out	0x3f, r0	; 63
    50c8:	8d bf       	out	0x3d, r24	; 61
    50ca:	61 cf       	rjmp	.-318    	; 0x4f8e <command_common+0x368>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    50cc:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    50d0:	c0 91 0c 01 	lds	r28, 0x010C
    50d4:	81 e0       	ldi	r24, 0x01	; 1
    50d6:	c8 27       	eor	r28, r24
    50d8:	c0 93 0c 01 	sts	0x010C, r28
            if (keyboard_nkro) {
    50dc:	cc 23       	and	r28, r28
    50de:	29 f0       	breq	.+10     	; 0x50ea <command_common+0x4c4>
                print("NKRO: on\n");
    50e0:	82 e9       	ldi	r24, 0x92	; 146
    50e2:	9b e0       	ldi	r25, 0x0B	; 11
    50e4:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    50e8:	0e c0       	rjmp	.+28     	; 0x5106 <command_common+0x4e0>
            } else {
                print("NKRO: off\n");
    50ea:	87 e8       	ldi	r24, 0x87	; 135
    50ec:	9b e0       	ldi	r25, 0x0B	; 11
    50ee:	4d cf       	rjmp	.-358    	; 0x4f8a <command_common+0x364>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    50f0:	80 e0       	ldi	r24, 0x00	; 0
    50f2:	01 c0       	rjmp	.+2      	; 0x50f6 <command_common+0x4d0>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    50f4:	89 53       	subi	r24, 0x39	; 57
    50f6:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <switch_default_layer>
    50fa:	49 cf       	rjmp	.-366    	; 0x4f8e <command_common+0x368>
            break;
        default:
            print("?");
    50fc:	85 e8       	ldi	r24, 0x85	; 133
    50fe:	9b e0       	ldi	r25, 0x0B	; 11
    5100:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
            return false;
    5104:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    5106:	8c 2f       	mov	r24, r28
    5108:	cf 91       	pop	r28
    510a:	08 95       	ret

0000510c <command_extra>:
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    (void)code;
    return false;
}
    510c:	80 e0       	ldi	r24, 0x00	; 0
    510e:	08 95       	ret

00005110 <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    5110:	80 e0       	ldi	r24, 0x00	; 0
    5112:	08 95       	ret

00005114 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    5114:	cf 93       	push	r28
    5116:	c8 2f       	mov	r28, r24
    switch (command_state) {
    5118:	80 91 d7 01 	lds	r24, 0x01D7
    511c:	81 30       	cpi	r24, 0x01	; 1
    511e:	71 f0       	breq	.+28     	; 0x513c <command_proc+0x28>
    5120:	20 f0       	brcs	.+8      	; 0x512a <command_proc+0x16>
    5122:	82 30       	cpi	r24, 0x02	; 2
    5124:	09 f4       	brne	.+2      	; 0x5128 <command_proc+0x14>
    5126:	4b c0       	rjmp	.+150    	; 0x51be <command_proc+0xaa>
    5128:	42 c1       	rjmp	.+644    	; 0x53ae <command_proc+0x29a>
        case ONESHOT:
            if (!IS_COMMAND())
    512a:	e0 91 0d 01 	lds	r30, 0x010D
    512e:	f0 91 0e 01 	lds	r31, 0x010E
    5132:	80 81       	ld	r24, Z
    5134:	82 32       	cpi	r24, 0x22	; 34
    5136:	09 f0       	breq	.+2      	; 0x513a <command_proc+0x26>
    5138:	3c c1       	rjmp	.+632    	; 0x53b2 <command_proc+0x29e>
    513a:	07 c0       	rjmp	.+14     	; 0x514a <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    513c:	e0 91 0d 01 	lds	r30, 0x010D
    5140:	f0 91 0e 01 	lds	r31, 0x010E
    5144:	80 81       	ld	r24, Z
    5146:	82 32       	cpi	r24, 0x22	; 34
    5148:	61 f4       	brne	.+24     	; 0x5162 <command_proc+0x4e>
                return (command_extra(code) || command_common(code));
    514a:	8c 2f       	mov	r24, r28
    514c:	0e 94 86 28 	call	0x510c	; 0x510c <command_extra>
    5150:	81 11       	cpse	r24, r1
    5152:	04 c0       	rjmp	.+8      	; 0x515c <command_proc+0x48>
    5154:	8c 2f       	mov	r24, r28
    5156:	0e 94 13 26 	call	0x4c26	; 0x4c26 <command_common>
    515a:	2f c0       	rjmp	.+94     	; 0x51ba <command_proc+0xa6>
    515c:	81 e0       	ldi	r24, 0x01	; 1
    515e:	90 e0       	ldi	r25, 0x00	; 0
    5160:	2c c0       	rjmp	.+88     	; 0x51ba <command_proc+0xa6>
            else
                return (command_console_extra(code) || command_console(code));
    5162:	8c 2f       	mov	r24, r28
    5164:	0e 94 88 28 	call	0x5110	; 0x5110 <command_console_extra>
    5168:	81 11       	cpse	r24, r1
    516a:	26 c0       	rjmp	.+76     	; 0x51b8 <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    516c:	c4 31       	cpi	r28, 0x14	; 20
    516e:	e1 f0       	breq	.+56     	; 0x51a8 <command_proc+0x94>
    5170:	70 f4       	brcc	.+28     	; 0x518e <command_proc+0x7a>
    5172:	cb 30       	cpi	r28, 0x0B	; 11
    5174:	81 f0       	breq	.+32     	; 0x5196 <command_proc+0x82>
    5176:	c0 31       	cpi	r28, 0x10	; 16
    5178:	d1 f4       	brne	.+52     	; 0x51ae <command_proc+0x9a>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    517a:	0e 94 bb 24 	call	0x4976	; 0x4976 <mousekey_console_help>
            print("M> ");
    517e:	89 e6       	ldi	r24, 0x69	; 105
    5180:	99 e0       	ldi	r25, 0x09	; 9
    5182:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
            command_state = MOUSEKEY;
    5186:	82 e0       	ldi	r24, 0x02	; 2
    5188:	80 93 d7 01 	sts	0x01D7, r24
    518c:	15 c0       	rjmp	.+42     	; 0x51b8 <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    518e:	c9 32       	cpi	r28, 0x29	; 41
    5190:	59 f0       	breq	.+22     	; 0x51a8 <command_proc+0x94>
    5192:	c8 33       	cpi	r28, 0x38	; 56
    5194:	61 f4       	brne	.+24     	; 0x51ae <command_proc+0x9a>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    5196:	86 e7       	ldi	r24, 0x76	; 118
    5198:	99 e0       	ldi	r25, 0x09	; 9
    519a:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    519e:	8d e6       	ldi	r24, 0x6D	; 109
    51a0:	99 e0       	ldi	r25, 0x09	; 9
    51a2:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    51a6:	08 c0       	rjmp	.+16     	; 0x51b8 <command_proc+0xa4>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    51a8:	10 92 d7 01 	sts	0x01D7, r1
    51ac:	04 c1       	rjmp	.+520    	; 0x53b6 <command_proc+0x2a2>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    51ae:	87 e6       	ldi	r24, 0x67	; 103
    51b0:	99 e0       	ldi	r25, 0x09	; 9
    51b2:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    51b6:	ff c0       	rjmp	.+510    	; 0x53b6 <command_proc+0x2a2>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    51b8:	81 e0       	ldi	r24, 0x01	; 1
    51ba:	81 70       	andi	r24, 0x01	; 1
    51bc:	fe c0       	rjmp	.+508    	; 0x53ba <command_proc+0x2a6>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    51be:	c4 32       	cpi	r28, 0x24	; 36
    51c0:	28 f5       	brcc	.+74     	; 0x520c <command_proc+0xf8>
    51c2:	ce 31       	cpi	r28, 0x1E	; 30
    51c4:	08 f0       	brcs	.+2      	; 0x51c8 <command_proc+0xb4>
    51c6:	c1 c0       	rjmp	.+386    	; 0x534a <command_proc+0x236>
    51c8:	cb 30       	cpi	r28, 0x0B	; 11
    51ca:	a1 f1       	breq	.+104    	; 0x5234 <command_proc+0x120>
    51cc:	d0 f4       	brcc	.+52     	; 0x5202 <command_proc+0xee>
    51ce:	c7 30       	cpi	r28, 0x07	; 7
    51d0:	09 f0       	breq	.+2      	; 0x51d4 <command_proc+0xc0>
    51d2:	d3 c0       	rjmp	.+422    	; 0x537a <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    51d4:	8e e1       	ldi	r24, 0x1E	; 30
    51d6:	80 93 14 01 	sts	0x0114, r24
            mk_interval = MOUSEKEY_INTERVAL;
    51da:	82 e3       	ldi	r24, 0x32	; 50
    51dc:	80 93 13 01 	sts	0x0113, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    51e0:	8a e0       	ldi	r24, 0x0A	; 10
    51e2:	80 93 12 01 	sts	0x0112, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    51e6:	84 e1       	ldi	r24, 0x14	; 20
    51e8:	80 93 11 01 	sts	0x0111, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    51ec:	88 e0       	ldi	r24, 0x08	; 8
    51ee:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    51f2:	88 e2       	ldi	r24, 0x28	; 40
    51f4:	80 93 0f 01 	sts	0x010F, r24
            print("set default\n");
    51f8:	8d e0       	ldi	r24, 0x0D	; 13
    51fa:	98 e0       	ldi	r25, 0x08	; 8
    51fc:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    5200:	bf c0       	rjmp	.+382    	; 0x5380 <command_proc+0x26c>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5202:	c3 31       	cpi	r28, 0x13	; 19
    5204:	49 f1       	breq	.+82     	; 0x5258 <command_proc+0x144>
    5206:	c4 31       	cpi	r28, 0x14	; 20
    5208:	c1 f0       	breq	.+48     	; 0x523a <command_proc+0x126>
    520a:	b7 c0       	rjmp	.+366    	; 0x537a <command_proc+0x266>
    520c:	cb 34       	cpi	r28, 0x4B	; 75
    520e:	09 f4       	brne	.+2      	; 0x5212 <command_proc+0xfe>
    5210:	a9 c0       	rjmp	.+338    	; 0x5364 <command_proc+0x250>
    5212:	28 f4       	brcc	.+10     	; 0x521e <command_proc+0x10a>
    5214:	c9 32       	cpi	r28, 0x29	; 41
    5216:	89 f0       	breq	.+34     	; 0x523a <command_proc+0x126>
    5218:	c8 33       	cpi	r28, 0x38	; 56
    521a:	61 f0       	breq	.+24     	; 0x5234 <command_proc+0x120>
    521c:	ae c0       	rjmp	.+348    	; 0x537a <command_proc+0x266>
    521e:	c1 35       	cpi	r28, 0x51	; 81
    5220:	09 f4       	brne	.+2      	; 0x5224 <command_proc+0x110>
    5222:	9e c0       	rjmp	.+316    	; 0x5360 <command_proc+0x24c>
    5224:	c2 35       	cpi	r28, 0x52	; 82
    5226:	09 f4       	brne	.+2      	; 0x522a <command_proc+0x116>
    5228:	99 c0       	rjmp	.+306    	; 0x535c <command_proc+0x248>
    522a:	ce 34       	cpi	r28, 0x4E	; 78
    522c:	09 f0       	breq	.+2      	; 0x5230 <command_proc+0x11c>
    522e:	a5 c0       	rjmp	.+330    	; 0x537a <command_proc+0x266>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5230:	6a e0       	ldi	r22, 0x0A	; 10
    5232:	9e c0       	rjmp	.+316    	; 0x5370 <command_proc+0x25c>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    5234:	0e 94 bb 24 	call	0x4976	; 0x4976 <mousekey_console_help>
    5238:	a3 c0       	rjmp	.+326    	; 0x5380 <command_proc+0x26c>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    523a:	80 91 d6 01 	lds	r24, 0x01D6
    523e:	88 23       	and	r24, r24
    5240:	19 f0       	breq	.+6      	; 0x5248 <command_proc+0x134>
                mousekey_param = 0;
    5242:	10 92 d6 01 	sts	0x01D6, r1
    5246:	9c c0       	rjmp	.+312    	; 0x5380 <command_proc+0x26c>
            } else {
                print("C> ");
    5248:	8a e1       	ldi	r24, 0x1A	; 26
    524a:	98 e0       	ldi	r25, 0x08	; 8
    524c:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
                command_state = CONSOLE;
    5250:	81 e0       	ldi	r24, 0x01	; 1
    5252:	80 93 d7 01 	sts	0x01D7, r24
    5256:	b1 c0       	rjmp	.+354    	; 0x53ba <command_proc+0x2a6>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    5258:	84 ef       	ldi	r24, 0xF4	; 244
    525a:	97 e0       	ldi	r25, 0x07	; 7
    525c:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    5260:	82 ee       	ldi	r24, 0xE2	; 226
    5262:	97 e0       	ldi	r25, 0x07	; 7
    5264:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    5268:	80 91 14 01 	lds	r24, 0x0114
    526c:	1f 92       	push	r1
    526e:	8f 93       	push	r24
    5270:	8f ed       	ldi	r24, 0xDF	; 223
    5272:	97 e0       	ldi	r25, 0x07	; 7
    5274:	9f 93       	push	r25
    5276:	8f 93       	push	r24
    5278:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    527c:	8d ed       	ldi	r24, 0xDD	; 221
    527e:	97 e0       	ldi	r25, 0x07	; 7
    5280:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    5284:	8b ec       	ldi	r24, 0xCB	; 203
    5286:	97 e0       	ldi	r25, 0x07	; 7
    5288:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    528c:	80 91 13 01 	lds	r24, 0x0113
    5290:	1f 92       	push	r1
    5292:	8f 93       	push	r24
    5294:	88 ec       	ldi	r24, 0xC8	; 200
    5296:	97 e0       	ldi	r25, 0x07	; 7
    5298:	9f 93       	push	r25
    529a:	8f 93       	push	r24
    529c:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    52a0:	86 ec       	ldi	r24, 0xC6	; 198
    52a2:	97 e0       	ldi	r25, 0x07	; 7
    52a4:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    52a8:	87 eb       	ldi	r24, 0xB7	; 183
    52aa:	97 e0       	ldi	r25, 0x07	; 7
    52ac:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    52b0:	80 91 12 01 	lds	r24, 0x0112
    52b4:	1f 92       	push	r1
    52b6:	8f 93       	push	r24
    52b8:	84 eb       	ldi	r24, 0xB4	; 180
    52ba:	97 e0       	ldi	r25, 0x07	; 7
    52bc:	9f 93       	push	r25
    52be:	8f 93       	push	r24
    52c0:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    52c4:	82 eb       	ldi	r24, 0xB2	; 178
    52c6:	97 e0       	ldi	r25, 0x07	; 7
    52c8:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    52cc:	81 ea       	ldi	r24, 0xA1	; 161
    52ce:	97 e0       	ldi	r25, 0x07	; 7
    52d0:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    52d4:	80 91 11 01 	lds	r24, 0x0111
    52d8:	1f 92       	push	r1
    52da:	8f 93       	push	r24
    52dc:	8e e9       	ldi	r24, 0x9E	; 158
    52de:	97 e0       	ldi	r25, 0x07	; 7
    52e0:	9f 93       	push	r25
    52e2:	8f 93       	push	r24
    52e4:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    52e8:	8c e9       	ldi	r24, 0x9C	; 156
    52ea:	97 e0       	ldi	r25, 0x07	; 7
    52ec:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    52f0:	87 e8       	ldi	r24, 0x87	; 135
    52f2:	97 e0       	ldi	r25, 0x07	; 7
    52f4:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    52f8:	80 91 10 01 	lds	r24, 0x0110
    52fc:	1f 92       	push	r1
    52fe:	8f 93       	push	r24
    5300:	84 e8       	ldi	r24, 0x84	; 132
    5302:	97 e0       	ldi	r25, 0x07	; 7
    5304:	9f 93       	push	r25
    5306:	8f 93       	push	r24
    5308:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    530c:	82 e8       	ldi	r24, 0x82	; 130
    530e:	97 e0       	ldi	r25, 0x07	; 7
    5310:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5314:	8b e6       	ldi	r24, 0x6B	; 107
    5316:	97 e0       	ldi	r25, 0x07	; 7
    5318:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    531c:	80 91 0f 01 	lds	r24, 0x010F
    5320:	1f 92       	push	r1
    5322:	8f 93       	push	r24
    5324:	88 e6       	ldi	r24, 0x68	; 104
    5326:	97 e0       	ldi	r25, 0x07	; 7
    5328:	9f 93       	push	r25
    532a:	8f 93       	push	r24
    532c:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    5330:	86 e6       	ldi	r24, 0x66	; 102
    5332:	97 e0       	ldi	r25, 0x07	; 7
    5334:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
    5338:	8d b7       	in	r24, 0x3d	; 61
    533a:	9e b7       	in	r25, 0x3e	; 62
    533c:	48 96       	adiw	r24, 0x18	; 24
    533e:	0f b6       	in	r0, 0x3f	; 63
    5340:	f8 94       	cli
    5342:	9e bf       	out	0x3e, r25	; 62
    5344:	0f be       	out	0x3f, r0	; 63
    5346:	8d bf       	out	0x3d, r24	; 61
    5348:	1b c0       	rjmp	.+54     	; 0x5380 <command_proc+0x26c>
    534a:	ce 51       	subi	r28, 0x1E	; 30
    534c:	ec 2f       	mov	r30, r28
    534e:	f0 e0       	ldi	r31, 0x00	; 0
    5350:	e2 5d       	subi	r30, 0xD2	; 210
    5352:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    5354:	80 81       	ld	r24, Z
    5356:	80 93 d6 01 	sts	0x01D6, r24
    535a:	12 c0       	rjmp	.+36     	; 0x5380 <command_proc+0x26c>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    535c:	61 e0       	ldi	r22, 0x01	; 1
    535e:	03 c0       	rjmp	.+6      	; 0x5366 <command_proc+0x252>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    5360:	61 e0       	ldi	r22, 0x01	; 1
    5362:	06 c0       	rjmp	.+12     	; 0x5370 <command_proc+0x25c>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    5364:	6a e0       	ldi	r22, 0x0A	; 10
    5366:	80 91 d6 01 	lds	r24, 0x01D6
    536a:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <mousekey_param_inc>
    536e:	08 c0       	rjmp	.+16     	; 0x5380 <command_proc+0x26c>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5370:	80 91 d6 01 	lds	r24, 0x01D6
    5374:	0e 94 75 25 	call	0x4aea	; 0x4aea <mousekey_param_dec>
    5378:	03 c0       	rjmp	.+6      	; 0x5380 <command_proc+0x26c>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    537a:	8b e0       	ldi	r24, 0x0B	; 11
    537c:	98 e0       	ldi	r25, 0x08	; 8
    537e:	13 c0       	rjmp	.+38     	; 0x53a6 <command_proc+0x292>
            return false;
    }
    if (mousekey_param) {
    5380:	80 91 d6 01 	lds	r24, 0x01D6
    5384:	88 23       	and	r24, r24
    5386:	69 f0       	breq	.+26     	; 0x53a2 <command_proc+0x28e>
        xprintf("M%d> ", mousekey_param);
    5388:	1f 92       	push	r1
    538a:	8f 93       	push	r24
    538c:	85 e0       	ldi	r24, 0x05	; 5
    538e:	98 e0       	ldi	r25, 0x08	; 8
    5390:	9f 93       	push	r25
    5392:	8f 93       	push	r24
    5394:	0e 94 c0 07 	call	0xf80	; 0xf80 <__xprintf>
    5398:	0f 90       	pop	r0
    539a:	0f 90       	pop	r0
    539c:	0f 90       	pop	r0
    539e:	0f 90       	pop	r0
    53a0:	04 c0       	rjmp	.+8      	; 0x53aa <command_proc+0x296>
    } else {
        print("M>" );
    53a2:	82 e0       	ldi	r24, 0x02	; 2
    53a4:	98 e0       	ldi	r25, 0x08	; 8
    53a6:	0e 94 27 07 	call	0xe4e	; 0xe4e <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    53aa:	81 e0       	ldi	r24, 0x01	; 1
    53ac:	06 c0       	rjmp	.+12     	; 0x53ba <command_proc+0x2a6>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    53ae:	10 92 d7 01 	sts	0x01D7, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    53b2:	80 e0       	ldi	r24, 0x00	; 0
    53b4:	02 c0       	rjmp	.+4      	; 0x53ba <command_proc+0x2a6>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    53b6:	80 e0       	ldi	r24, 0x00	; 0
    53b8:	00 cf       	rjmp	.-512    	; 0x51ba <command_proc+0xa6>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    53ba:	cf 91       	pop	r28
    53bc:	08 95       	ret

000053be <__fixsfsi>:
    53be:	0e 94 e6 29 	call	0x53cc	; 0x53cc <__fixunssfsi>
    53c2:	68 94       	set
    53c4:	b1 11       	cpse	r27, r1
    53c6:	0c 94 75 2a 	jmp	0x54ea	; 0x54ea <__fp_szero>
    53ca:	08 95       	ret

000053cc <__fixunssfsi>:
    53cc:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <__fp_splitA>
    53d0:	88 f0       	brcs	.+34     	; 0x53f4 <__fixunssfsi+0x28>
    53d2:	9f 57       	subi	r25, 0x7F	; 127
    53d4:	98 f0       	brcs	.+38     	; 0x53fc <__fixunssfsi+0x30>
    53d6:	b9 2f       	mov	r27, r25
    53d8:	99 27       	eor	r25, r25
    53da:	b7 51       	subi	r27, 0x17	; 23
    53dc:	b0 f0       	brcs	.+44     	; 0x540a <__fixunssfsi+0x3e>
    53de:	e1 f0       	breq	.+56     	; 0x5418 <__fixunssfsi+0x4c>
    53e0:	66 0f       	add	r22, r22
    53e2:	77 1f       	adc	r23, r23
    53e4:	88 1f       	adc	r24, r24
    53e6:	99 1f       	adc	r25, r25
    53e8:	1a f0       	brmi	.+6      	; 0x53f0 <__fixunssfsi+0x24>
    53ea:	ba 95       	dec	r27
    53ec:	c9 f7       	brne	.-14     	; 0x53e0 <__fixunssfsi+0x14>
    53ee:	14 c0       	rjmp	.+40     	; 0x5418 <__fixunssfsi+0x4c>
    53f0:	b1 30       	cpi	r27, 0x01	; 1
    53f2:	91 f0       	breq	.+36     	; 0x5418 <__fixunssfsi+0x4c>
    53f4:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <__fp_zero>
    53f8:	b1 e0       	ldi	r27, 0x01	; 1
    53fa:	08 95       	ret
    53fc:	0c 94 74 2a 	jmp	0x54e8	; 0x54e8 <__fp_zero>
    5400:	67 2f       	mov	r22, r23
    5402:	78 2f       	mov	r23, r24
    5404:	88 27       	eor	r24, r24
    5406:	b8 5f       	subi	r27, 0xF8	; 248
    5408:	39 f0       	breq	.+14     	; 0x5418 <__fixunssfsi+0x4c>
    540a:	b9 3f       	cpi	r27, 0xF9	; 249
    540c:	cc f3       	brlt	.-14     	; 0x5400 <__fixunssfsi+0x34>
    540e:	86 95       	lsr	r24
    5410:	77 95       	ror	r23
    5412:	67 95       	ror	r22
    5414:	b3 95       	inc	r27
    5416:	d9 f7       	brne	.-10     	; 0x540e <__fixunssfsi+0x42>
    5418:	3e f4       	brtc	.+14     	; 0x5428 <__fixunssfsi+0x5c>
    541a:	90 95       	com	r25
    541c:	80 95       	com	r24
    541e:	70 95       	com	r23
    5420:	61 95       	neg	r22
    5422:	7f 4f       	sbci	r23, 0xFF	; 255
    5424:	8f 4f       	sbci	r24, 0xFF	; 255
    5426:	9f 4f       	sbci	r25, 0xFF	; 255
    5428:	08 95       	ret

0000542a <__floatunsisf>:
    542a:	e8 94       	clt
    542c:	09 c0       	rjmp	.+18     	; 0x5440 <__floatsisf+0x12>

0000542e <__floatsisf>:
    542e:	97 fb       	bst	r25, 7
    5430:	3e f4       	brtc	.+14     	; 0x5440 <__floatsisf+0x12>
    5432:	90 95       	com	r25
    5434:	80 95       	com	r24
    5436:	70 95       	com	r23
    5438:	61 95       	neg	r22
    543a:	7f 4f       	sbci	r23, 0xFF	; 255
    543c:	8f 4f       	sbci	r24, 0xFF	; 255
    543e:	9f 4f       	sbci	r25, 0xFF	; 255
    5440:	99 23       	and	r25, r25
    5442:	a9 f0       	breq	.+42     	; 0x546e <__floatsisf+0x40>
    5444:	f9 2f       	mov	r31, r25
    5446:	96 e9       	ldi	r25, 0x96	; 150
    5448:	bb 27       	eor	r27, r27
    544a:	93 95       	inc	r25
    544c:	f6 95       	lsr	r31
    544e:	87 95       	ror	r24
    5450:	77 95       	ror	r23
    5452:	67 95       	ror	r22
    5454:	b7 95       	ror	r27
    5456:	f1 11       	cpse	r31, r1
    5458:	f8 cf       	rjmp	.-16     	; 0x544a <__floatsisf+0x1c>
    545a:	fa f4       	brpl	.+62     	; 0x549a <__floatsisf+0x6c>
    545c:	bb 0f       	add	r27, r27
    545e:	11 f4       	brne	.+4      	; 0x5464 <__floatsisf+0x36>
    5460:	60 ff       	sbrs	r22, 0
    5462:	1b c0       	rjmp	.+54     	; 0x549a <__floatsisf+0x6c>
    5464:	6f 5f       	subi	r22, 0xFF	; 255
    5466:	7f 4f       	sbci	r23, 0xFF	; 255
    5468:	8f 4f       	sbci	r24, 0xFF	; 255
    546a:	9f 4f       	sbci	r25, 0xFF	; 255
    546c:	16 c0       	rjmp	.+44     	; 0x549a <__floatsisf+0x6c>
    546e:	88 23       	and	r24, r24
    5470:	11 f0       	breq	.+4      	; 0x5476 <__floatsisf+0x48>
    5472:	96 e9       	ldi	r25, 0x96	; 150
    5474:	11 c0       	rjmp	.+34     	; 0x5498 <__floatsisf+0x6a>
    5476:	77 23       	and	r23, r23
    5478:	21 f0       	breq	.+8      	; 0x5482 <__floatsisf+0x54>
    547a:	9e e8       	ldi	r25, 0x8E	; 142
    547c:	87 2f       	mov	r24, r23
    547e:	76 2f       	mov	r23, r22
    5480:	05 c0       	rjmp	.+10     	; 0x548c <__floatsisf+0x5e>
    5482:	66 23       	and	r22, r22
    5484:	71 f0       	breq	.+28     	; 0x54a2 <__floatsisf+0x74>
    5486:	96 e8       	ldi	r25, 0x86	; 134
    5488:	86 2f       	mov	r24, r22
    548a:	70 e0       	ldi	r23, 0x00	; 0
    548c:	60 e0       	ldi	r22, 0x00	; 0
    548e:	2a f0       	brmi	.+10     	; 0x549a <__floatsisf+0x6c>
    5490:	9a 95       	dec	r25
    5492:	66 0f       	add	r22, r22
    5494:	77 1f       	adc	r23, r23
    5496:	88 1f       	adc	r24, r24
    5498:	da f7       	brpl	.-10     	; 0x5490 <__floatsisf+0x62>
    549a:	88 0f       	add	r24, r24
    549c:	96 95       	lsr	r25
    549e:	87 95       	ror	r24
    54a0:	97 f9       	bld	r25, 7
    54a2:	08 95       	ret

000054a4 <__fp_split3>:
    54a4:	57 fd       	sbrc	r21, 7
    54a6:	90 58       	subi	r25, 0x80	; 128
    54a8:	44 0f       	add	r20, r20
    54aa:	55 1f       	adc	r21, r21
    54ac:	59 f0       	breq	.+22     	; 0x54c4 <__fp_splitA+0x10>
    54ae:	5f 3f       	cpi	r21, 0xFF	; 255
    54b0:	71 f0       	breq	.+28     	; 0x54ce <__fp_splitA+0x1a>
    54b2:	47 95       	ror	r20

000054b4 <__fp_splitA>:
    54b4:	88 0f       	add	r24, r24
    54b6:	97 fb       	bst	r25, 7
    54b8:	99 1f       	adc	r25, r25
    54ba:	61 f0       	breq	.+24     	; 0x54d4 <__fp_splitA+0x20>
    54bc:	9f 3f       	cpi	r25, 0xFF	; 255
    54be:	79 f0       	breq	.+30     	; 0x54de <__fp_splitA+0x2a>
    54c0:	87 95       	ror	r24
    54c2:	08 95       	ret
    54c4:	12 16       	cp	r1, r18
    54c6:	13 06       	cpc	r1, r19
    54c8:	14 06       	cpc	r1, r20
    54ca:	55 1f       	adc	r21, r21
    54cc:	f2 cf       	rjmp	.-28     	; 0x54b2 <__fp_split3+0xe>
    54ce:	46 95       	lsr	r20
    54d0:	f1 df       	rcall	.-30     	; 0x54b4 <__fp_splitA>
    54d2:	08 c0       	rjmp	.+16     	; 0x54e4 <__fp_splitA+0x30>
    54d4:	16 16       	cp	r1, r22
    54d6:	17 06       	cpc	r1, r23
    54d8:	18 06       	cpc	r1, r24
    54da:	99 1f       	adc	r25, r25
    54dc:	f1 cf       	rjmp	.-30     	; 0x54c0 <__fp_splitA+0xc>
    54de:	86 95       	lsr	r24
    54e0:	71 05       	cpc	r23, r1
    54e2:	61 05       	cpc	r22, r1
    54e4:	08 94       	sec
    54e6:	08 95       	ret

000054e8 <__fp_zero>:
    54e8:	e8 94       	clt

000054ea <__fp_szero>:
    54ea:	bb 27       	eor	r27, r27
    54ec:	66 27       	eor	r22, r22
    54ee:	77 27       	eor	r23, r23
    54f0:	cb 01       	movw	r24, r22
    54f2:	97 f9       	bld	r25, 7
    54f4:	08 95       	ret

000054f6 <__mulsf3>:
    54f6:	0e 94 8e 2a 	call	0x551c	; 0x551c <__mulsf3x>
    54fa:	0c 94 ff 2a 	jmp	0x55fe	; 0x55fe <__fp_round>
    54fe:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <__fp_pscA>
    5502:	38 f0       	brcs	.+14     	; 0x5512 <__mulsf3+0x1c>
    5504:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <__fp_pscB>
    5508:	20 f0       	brcs	.+8      	; 0x5512 <__mulsf3+0x1c>
    550a:	95 23       	and	r25, r21
    550c:	11 f0       	breq	.+4      	; 0x5512 <__mulsf3+0x1c>
    550e:	0c 94 e8 2a 	jmp	0x55d0	; 0x55d0 <__fp_inf>
    5512:	0c 94 ee 2a 	jmp	0x55dc	; 0x55dc <__fp_nan>
    5516:	11 24       	eor	r1, r1
    5518:	0c 94 75 2a 	jmp	0x54ea	; 0x54ea <__fp_szero>

0000551c <__mulsf3x>:
    551c:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <__fp_split3>
    5520:	70 f3       	brcs	.-36     	; 0x54fe <__mulsf3+0x8>

00005522 <__mulsf3_pse>:
    5522:	95 9f       	mul	r25, r21
    5524:	c1 f3       	breq	.-16     	; 0x5516 <__mulsf3+0x20>
    5526:	95 0f       	add	r25, r21
    5528:	50 e0       	ldi	r21, 0x00	; 0
    552a:	55 1f       	adc	r21, r21
    552c:	62 9f       	mul	r22, r18
    552e:	f0 01       	movw	r30, r0
    5530:	72 9f       	mul	r23, r18
    5532:	bb 27       	eor	r27, r27
    5534:	f0 0d       	add	r31, r0
    5536:	b1 1d       	adc	r27, r1
    5538:	63 9f       	mul	r22, r19
    553a:	aa 27       	eor	r26, r26
    553c:	f0 0d       	add	r31, r0
    553e:	b1 1d       	adc	r27, r1
    5540:	aa 1f       	adc	r26, r26
    5542:	64 9f       	mul	r22, r20
    5544:	66 27       	eor	r22, r22
    5546:	b0 0d       	add	r27, r0
    5548:	a1 1d       	adc	r26, r1
    554a:	66 1f       	adc	r22, r22
    554c:	82 9f       	mul	r24, r18
    554e:	22 27       	eor	r18, r18
    5550:	b0 0d       	add	r27, r0
    5552:	a1 1d       	adc	r26, r1
    5554:	62 1f       	adc	r22, r18
    5556:	73 9f       	mul	r23, r19
    5558:	b0 0d       	add	r27, r0
    555a:	a1 1d       	adc	r26, r1
    555c:	62 1f       	adc	r22, r18
    555e:	83 9f       	mul	r24, r19
    5560:	a0 0d       	add	r26, r0
    5562:	61 1d       	adc	r22, r1
    5564:	22 1f       	adc	r18, r18
    5566:	74 9f       	mul	r23, r20
    5568:	33 27       	eor	r19, r19
    556a:	a0 0d       	add	r26, r0
    556c:	61 1d       	adc	r22, r1
    556e:	23 1f       	adc	r18, r19
    5570:	84 9f       	mul	r24, r20
    5572:	60 0d       	add	r22, r0
    5574:	21 1d       	adc	r18, r1
    5576:	82 2f       	mov	r24, r18
    5578:	76 2f       	mov	r23, r22
    557a:	6a 2f       	mov	r22, r26
    557c:	11 24       	eor	r1, r1
    557e:	9f 57       	subi	r25, 0x7F	; 127
    5580:	50 40       	sbci	r21, 0x00	; 0
    5582:	9a f0       	brmi	.+38     	; 0x55aa <__mulsf3_pse+0x88>
    5584:	f1 f0       	breq	.+60     	; 0x55c2 <__mulsf3_pse+0xa0>
    5586:	88 23       	and	r24, r24
    5588:	4a f0       	brmi	.+18     	; 0x559c <__mulsf3_pse+0x7a>
    558a:	ee 0f       	add	r30, r30
    558c:	ff 1f       	adc	r31, r31
    558e:	bb 1f       	adc	r27, r27
    5590:	66 1f       	adc	r22, r22
    5592:	77 1f       	adc	r23, r23
    5594:	88 1f       	adc	r24, r24
    5596:	91 50       	subi	r25, 0x01	; 1
    5598:	50 40       	sbci	r21, 0x00	; 0
    559a:	a9 f7       	brne	.-22     	; 0x5586 <__mulsf3_pse+0x64>
    559c:	9e 3f       	cpi	r25, 0xFE	; 254
    559e:	51 05       	cpc	r21, r1
    55a0:	80 f0       	brcs	.+32     	; 0x55c2 <__mulsf3_pse+0xa0>
    55a2:	0c 94 e8 2a 	jmp	0x55d0	; 0x55d0 <__fp_inf>
    55a6:	0c 94 75 2a 	jmp	0x54ea	; 0x54ea <__fp_szero>
    55aa:	5f 3f       	cpi	r21, 0xFF	; 255
    55ac:	e4 f3       	brlt	.-8      	; 0x55a6 <__mulsf3_pse+0x84>
    55ae:	98 3e       	cpi	r25, 0xE8	; 232
    55b0:	d4 f3       	brlt	.-12     	; 0x55a6 <__mulsf3_pse+0x84>
    55b2:	86 95       	lsr	r24
    55b4:	77 95       	ror	r23
    55b6:	67 95       	ror	r22
    55b8:	b7 95       	ror	r27
    55ba:	f7 95       	ror	r31
    55bc:	e7 95       	ror	r30
    55be:	9f 5f       	subi	r25, 0xFF	; 255
    55c0:	c1 f7       	brne	.-16     	; 0x55b2 <__mulsf3_pse+0x90>
    55c2:	fe 2b       	or	r31, r30
    55c4:	88 0f       	add	r24, r24
    55c6:	91 1d       	adc	r25, r1
    55c8:	96 95       	lsr	r25
    55ca:	87 95       	ror	r24
    55cc:	97 f9       	bld	r25, 7
    55ce:	08 95       	ret

000055d0 <__fp_inf>:
    55d0:	97 f9       	bld	r25, 7
    55d2:	9f 67       	ori	r25, 0x7F	; 127
    55d4:	80 e8       	ldi	r24, 0x80	; 128
    55d6:	70 e0       	ldi	r23, 0x00	; 0
    55d8:	60 e0       	ldi	r22, 0x00	; 0
    55da:	08 95       	ret

000055dc <__fp_nan>:
    55dc:	9f ef       	ldi	r25, 0xFF	; 255
    55de:	80 ec       	ldi	r24, 0xC0	; 192
    55e0:	08 95       	ret

000055e2 <__fp_pscA>:
    55e2:	00 24       	eor	r0, r0
    55e4:	0a 94       	dec	r0
    55e6:	16 16       	cp	r1, r22
    55e8:	17 06       	cpc	r1, r23
    55ea:	18 06       	cpc	r1, r24
    55ec:	09 06       	cpc	r0, r25
    55ee:	08 95       	ret

000055f0 <__fp_pscB>:
    55f0:	00 24       	eor	r0, r0
    55f2:	0a 94       	dec	r0
    55f4:	12 16       	cp	r1, r18
    55f6:	13 06       	cpc	r1, r19
    55f8:	14 06       	cpc	r1, r20
    55fa:	05 06       	cpc	r0, r21
    55fc:	08 95       	ret

000055fe <__fp_round>:
    55fe:	09 2e       	mov	r0, r25
    5600:	03 94       	inc	r0
    5602:	00 0c       	add	r0, r0
    5604:	11 f4       	brne	.+4      	; 0x560a <__fp_round+0xc>
    5606:	88 23       	and	r24, r24
    5608:	52 f0       	brmi	.+20     	; 0x561e <__fp_round+0x20>
    560a:	bb 0f       	add	r27, r27
    560c:	40 f4       	brcc	.+16     	; 0x561e <__fp_round+0x20>
    560e:	bf 2b       	or	r27, r31
    5610:	11 f4       	brne	.+4      	; 0x5616 <__fp_round+0x18>
    5612:	60 ff       	sbrs	r22, 0
    5614:	04 c0       	rjmp	.+8      	; 0x561e <__fp_round+0x20>
    5616:	6f 5f       	subi	r22, 0xFF	; 255
    5618:	7f 4f       	sbci	r23, 0xFF	; 255
    561a:	8f 4f       	sbci	r24, 0xFF	; 255
    561c:	9f 4f       	sbci	r25, 0xFF	; 255
    561e:	08 95       	ret

00005620 <__udivmodqi4>:
    5620:	99 1b       	sub	r25, r25
    5622:	79 e0       	ldi	r23, 0x09	; 9
    5624:	04 c0       	rjmp	.+8      	; 0x562e <__udivmodqi4_ep>

00005626 <__udivmodqi4_loop>:
    5626:	99 1f       	adc	r25, r25
    5628:	96 17       	cp	r25, r22
    562a:	08 f0       	brcs	.+2      	; 0x562e <__udivmodqi4_ep>
    562c:	96 1b       	sub	r25, r22

0000562e <__udivmodqi4_ep>:
    562e:	88 1f       	adc	r24, r24
    5630:	7a 95       	dec	r23
    5632:	c9 f7       	brne	.-14     	; 0x5626 <__udivmodqi4_loop>
    5634:	80 95       	com	r24
    5636:	08 95       	ret

00005638 <__divmodhi4>:
    5638:	97 fb       	bst	r25, 7
    563a:	07 2e       	mov	r0, r23
    563c:	16 f4       	brtc	.+4      	; 0x5642 <__divmodhi4+0xa>
    563e:	00 94       	com	r0
    5640:	07 d0       	rcall	.+14     	; 0x5650 <__divmodhi4_neg1>
    5642:	77 fd       	sbrc	r23, 7
    5644:	09 d0       	rcall	.+18     	; 0x5658 <__divmodhi4_neg2>
    5646:	0e 94 39 2b 	call	0x5672	; 0x5672 <__udivmodhi4>
    564a:	07 fc       	sbrc	r0, 7
    564c:	05 d0       	rcall	.+10     	; 0x5658 <__divmodhi4_neg2>
    564e:	3e f4       	brtc	.+14     	; 0x565e <__divmodhi4_exit>

00005650 <__divmodhi4_neg1>:
    5650:	90 95       	com	r25
    5652:	81 95       	neg	r24
    5654:	9f 4f       	sbci	r25, 0xFF	; 255
    5656:	08 95       	ret

00005658 <__divmodhi4_neg2>:
    5658:	70 95       	com	r23
    565a:	61 95       	neg	r22
    565c:	7f 4f       	sbci	r23, 0xFF	; 255

0000565e <__divmodhi4_exit>:
    565e:	08 95       	ret

00005660 <__tablejump2__>:
    5660:	ee 0f       	add	r30, r30
    5662:	ff 1f       	adc	r31, r31
    5664:	00 24       	eor	r0, r0
    5666:	00 1c       	adc	r0, r0
    5668:	0b be       	out	0x3b, r0	; 59
    566a:	07 90       	elpm	r0, Z+
    566c:	f6 91       	elpm	r31, Z
    566e:	e0 2d       	mov	r30, r0
    5670:	09 94       	ijmp

00005672 <__udivmodhi4>:
    5672:	aa 1b       	sub	r26, r26
    5674:	bb 1b       	sub	r27, r27
    5676:	51 e1       	ldi	r21, 0x11	; 17
    5678:	07 c0       	rjmp	.+14     	; 0x5688 <__udivmodhi4_ep>

0000567a <__udivmodhi4_loop>:
    567a:	aa 1f       	adc	r26, r26
    567c:	bb 1f       	adc	r27, r27
    567e:	a6 17       	cp	r26, r22
    5680:	b7 07       	cpc	r27, r23
    5682:	10 f0       	brcs	.+4      	; 0x5688 <__udivmodhi4_ep>
    5684:	a6 1b       	sub	r26, r22
    5686:	b7 0b       	sbc	r27, r23

00005688 <__udivmodhi4_ep>:
    5688:	88 1f       	adc	r24, r24
    568a:	99 1f       	adc	r25, r25
    568c:	5a 95       	dec	r21
    568e:	a9 f7       	brne	.-22     	; 0x567a <__udivmodhi4_loop>
    5690:	80 95       	com	r24
    5692:	90 95       	com	r25
    5694:	bc 01       	movw	r22, r24
    5696:	cd 01       	movw	r24, r26
    5698:	08 95       	ret

0000569a <eeprom_read_byte>:
    569a:	f9 99       	sbic	0x1f, 1	; 31
    569c:	fe cf       	rjmp	.-4      	; 0x569a <eeprom_read_byte>
    569e:	92 bd       	out	0x22, r25	; 34
    56a0:	81 bd       	out	0x21, r24	; 33
    56a2:	f8 9a       	sbi	0x1f, 0	; 31
    56a4:	99 27       	eor	r25, r25
    56a6:	80 b5       	in	r24, 0x20	; 32
    56a8:	08 95       	ret

000056aa <eeprom_read_word>:
    56aa:	a8 e1       	ldi	r26, 0x18	; 24
    56ac:	b0 e0       	ldi	r27, 0x00	; 0
    56ae:	42 e0       	ldi	r20, 0x02	; 2
    56b0:	50 e0       	ldi	r21, 0x00	; 0
    56b2:	0c 94 70 2b 	jmp	0x56e0	; 0x56e0 <eeprom_read_blraw>

000056b6 <eeprom_write_byte>:
    56b6:	26 2f       	mov	r18, r22

000056b8 <eeprom_write_r18>:
    56b8:	f9 99       	sbic	0x1f, 1	; 31
    56ba:	fe cf       	rjmp	.-4      	; 0x56b8 <eeprom_write_r18>
    56bc:	1f ba       	out	0x1f, r1	; 31
    56be:	92 bd       	out	0x22, r25	; 34
    56c0:	81 bd       	out	0x21, r24	; 33
    56c2:	20 bd       	out	0x20, r18	; 32
    56c4:	0f b6       	in	r0, 0x3f	; 63
    56c6:	f8 94       	cli
    56c8:	fa 9a       	sbi	0x1f, 2	; 31
    56ca:	f9 9a       	sbi	0x1f, 1	; 31
    56cc:	0f be       	out	0x3f, r0	; 63
    56ce:	01 96       	adiw	r24, 0x01	; 1
    56d0:	08 95       	ret

000056d2 <eeprom_write_word>:
    56d2:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <eeprom_write_byte>
    56d6:	27 2f       	mov	r18, r23
    56d8:	0c 94 5c 2b 	jmp	0x56b8	; 0x56b8 <eeprom_write_r18>

000056dc <eeprom_read_block>:
    56dc:	dc 01       	movw	r26, r24
    56de:	cb 01       	movw	r24, r22

000056e0 <eeprom_read_blraw>:
    56e0:	fc 01       	movw	r30, r24
    56e2:	f9 99       	sbic	0x1f, 1	; 31
    56e4:	fe cf       	rjmp	.-4      	; 0x56e2 <eeprom_read_blraw+0x2>
    56e6:	06 c0       	rjmp	.+12     	; 0x56f4 <eeprom_read_blraw+0x14>
    56e8:	f2 bd       	out	0x22, r31	; 34
    56ea:	e1 bd       	out	0x21, r30	; 33
    56ec:	f8 9a       	sbi	0x1f, 0	; 31
    56ee:	31 96       	adiw	r30, 0x01	; 1
    56f0:	00 b4       	in	r0, 0x20	; 32
    56f2:	0d 92       	st	X+, r0
    56f4:	41 50       	subi	r20, 0x01	; 1
    56f6:	50 40       	sbci	r21, 0x00	; 0
    56f8:	b8 f7       	brcc	.-18     	; 0x56e8 <eeprom_read_blraw+0x8>
    56fa:	08 95       	ret

000056fc <_exit>:
    56fc:	f8 94       	cli

000056fe <__stop_program>:
    56fe:	ff cf       	rjmp	.-2      	; 0x56fe <__stop_program>
